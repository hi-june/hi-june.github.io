<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-28T11:45:04+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[안드로이드 기초] Chapter 05 - 레이아웃 익히기</title><link href="http://localhost:4000/android%20basic/Chapter05/" rel="alternate" type="text/html" title="[안드로이드 기초] Chapter 05 - 레이아웃 익히기" /><published>2022-04-11T00:00:00+09:00</published><updated>2022-04-11T00:00:00+09:00</updated><id>http://localhost:4000/android%20basic/Chapter05</id><content type="html" xml:base="http://localhost:4000/android%20basic/Chapter05/"><![CDATA[<h2 id="1-레이아웃의-개요">1. 레이아웃의 개요</h2>
<ul>
  <li>레이아웃의 기본 개념<br />
레이아웃은 레이아웃 안에 존재하는 위젯을 배치하게 해준다. 다음과 같은 속성들이 있다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">orientation</code>: 레이아웃 안에 배치할 위젯의 수직 또는 수평 방향을 설정</li>
      <li><code class="language-plaintext highlighter-rouge">gravity</code>: 레이아웃 안에 배치할 위젯의 정렬 방향을 좌측, 우측, 중앙 등으로 설정</li>
      <li><code class="language-plaintext highlighter-rouge">padding</code>: 레이아웃 안에 배치할 위젯의 여백을 설정</li>
      <li><code class="language-plaintext highlighter-rouge">layout_weight</code>: 레이아웃이 전체 화면에서 차지하는 공간의 가중값을 설정</li>
      <li><code class="language-plaintext highlighter-rouge">baselineAligned</code>: 레이아웃 안에 배치할 위젯을 보기 좋게 정렬함
<br /><br /></li>
    </ul>
  </li>
  <li>레이아웃의 종류<br />
<img src="/assets/images/%5BAndroid-Basic%5DCh05_1.png" alt="Image" />
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Linear Layout</code>: 레이아웃의 왼쪽 위부터 아래쪽 또는 오른쪽으로 차례로 배치</li>
      <li><code class="language-plaintext highlighter-rouge">Relative Layout</code>: 위젯 자신이 속한 레이아웃의 상하좌우 위치를 지정하여 배치 or 다른 위젯으로부터 상대적인 위치를 지정함</li>
      <li><code class="language-plaintext highlighter-rouge">Table Layout</code>: 행과 열의 개수를 지정한 테이블 형태로 위젯을 배열한다.</li>
      <li><code class="language-plaintext highlighter-rouge">Grid Layout</code>: 테이블 레이아웃과 비슷하지만 행 또는 열을 확장하여 다양하게 배치할 때 더 편리하다.</li>
      <li><code class="language-plaintext highlighter-rouge">Frame Layout</code>: 위젯을 왼쪽 위에 일률적으로 겹쳐서 배치하여 중복되어 보이는 효과를 낼 수 있다. 여러 개의 위젯을 배치한 후 상황에 따라서 필요한 위젯을 보이는 방식에 주로 활용한다.</li>
    </ul>
  </li>
</ul>

<h2 id="2-리니어레이아웃">2. 리니어레이아웃</h2>

<h2 id="3-기타-레이아웃">3. 기타 레이아웃</h2>]]></content><author><name>hi~ June!!</name></author><category term="Android Basic" /><category term="Kotlin" /><summary type="html"><![CDATA[Layout에 대해 알아보자]]></summary></entry><entry><title type="html">[안드로이드 기초] Chapter 01 - 안드로이드의 개요와 개발환경</title><link href="http://localhost:4000/android%20basic/Chapter01/" rel="alternate" type="text/html" title="[안드로이드 기초] Chapter 01 - 안드로이드의 개요와 개발환경" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-07T00:00:00+09:00</updated><id>http://localhost:4000/android%20basic/Chapter01</id><content type="html" xml:base="http://localhost:4000/android%20basic/Chapter01/"><![CDATA[<h2 id="1-안드로이드-개요">1. 안드로이드 개요</h2>
<ul>
  <li>안드로이드 주요 기능<br />
안드로이드는 모바일 기기를 위한 운영체제로 <code class="language-plaintext highlighter-rouge">안드로이드 SDK</code>는 <code class="language-plaintext highlighter-rouge">JAVA</code> 기반으로 안드로이드 애플리케이션을 개발할 수 있는 <code class="language-plaintext highlighter-rouge">API</code>를 제공하고 있다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">애플리케이션 프레임워크</code>를 통해서 제공되는 <code class="language-plaintext highlighter-rouge">API</code>를 사용함으로써 코드를 재사용하여 효율적이고 빠른 애플리케이션 개발 가능</li>
      <li>모바일 기기에 최적화된 <code class="language-plaintext highlighter-rouge">달빅</code> 또는 <code class="language-plaintext highlighter-rouge">아트런타임(ART : Android Run Time)</code> 제공</li>
      <li>2D 그래픽 및 3차원 그래픽을 최적화하여 표현</li>
      <li>모바일용 데이터베이스인 <code class="language-plaintext highlighter-rouge">SQLite</code>를 제공</li>
      <li>각종 오디오, 비디오 및 이미지 형식을 지원</li>
      <li>모바일 기기에 내장된 각종 하드웨어(블루투스, 카메라, 센서, WiFi 등) 지원</li>
      <li><code class="language-plaintext highlighter-rouge">이클립스 IDE</code> 또는 <code class="language-plaintext highlighter-rouge">Android Studio</code>를 통해서 강력하고 빠른 개발 환경 제공
<br /><br /></li>
    </ul>
  </li>
  <li>안드로이드의 특징
    <ul>
      <li>안드로이드의 핵심 커널은 <code class="language-plaintext highlighter-rouge">Linux</code>로 구성되어있다. <code class="language-plaintext highlighter-rouge">안드로이드 커널</code>은 이 리눅스 커널에서 모바일용으로 적합한 내용을 추출하여 필요한 기능을 추가한 것이다.</li>
      <li>개발 언어로 <code class="language-plaintext highlighter-rouge">Java</code> 또는 <code class="language-plaintext highlighter-rouge">Kotlin</code>을 사용한다. 더 나아가 <code class="language-plaintext highlighter-rouge">NDK</code>(Native Development Kit)도 제공하기 때문에 C, C++ 기반으로 개발하여 더 빠른 성능과 세밀한 조작까지도 가능하다.</li>
      <li><code class="language-plaintext highlighter-rouge">안드로이드 SDK</code>에 많은 라이브러리를 포함하고 있다. 특히 <code class="language-plaintext highlighter-rouge">SQLite</code>, <code class="language-plaintext highlighter-rouge">OpenGL</code> 등도 지원한다.</li>
      <li>오픈소스를 지향하고, 지속적인 업그레이드를 제공한다.
<br /><br /></li>
    </ul>
  </li>
  <li>안드로이드의 구조<br />
<img src="/assets/images/%5BAndroid-Basic%5DCh01_1.png" alt="Image" />
    <ul>
      <li><code class="language-plaintext highlighter-rouge">응용 프로그램</code>: 사용자가 쓰는 일반적인 응용프로그램</li>
      <li><code class="language-plaintext highlighter-rouge">응용 프로그램 프레임워크</code>: 안드로이드 API가 존재하는 곳. 애플리케이션은 API를 통해 안드로이드 커널에 접근할 수 있음</li>
      <li><code class="language-plaintext highlighter-rouge">안드로이드 런타임</code>: Java 코어 라이브러리, 달빅 가상 머신, 아트 런타임으로 구성됨. Java, Kotlin 등으로 프로그래밍 후 JVM을 쓰지 않고 대신하여 사용함. 모바일 환경에 최적화되어있음.</li>
      <li><code class="language-plaintext highlighter-rouge">라이브러리</code>: 시스템 접근 때문에 Java, Kotlin이 아닌 C로 작성되어 있음. 성능이 뛰어나고 세밀한 조작 가능</li>
      <li><code class="language-plaintext highlighter-rouge">리눅스 커널</code>: 하드웨어의 운영(메모리 관리, 디바이스 드라이버, 보안 등)과 관련된 저수준의 관리 기능이 들어있음.</li>
    </ul>
  </li>
</ul>]]></content><author><name>hi~ June!!</name></author><category term="Android Basic" /><category term="Kotlin" /><summary type="html"><![CDATA[안드로이드 프로그래밍을 시작해보자!!]]></summary></entry><entry><title type="html">[안드로이드 기초] Chapter 04 - 기본 위젯 익히기</title><link href="http://localhost:4000/android%20basic/Chapter04/" rel="alternate" type="text/html" title="[안드로이드 기초] Chapter 04 - 기본 위젯 익히기" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-10T00:00:00+09:00</updated><id>http://localhost:4000/android%20basic/Chapter04</id><content type="html" xml:base="http://localhost:4000/android%20basic/Chapter04/"><![CDATA[<h2 id="1-뷰의-개요">1. 뷰의 개요</h2>
<p><img src="/assets/images/%5BAndroid-Basic%5DCh04_1.png" alt="Image" width="60%" height="60%" />
<br /></p>

<ul>
  <li>뷰와 뷰그룹
    <ul>
      <li>안드로이드 화면에서 실제로 사용되는 것들은 모두 <code class="language-plaintext highlighter-rouge">View</code>라는 클래스(‘위젯’이라고도 함)의 상속 받음</li>
      <li><code class="language-plaintext highlighter-rouge">버튼</code>, <code class="language-plaintext highlighter-rouge">라디오버튼</code>, <code class="language-plaintext highlighter-rouge">이미지</code> 등등 모두 <code class="language-plaintext highlighter-rouge">View</code>의 <code class="language-plaintext highlighter-rouge">서브클래스</code>이다.</li>
      <li><code class="language-plaintext highlighter-rouge">레이아웃</code>: 다른 위젯을 담을 수 있는 위젯. <code class="language-plaintext highlighter-rouge">ViewGroup</code>이라는 클래스 아래에 존재함. 위젯은 단독 존재하지 않고, 위젯을 담아 배치하는 틀이 <code class="language-plaintext highlighter-rouge">레이아웃</code>이다. (위젯을 포함하는 <code class="language-plaintext highlighter-rouge">컨테이너</code> 역할을 함)
<br /><br /></li>
    </ul>
  </li>
  <li>View 클래스의 XML속성<br />
위젯과 레이아웃 모두 View 클래스의 하위 클래스로써 속성과 메소드를 상속받음<br />
하위 클래스들의 속성을 파악해보기 위해, View 클래스나 해당 클래스의 상위 클래스에서 상속받은 XML속성을 알아보자.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">id</code></li>
      <li><code class="language-plaintext highlighter-rouge">layout_width</code>, <code class="language-plaintext highlighter-rouge">layout_height</code></li>
      <li><code class="language-plaintext highlighter-rouge">background</code></li>
      <li><code class="language-plaintext highlighter-rouge">padding</code>, <code class="language-plaintext highlighter-rouge">layout_margin</code></li>
      <li><code class="language-plaintext highlighter-rouge">visibility</code></li>
      <li><code class="language-plaintext highlighter-rouge">enabled</code>, <code class="language-plaintext highlighter-rouge">clickable</code></li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">rotation</code></p>

        <p><code class="language-plaintext highlighter-rouge">id</code>: 모든 위젯의 아이디를 나타냄. <code class="language-plaintext highlighter-rouge">Kotlin</code> 코드에서 버튼 등의 위젯에 접근할 때 <code class="language-plaintext highlighter-rouge">id</code> 속성에 지정한 아이디를 사용함.</p>

        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span><span class="p">:</span><span class="n">id</span> <span class="p">=</span> <span class="err">'@</span><span class="p">+</span><span class="n">id</span><span class="p">/</span><span class="n">btn1</span><span class="err">'</span> <span class="c1">// 버튼 위젯의 아이디로 btn1을 부여한다.</span>
</code></pre></div>        </div>

        <p>Kotlin 코드에서 다음과 같은 형식을 사용한다.</p>
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">위젯</span> <span class="err">변수</span> <span class="p">=</span> <span class="n">findViewById</span><span class="p">&lt;</span><span class="err">위젯형</span><span class="p">&gt;(</span><span class="nc">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="err">위젯</span><span class="n">id</span><span class="p">)</span>
</code></pre></div>        </div>
        <p><br />
<code class="language-plaintext highlighter-rouge">layout_width</code>, <code class="language-plaintext highlighter-rouge">layout_height</code>: 각각 위젯의 넓이와 높이를 나타냄.</p>
        <ul>
          <li><code class="language-plaintext highlighter-rouge">math_parent</code>: 자신의 부모에 너비나 높이를 맞춤</li>
          <li><code class="language-plaintext highlighter-rouge">wrap_content</code>: 글자가 꼭 들어갈 정도로만 자신의 너비나 높이를 설정</li>
        </ul>

        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span><span class="p">:</span><span class="n">layout_width</span> <span class="p">=</span> <span class="s">"match_parent"</span>   <span class="c1">// "wrap_content"</span>
<span class="n">android</span><span class="p">:</span><span class="n">layout_height</span> <span class="p">=</span> <span class="s">"math_parent"</span>   <span class="c1">// "wrap_content"</span>

<span class="n">android</span><span class="p">:</span><span class="n">layout_width</span> <span class="p">=</span> <span class="s">"1080px"</span>    <span class="c1">// 너비 직접 지정</span>
<span class="n">android</span><span class="p">:</span><span class="n">layout_height</span> <span class="p">=</span> <span class="s">"1920px"</span>    <span class="c1">// 높이 직접 지정</span>
</code></pre></div>        </div>
        <p><br />
<code class="language-plaintext highlighter-rouge">background</code>: 배경색 지정</p>
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span><span class="p">:</span><span class="n">background</span> <span class="p">=</span> <span class="s">"#ff0000"</span>
</code></pre></div>        </div>
        <p><br />
<code class="language-plaintext highlighter-rouge">padding</code>: ‘레이아웃의 경계선’과 ‘위젯’ 사이에 여백을 줌<br />
<img src="/assets/images/%5BAndroid-Basic%5DCh04_2.png" alt="Image" width="30%" height="30%" /></p>
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span><span class="p">:</span><span class="n">padding</span> <span class="p">=</span> <span class="s">"30dp"</span>
</code></pre></div>        </div>
        <p><br />
<code class="language-plaintext highlighter-rouge">layout_margin</code>: ‘위젯’과 ‘위젯’사이에 여백을 줌<br />
<img src="/assets/images/%5BAndroid-Basic%5DCh04_3.png" alt="Image" width="30%" height="30%" /></p>
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">android</span><span class="p">:</span><span class="n">layout_margin</span> <span class="p">=</span> <span class="s">"30dp"</span>
</code></pre></div>        </div>
        <p><br />
<code class="language-plaintext highlighter-rouge">visibility</code>: 위젯을 보일 것인지 여부. default, invisible, gone 세 가지 상태가 있다.<br />
<img src="/assets/images/%5BAndroid-Basic%5DCh04_4.png" alt="Image" width="30%" height="30%" /></p>
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 1"</span><span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 2"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">visibility</span> <span class="p">=</span> <span class="s">"invisible"</span><span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 3"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">visibility</span> <span class="p">=</span> <span class="s">"visible"</span><span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 4"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">visibility</span> <span class="p">=</span> <span class="s">"gone"</span><span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 5"</span><span class="p">/&gt;</span>
</code></pre></div>        </div>
        <p><br />
<code class="language-plaintext highlighter-rouge">enabled</code>, <code class="language-plaintext highlighter-rouge">clickable</code>: 위젯의 동작 여부는 <code class="language-plaintext highlighter-rouge">enable</code>속성, 클릭이나 터치가 가능하게 하는 것은 <code class="language-plaintext highlighter-rouge">clickable</code>속성으로 지정한다. 디폴트는 true이다.<br />
<img src="/assets/images/%5BAndroid-Basic%5DCh04_5.png" alt="Image" width="30%" height="30%" /></p>
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;!--</span> <span class="n">enable</span><span class="err">은</span> <span class="err">버튼이</span> <span class="err">불투명하게</span> <span class="err">변함</span> <span class="p">--&gt;</span>
<span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 1"</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 2"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">enabled</span><span class="p">=</span><span class="s">"false"</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 3"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">clickable</span><span class="p">=</span><span class="s">"false"</span> <span class="p">/&gt;</span>
</code></pre></div>        </div>
        <p><br />
<code class="language-plaintext highlighter-rouge">rotation</code>: 위젯을 회전시켜서 출력하고, 값은 각도로 지정함</p>
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 1"</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 2"</span> <span class="p">/&gt;</span>
<span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"버튼 3"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">rotation</span><span class="p">=</span><span class="s">"45"</span> <span class="p">/&gt;</span>
</code></pre></div>        </div>
      </li>
    </ul>
  </li>
</ul>

<h2 id="2-텍스트뷰">2. 텍스트뷰</h2>
<p><img src="/assets/images/%5BAndroid-Basic%5DCh04_6.png" alt="Image" width="60%" height="60%" /></p>
<ul>
  <li>텍스트뷰: 텍스트뷰의 속성을 알아봄으로써 그 하위에서 상속받는 다른 위젯들의 속성도 이해해보자.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">text</code>: 텍스트뷰에 나타나는 문자열 표현</li>
      <li><code class="language-plaintext highlighter-rouge">textColor</code>: 글자의 색상 지정</li>
      <li><code class="language-plaintext highlighter-rouge">textSize</code>: 글자의 크기 지정(dp, px, in, mm, sp 등등)</li>
      <li><code class="language-plaintext highlighter-rouge">typeface</code>: 글자의 글꼴 지정(sans, serif, monospace 등등)</li>
      <li><code class="language-plaintext highlighter-rouge">textStyle</code>: 글자의 스타일 지정(bold, italic 등등)</li>
      <li>
        <p><code class="language-plaintext highlighter-rouge">singleLine</code>: 글이 길어 줄이 넘어갈 경우 강제로 한 줄까지만 출력 후 맨 뒤에 ‘…‘표시(디폴트는 false)</p>

        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">&lt;</span><span class="nc">TextView</span><span class="p">&gt;</span>
    <span class="n">android</span><span class="p">:</span><span class="n">text</span><span class="p">=</span><span class="s">"textSIze 속성"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">textSize</span><span class="p">=</span><span class="s">"30dp"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">textColor</span><span class="p">=</span><span class="s">"#00FF00"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">textStyle</span><span class="p">=</span><span class="s">"bold|italic"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">typeface</span><span class="p">=</span><span class="s">"serif"</span>
    <span class="n">android</span><span class="p">:</span><span class="n">singlLine</span><span class="p">=</span><span class="s">"true"</span> <span class="p">/&gt;</span>
</code></pre></div>        </div>
        <p><br /></p>
      </li>
    </ul>
  </li>
  <li>
    <p>Kotlin 코드로 XML 속성 설정<br />
xml 파일에서 설정하는 내용의 대부분을 Kotlin 코드에서도 메소드를 이용하여 설정이 가능하다. (보통 setXXX())</p>

    <table>
      <thead>
        <tr>
          <th style="text-align: left"><strong>XML 속성</strong></th>
          <th style="text-align: left">관련 메소드</th>
          <th style="text-align: left">비고</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td style="text-align: left">background</td>
          <td style="text-align: left">setBackgroundColor()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">clickable</td>
          <td style="text-align: left">setClickable()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">focusable</td>
          <td style="text-align: left">setFocusable()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">id</td>
          <td style="text-align: left">setId()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">longClickable</td>
          <td style="text-align: left">setLongClickable()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">focusable</td>
          <td style="text-align: left">setFocusable()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">padding</td>
          <td style="text-align: left">setPedding()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">rotation</td>
          <td style="text-align: left">setRotation()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">scaleX, scaleY</td>
          <td style="text-align: left">setScaleX(), setScaleY()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">visibility</td>
          <td style="text-align: left">setVisibility()</td>
          <td style="text-align: left">View class</td>
        </tr>
        <tr>
          <td style="text-align: left">gravity</td>
          <td style="text-align: left">setGravity()</td>
          <td style="text-align: left">TextView class</td>
        </tr>
        <tr>
          <td style="text-align: left">inputType</td>
          <td style="text-align: left">setRawInputType()</td>
          <td style="text-align: left">TextView class</td>
        </tr>
        <tr>
          <td style="text-align: left">password</td>
          <td style="text-align: left">setTransformationMethod()</td>
          <td style="text-align: left">TextView class</td>
        </tr>
        <tr>
          <td style="text-align: left">text</td>
          <td style="text-align: left">setTextColor()</td>
          <td style="text-align: left">TextView class</td>
        </tr>
        <tr>
          <td style="text-align: left">textSize</td>
          <td style="text-align: left">setTextSize()</td>
          <td style="text-align: left">TextView class</td>
        </tr>
      </tbody>
    </table>
  </li>
</ul>

<h2 id="3-버튼과-에디트텍스트">3. 버튼과 에디트텍스트</h2>
<p><img src="/assets/images/%5BAndroid-Basic%5DCh04_7.png" alt="Image" width="60%" height="60%" /><br />
<br />
‘버튼’과 ‘에디트텍스트’는 사용자에게서 어떤 값을 입력받기 위한 가장 기본적인 위젯임<br />
<br /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">버튼</code>의 Kotlin 코드 동작 단계
    <ol>
      <li>버튼 변수 선언
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">var</span> <span class="py">mybutton</span> <span class="p">:</span> <span class="nc">Button</span>
</code></pre></div>        </div>
      </li>
      <li>변수에 버튼 위젯 대입
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">mybutton</span> <span class="p">=</span> <span class="n">findViewById</span><span class="p">&lt;</span><span class="nc">Button</span><span class="p">&gt;(</span><span class="nc">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">button1</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>버튼을 클릭할 때 동작하는 람다식 정의
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">mybutton</span><span class="p">.</span><span class="nf">setOnClickListener</span><span class="p">{</span>
 <span class="c1">// 동작 내용을 이 부분에 넣기</span>
 <span class="p">}</span>
</code></pre></div>        </div>
        <p><br /></p>
      </li>
    </ol>
  </li>
  <li><code class="language-plaintext highlighter-rouge">에디트텍스트</code>의 Kotlin 코드 동작 단계
    <ol>
      <li>에디트텍스트 변수 선언
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kd">var</span> <span class="py">myEdit</span> <span class="p">:</span> <span class="nc">EditText</span>
</code></pre></div>        </div>
      </li>
      <li>변수에 에디트텍스트 위젯 대입
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="n">myEdit</span> <span class="p">=</span> <span class="n">findViewById</span><span class="p">&lt;</span><span class="nc">EditText</span><span class="p">&gt;(</span><span class="nc">R</span><span class="p">.</span><span class="n">id</span><span class="p">.</span><span class="n">edittext</span><span class="p">)</span>
</code></pre></div>        </div>
      </li>
      <li>에디트텍스트에 입력된 값 가져오기 -&gt; 주로 버튼 클릭 이벤트 람다식 안에 넣음
        <div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="c1">// 에디트텍스트에 입력한 값을 반환하고, 이를 문자열로 바꿔줌</span>
 <span class="kd">var</span> <span class="py">myStr</span> <span class="p">:</span> <span class="nc">String</span> <span class="p">=</span> <span class="n">myEdit</span><span class="p">.</span><span class="nf">getText</span><span class="p">().</span><span class="nf">toString</span><span class="p">()</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
</ul>]]></content><author><name>hi~ June!!</name></author><category term="Android Basic" /><category term="Kotlin" /><summary type="html"><![CDATA[View 와 Widget에 대해 알아보자]]></summary></entry><entry><title type="html">[스프링 입문] Section 02 - 스프링 웹 개발 기초</title><link href="http://localhost:4000/spring/Section02/" rel="alternate" type="text/html" title="[스프링 입문] Section 02 - 스프링 웹 개발 기초" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-07T00:00:00+09:00</updated><id>http://localhost:4000/spring/Section02</id><content type="html" xml:base="http://localhost:4000/spring/Section02/"><![CDATA[<h2 id="web을-개발하는-3가지-방법">Web을 개발하는 3가지 방법</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">정적 컨텐츠</code>: 파일을 그냥 웹 브라우저에 내려주는 것</li>
  <li><code class="language-plaintext highlighter-rouge">MVC와 템플릿 엔진</code>: html, PHP, JSP 같은 파일을 서버에서 프로그래밍해서 동적으로 바꾼 후 내려주는 것</li>
  <li><code class="language-plaintext highlighter-rouge">API</code>: 예를 들자면, 만약 Android나 ios같은 Client랑 개발해야할 떄, ‘jason’이라는 포멧으로 내려주는 것</li>
</ul>

<h2 id="1-정적-컨텐츠">1. 정적 컨텐츠</h2>
<p><img src="/assets/images/section2_1.png" alt="Image" /></p>

<p>1st. 웹 브라우저가 요청을 서버에 넘겨줌<br />
2nd. controller 쪽에서 관련 컨트롤러가 있는지 찾아봄<br />
3rd. 관련 컨트롤러가 없기 떄문에 resources에서 파일을 찾아봄<br />
4th. 별도 변환 과정 없이 그냥 반환해 줌</p>

<h2 id="2-mvc와-템플릿-엔진">2. MVC와 템플릿 엔진</h2>
<p>MVC: <code class="language-plaintext highlighter-rouge">Model</code>, <code class="language-plaintext highlighter-rouge">View</code>, <code class="language-plaintext highlighter-rouge">Controller</code>의 앞 자만 따서 부른다.<br />
<code class="language-plaintext highlighter-rouge">View</code>는 화면과 관련된 일만 하도록, <code class="language-plaintext highlighter-rouge">Controller</code>는 비지니스 로직과 관련된 일만 하도록 <strong><em><span style="color:gold">‘분리’</span></em></strong> 한다는 것이 핵심이다.</p>

<p><img src="/assets/images/section2_2.png" alt="Image" /></p>

<p>1st. 웹 브라우저에서 요청이 들어오면<br />
2nd. 해당 <code class="language-plaintext highlighter-rouge">Controller</code>가 mapping 되어있는 메소드를 찾아서 실행 후<br />
3rd. 반환된 값을 통해 <code class="language-plaintext highlighter-rouge">viewResolver</code>가 해당하는 <code class="language-plaintext highlighter-rouge">view</code>를 찾아주고 템플릿 엔진에 연결시켜줌<br />
4th. 템플릿 엔진은 해당 파일을 렌더링 후 웹 브라우저에 반환해준다.</p>

<h2 id="3-api">3. API</h2>
<p><img src="/assets/images/section2_3.png" alt="Image" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ResponseBody</code>를 사용하면
    <ul>
      <li>HTTP의 BODY에 문자 내용을 직접 반환한다.</li>
      <li><code class="language-plaintext highlighter-rouge">viewResolver</code>대신 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>가 동작하는데(spring에 셋팅되어있음)
        <ul>
          <li>기본 문자 처리의 경우: <code class="language-plaintext highlighter-rouge">StringHttpMessageConverter</code></li>
          <li>기본 객체 처리의 경우: <code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code> &lt;-</li>
          <li>기타 등등의 경우에 맞는 여러 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>가 기본으로 등록되어있음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>-&gt; <code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code>: 객체를 jason으로 바꿔주는 라이브러리들 중 하나이다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Spring" /><category term="Java" /><summary type="html"><![CDATA[Web을 개발하는 3가지 방법에 대해 알아보자]]></summary></entry><entry><title type="html">[스프링 입문] Section 01 - 프로젝트 환경설정</title><link href="http://localhost:4000/spring/Section01/" rel="alternate" type="text/html" title="[스프링 입문] Section 01 - 프로젝트 환경설정" /><published>2022-04-06T00:00:00+09:00</published><updated>2022-04-06T00:00:00+09:00</updated><id>http://localhost:4000/spring/Section01</id><content type="html" xml:base="http://localhost:4000/spring/Section01/"><![CDATA[<h2 id="1-스프링-프로젝트-생성">1. 스프링 프로젝트 생성</h2>
<h3 id="--스프링-부트-스타터를-이용함">- 스프링 부트 스타터를 이용함</h3>
<p>밑바닥부터 만드는 것이 아닌 boot를 사용하여 시작하도록 한다. (https://start.spring.io)</p>

<h3 id="--프로젝트-선택">- 프로젝트 선택</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Project</code>: Gradle Project</li>
  <li><code class="language-plaintext highlighter-rouge">Spring Boot</code>: 가장 최신 버전</li>
  <li><code class="language-plaintext highlighter-rouge">Language</code>: Java</li>
  <li><code class="language-plaintext highlighter-rouge">Java</code>: 11</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Gradle Project</code>: 필요한 라이브러리를 땡겨오고, 빌드하는 Life Cycle까지 관리해주는 Tool로써, 과거 maven에서 요즘은 graddle로 바뀌는 추세라고 한다.</p>

<h3 id="--project-metadata">- Project Metadata</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Group Id</code>: hello</li>
  <li><code class="language-plaintext highlighter-rouge">artifactId</code>: hello- spring</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">artifact</code>: 빌드되어 나오는 결과물</p>

<h3 id="--dependencies">- Dependencies</h3>
<p>‘라이브러리 간 의존관계’를 말하는 것으로 여기서는 어떤 라이브러리를 가져다 쓸 것인지 선택하는 것이다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Spring Web</code></li>
  <li><code class="language-plaintext highlighter-rouge">Thymeleaf</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Thymeleaf</code>: html을 만들어주는 템플릿 엔진</p>

<h2 id="2-라이브러리를-살펴보자">2. 라이브러리를 살펴보자</h2>
<p>Gradle은 의존관계가 있는 라이브러리를 함께 다운로드 한다.<br />
main 과 test의 폴더가 나뉘어져 있음 -&gt; test code의 중요성을 의미한다.</p>
<h3 id="--스프링-부트-라이브러리">- 스프링 부트 라이브러리</h3>
<ul>
  <li>spring-boot-starter-web
    <ul>
      <li><code class="language-plaintext highlighter-rouge">spring-boot-starter-tomcat</code>: 톰캣(웹서버)</li>
      <li>spring-webmvc: 스프링 웹 MVC</li>
    </ul>
  </li>
  <li>spring-boot-starter-thymeleaf: 타임리프 템플릿 엔진(View)</li>
  <li>spring-boot-starter(공통): 스프링부트 + 스프링 코어 + 로깅
    <ul>
      <li>spring-boot
        <ul>
          <li>spring-core</li>
        </ul>
      </li>
      <li>spring-boot-starter-logging
        <ul>
          <li><code class="language-plaintext highlighter-rouge">logback</code>, <code class="language-plaintext highlighter-rouge">slf4j</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">spring-boot-starter-tomcat</code>: 과거엔 웹 서버에 java code를 직접 밀어 넣는 방식이었는데, 지금은 소스 라이브러리에 웹 서버가 내장되어 있다.<br />
<code class="language-plaintext highlighter-rouge">logback</code>, <code class="language-plaintext highlighter-rouge">slf4j</code>: 이 두 라이브러리를 주로 많이 쓴다고 한다.<br />
<code class="language-plaintext highlighter-rouge">log</code>에 대하여: 결과값 출력을 system에 하지 않고 log로 출력하는 이유는 로그 파일도 따로 관리가 되고, 심각한 에러 발생 시에 따로 모아서 볼 수도 있기 때문이다.</p>

<h3 id="--테스트-라이브러리">- 테스트 라이브러리</h3>
<ul>
  <li>spring-boot-starter-test
    <ul>
      <li><code class="language-plaintext highlighter-rouge">junit</code>: 테스트 프레임워크</li>
      <li><code class="language-plaintext highlighter-rouge">mockito</code>: 목 라이브러리</li>
      <li><code class="language-plaintext highlighter-rouge">assertj</code>: 테스트 코드를 좀 더 편하게 작성하게 도와주는 라이브러리</li>
      <li><code class="language-plaintext highlighter-rouge">spring-test</code>: 스프링 통합 테스트 지원</li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">junit</code>: 자바에서 테스트할 때 주로 쓰는 라이브러리로 요즘 4에서 5로 넘어가는 추세라고 한다.</p>

<h2 id="3-welcome-page를-통해-동작-과정을-알아보자">3. Welcome Page를 통해 동작 과정을 알아보자</h2>
<p><img src="/assets/images/section1.png" alt="image" />
<br />
<br />
1st. 웹 브라우저가 서버에 요청하면<br />
2nd. Mapping 되어 있는 것을 찾아서<br />
3rd. 해당 controller에 있는 메소드를 실행한다.<br />
4th. controller가 반환한 값을 받아 viewResolver가 화면을 찾아 처리해준다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Spring" /><category term="Java" /><summary type="html"><![CDATA[프로젝트를 만들어봅시다.]]></summary></entry></feed>