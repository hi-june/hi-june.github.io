<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-06T00:04:46+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[스프링 입문] Section 05 - 회원 관리 예제(웹 MVC 개발)</title><link href="http://localhost:4000/spring-tutorial/Section05/" rel="alternate" type="text/html" title="[스프링 입문] Section 05 - 회원 관리 예제(웹 MVC 개발)" /><published>2022-09-05T00:00:00+09:00</published><updated>2022-09-06T00:00:00+09:00</updated><id>http://localhost:4000/spring-tutorial/Section05</id><content type="html" xml:base="http://localhost:4000/spring-tutorial/Section05/"><![CDATA[<h2 id="file-tree-참고하기">File Tree 참고하기</h2>
<p><img src="/assets/images/Spring-Tutorial/5-1.png" alt="Image" width="65%" height="65%" /></p>

<h2 id="홈-화면">홈 화면</h2>
<p>홈 컨트롤러를 추가해준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// HomeController.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>

<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeController</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">home</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"home"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Q) ‘/’ 요청 시, index.html 대신 hello.html이 호출되는 이유?<br />
A) 컨트롤러가 정적 파일보다 우선순위가 높기 때문이다.</p>

<h2 id="회원-등록">회원 등록</h2>
<p>1) 웹 등록 화면에서 데이터를 전달 받을 폼 객체를 만들어야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberForm.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.controller</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberForm</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span> 
<span class="o">}</span>
</code></pre></div></div>
<p><br />
2) 회원 등록용 폼 컨트롤러 제작</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberController.java</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">MemberController</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/members/new"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">createForm</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"members/createMemberForm"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
3) 회원 컨트롤러에서 회원을 실제 등록하는 기능을 구현</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberController.java</span>
<span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/members/new"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">create</span><span class="o">(</span><span class="nc">MemberForm</span> <span class="n">form</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>   <span class="c1">// 멤버를 생성하고</span>
    
    <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">form</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span> <span class="c1">// 폼으로부터 이름을 가져와 member의 이름을 설정하고</span>
    <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">// memberService를 통해 생성한 member를 저장한다.</span>
    
    <span class="k">return</span> <span class="s">"redirect:/"</span><span class="o">;</span>    <span class="c1">// 회원 가입 완료 후 다시 home 화면으로 돌아가도록 만든다.</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="회원-조회">회원 조회</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberController.java</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">list</span><span class="o">(</span><span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findMembers</span><span class="o">();</span>
    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"members"</span><span class="o">,</span> <span class="n">members</span><span class="o">);</span>
    <span class="k">return</span> <span class="s">"members/memberList"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Spring-Tutorial" /><category term="java" /><category term="spring" /><summary type="html"><![CDATA[Spring Introduction]]></summary></entry><entry><title type="html">[스프링 입문] Section 04 - 스프링 빈과 의존관계</title><link href="http://localhost:4000/spring-tutorial/Section04/" rel="alternate" type="text/html" title="[스프링 입문] Section 04 - 스프링 빈과 의존관계" /><published>2022-09-04T00:00:00+09:00</published><updated>2022-09-04T00:00:00+09:00</updated><id>http://localhost:4000/spring-tutorial/Section04</id><content type="html" xml:base="http://localhost:4000/spring-tutorial/Section04/"><![CDATA[<h2 id="들어가며">들어가며…</h2>
<p>화면을 붙이고 싶음 -&gt; 컨트롤러와 뷰 템플릿 필요<br />
‘멤버 컨트롤러’가 ‘멤버 서비스’를 통해서 회원가입 하고, 데이터를 조회할 수 있어야 함<br />
‘멤버 컨트롤러’와 ‘멤버 서비스’ -&gt; 서로 의존관계가 있다.(멤버 컨트롤러가 멤버 서비스를 의존한다.)</p>

<h2 id="spring의-주요-개념-ioc--di">spring의 주요 개념 IOC &amp; DI</h2>
<p>앞으로 등장할 스프링 컨테이너와 스프링 빈을 이해하기 위해선 Spring의 가장 큰 특징인 <code class="language-plaintext highlighter-rouge">IOC</code>와 <code class="language-plaintext highlighter-rouge">DI</code>에 대해서 알아야 한다.</p>

<h3 id="--제어의-역전-ioc-inversion-of-control">- <u>제어의 역전 (`IOC`, Inversion Of Control)</u></h3>
<p>일반적인 자바 프로그램에서는 각 객체들이 ‘프로그램의 흐름을 결정’하고 ‘각 객체를 직접 생성하고 조작하는 작업(객체를 직접 생성하여 메소드 호출)’을 했다.</p>
<blockquote>
  <p>즉, 모든 작업을 사용자가 제어하는 구조!</p>
</blockquote>

<p>예를 들어 A 객체에서 B 객체에 있는 메소드를 사용하고 싶으면, B 객체를 직접 A 객체 내에서 생성하고 메소드를 호출한다.</p>

<p>하지만 <code class="language-plaintext highlighter-rouge">IOC</code>가 적용된 경우, 객체의 생성을 ‘특별한 관리 위임 주체’에게 맡긴다.<br />
이 경우 사용자는 객체를 직접 생성하지 않고, 객체의 생명주기를 컨트롤하는 주체는 다른 주체가 된다.</p>
<blockquote>
  <p>즉, 사용자의 제어권을 다른 주체에게 넘기는 것을 <code class="language-plaintext highlighter-rouge">IOC</code>(제어의 역전) 라고 한다.</p>
</blockquote>

<p>요약하면 Spring의 <code class="language-plaintext highlighter-rouge">Ioc</code>란<br />
클래스 내부의 객체 생성 -&gt; 의존성 객체의 메소드 호출이 아닌,<br />
‘스프링에게 제어를 위임’하여 스프링이 만든 객체를 주입 -&gt; 의존성 객체의 메소드 호출 구조이다.</p>

<p>스프링에서는 모든 의존성 객체를 스프링이 실행될때 만들어주고 필요한 곳에 주입해준다.</p>

<h3 id="--의존성-주입-di-dependency-injection">- <u>의존성 주입 (`DI`, Dependency Injection)</u></h3>
<p>어떤 객체(B)를 사용하는 주체(A)가 객체(B)를 직접 생성하는게 아니라</p>
<blockquote>
  <p>객체를 외부(Spring)에서 생성해서 사용하려는 주체 객체(A)에 주입시켜주는 방식이다.</p>
</blockquote>

<p>사용하는 주체(A)가 사용하려는 객체(B)를 직접 생성하는 경우 의존성(변경사항이 있는 경우 서로에게 영향을 많이 준다)이 높아진다.</p>
<blockquote>
  <p>하지만, 외부(Spring)에서 직접 생성하여 관리하는 경우에는 A와 B의 의존성이 줄어든다.</p>
</blockquote>

<p>자세한 건 뒤 쪽 코드를 보며 살펴보자.</p>

<h2 id="스프링-컨테이너와-스프링-빈">스프링 컨테이너와 스프링 빈</h2>
<h3 id="--스프링-컨테이너">- <u>스프링 컨테이너</u></h3>
<p>‘스프링 컨테이너’는 ‘스프링 빈’의 생명 주기를 관리하며, 생성된 스프링 빈들에게 추가적인 기능을 제공하는 역할을 한다. <code class="language-plaintext highlighter-rouge">IoC</code>와 <code class="language-plaintext highlighter-rouge">DI</code>의 원리가 스프링 컨테이너에 적용된다.</p>

<p>개발자는 new 연산자, 인터페이스 호출, 팩토리 호출 방식으로 객체를 생성하고 소멸하지만, 스프링 컨테이너를 사용하면 해당 역할을 대신해 준다. 즉, 제어 흐름을 외부에서 관리하게 된다. 또한, 객체들 간의 의존 관계를 스프링 컨테이너가 런타임 과정에서 알아서 만들어 준다.</p>

<h3 id="--스프링-빈">- <u>스프링 빈</u></h3>
<p>Spring에서는 직접 new를 이용하여 생성한 객체가 아니라, Spring에 의하여 관리당하는 자바 객체를 사용한다. 이렇게 Spring에 의하여 생성되고 관리되는 자바 객체를 Bean이라고 한다.</p>

<h2 id="스프링-빈을-등록하는-방법">스프링 빈을 등록하는 방법</h2>
<p><img src="/assets/images/Spring-Tutorial/4-1.png" alt="Image" /><br /><br />
스프링은 스프링이 뜰 때, 스프링 컨테이너에 객체를 생성해서 넣어두고 관리한다.</p>
<blockquote>
  <p>이것을 <u>스프링 컨테이너에서 스프링 빈이 관리된다.</u>고 한다.</p>
</blockquote>

<h3 id="--컴포넌트-스캔과-자동-의존관계-설정">- <u>컴포넌트 스캔과 자동 의존관계 설정</u></h3>
<p><code class="language-plaintext highlighter-rouge">@Component</code> 애노테이션이 있으면 스프링 빈으로 자동 등록된다.</p>

<p>1) <code class="language-plaintext highlighter-rouge">@Controller</code><br />
2) <code class="language-plaintext highlighter-rouge">@Service</code><br />
3) <code class="language-plaintext highlighter-rouge">@Repository</code></p>

<p>위의 세 가지 애노테이션 모두 <code class="language-plaintext highlighter-rouge">@Component</code>을 포함하기 때문에 스프링 빈으로 자동 등록된다.<br />
생성자에 <code class="language-plaintext highlighter-rouge">@Autowired</code>를 사용하면 객체 생성 시점에서 스프링 컨테이너에서 해당 스프링 빈을 찾아서 주입한다.</p>

<blockquote>
  <p>주로 정형화된 컨트롤러, 서비스, 리포리토리 같은 코드는 컴포넌트 스캔을 사용한다.</p>
</blockquote>

<p>코드를 살펴보자!</p>

<p>1) MemberController</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberController.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.service.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>

<span class="nd">@Controller</span> <span class="c1">// Controller라는 어노테이션이 있으면, 스프링이 스프링 컨테이너(스프링 뜰 때 생김)에 객체를 생성해서 넣어두고 관리 == 스프링 컨테이너에서 스프링 빈이 관리된다</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="cm">/*
    컨트롤러가 MemberService를 가져다 써야하는데..

    private final MemberService memberService = new MemberService();
    스프링이 관리를 하게 되면, 다 스프링 컨테이너에 등록을 하고, 스프링 컨테이너로부터 받아서 쓰도록 바꾸어야 함
    이런 식으로 new 해서 인스턴스를 직접 생성해서 쓴다면, 다른 여러 컨트롤러가 MemberService를 가져다 쓰는 등의 상황에서 각각 다른 인스턴스를 사용하는 것이 되기 때문에
    하나만 생성해놓고 공유해서 쓰는 것이 좋다.
     */</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="cm">/*
    1. 스프링이 뜸
    2. 스프링 컨테이너 생김
    3. 생성자 호출
    4. 스프링이 스프링 컨테이너에 있는 memberService를 컨트롤러에 자동으로 연결해줌(Autowired)
     */</span>
    <span class="kd">public</span> <span class="nf">MemberController</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// 오류 뜨는 이유: 서비스에 어노테이션이 등록되어 있지 않다.</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
2) MemberService</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberService.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>
    <span class="c1">// private final MemberRepository memberRepository = new MemoryMemberRepository(); // 기존 방식: MemberService가 MemoryMemberRepository를 직접 생성하게 함</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">MemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// MemberService 코드를 DI 가능하게 변경한다.</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 회원가입
     */</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">join</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">validateDuplicateMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>    <span class="c1">// 중복 회원 검증</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">validateDuplicateMember</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>   <span class="c1">// 회원 리포지토리에서 멤버 이름으로 찾아서</span>
                <span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="o">{</span>   <span class="c1">// 만약 존재한다면</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"이미 존재하는 회원입니다."</span><span class="o">);</span>  <span class="c1">// 이미 존재한다고 예외를 던지게끔 설계</span>
                <span class="o">});</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 전체 회원 조회
     */</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findMembers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findOne</span><span class="o">(</span><span class="nc">Long</span> <span class="n">memberId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
3) MemoryMemberRepository</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemoryMemberRepository.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryMemberRepository</span> <span class="kd">implements</span> <span class="nc">MemberRepository</span><span class="o">{</span>

    <span class="c1">// 실무에서는 동시성 문제가 있을 수 있어서 이렇게 공유되는 변수일 때는...</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Member</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>   <span class="c1">// ConcurrentHashMap을 사용함</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">sequence</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>  <span class="c1">// AtomicLong을 사용함</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(++</span><span class="n">sequence</span><span class="o">);</span>   <span class="c1">// sequence로 id 설정</span>
        <span class="n">store</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">);</span>  <span class="c1">// store라는 map 객체에 &lt;id, member&gt;인 객체 추가</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">store</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>  <span class="c1">// 해당 id를 가진 객체가 없는데 조회를 할 경우, null 처리를 위해 ofNullable로 감싸줌</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>  <span class="c1">// 3. 반환</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">member</span> <span class="o">-&gt;</span> <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>    <span class="c1">// 1. member.getName() 과 name이 같은지 확인하여</span>
                <span class="o">.</span><span class="na">findAny</span><span class="o">();</span> <span class="c1">// 2. 같은 걸 하나라도 찾으면</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// store는 map인데, 반환은 리스트로 되어 있음 -&gt; java에서 실무할 땐 루프 돌리기도 쉽고 해서 리스트를 많이 쓴다고 함</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clearStore</span><span class="o">(){</span>
        <span class="n">store</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--자바-코드로-직접-스프링-빈-등록하기">- <u>자바 코드로 직접 스프링 빈 등록하기</u></h3>
<p>SpringConfig 파일을 만들어 자바 코드로 직접 스프링 빈을 등록할 수 있다.</p>

<blockquote>
  <p>상황에 따라 구현 클래스를 변경해야 하면 설정을 통해 스프링 빈으로 등록한다.</p>
</blockquote>

<p>예를 들자면, MemoryMemberRepository 를 DB와 연결하는 repository로 바꾸는 등의 상황이 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.hellospring</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.service.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemoryMemberRepository</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="di-3가지-방법">DI 3가지 방법</h2>
<p>1) 필드 주입<br />
추천하지 않음. 뭔가 중간에 바꿀 수 있는 방법이 아예 없음.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>2) setter 주입<br />
누군가가 MemberController를 호출했을 때 public으로 열려있어야 함.<br />
setMemberService를 한 번 세팅을 하면 중간에 바꿀 이유가 없는데도 불구하고 public하게 노출되어야 한다는 단점이 있음.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMemberService</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>3) 생성자 주입<br />
생성자를 통해 memberService가 memberController에 주입되고 있다.<br />
이처럼 생성자를 통해서 방법을 생성자 주입이라고 한다.<br />
의존관계가 실행중에 동적으로 변하는 경우는 거의 없으므로 생성자 주입을 권장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">MemberController</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://steady-coding.tistory.com/594">https://steady-coding.tistory.com/594</a> [Spring Bean 총 정리]<br />
2) <a href="https://melonicedlatte.com/2021/07/11/232800.html">https://melonicedlatte.com/2021/07/11/232800.html</a> [스프링 빈(Spring Bean)이란? 개념 정리]</p>]]></content><author><name>hi~ June!!</name></author><category term="Spring-Tutorial" /><category term="java" /><category term="spring" /><summary type="html"><![CDATA[Spring Introduction]]></summary></entry><entry><title type="html">[스프링 입문] Section 03 - 회원 관리 예제(백엔드 개발)</title><link href="http://localhost:4000/spring-tutorial/Section03/" rel="alternate" type="text/html" title="[스프링 입문] Section 03 - 회원 관리 예제(백엔드 개발)" /><published>2022-09-03T00:00:00+09:00</published><updated>2022-09-03T00:00:00+09:00</updated><id>http://localhost:4000/spring-tutorial/Section03</id><content type="html" xml:base="http://localhost:4000/spring-tutorial/Section03/"><![CDATA[<h2 id="비즈니스-요구사항-정리">비즈니스 요구사항 정리</h2>
<ul>
  <li>데이터: 회원 ID, 이름</li>
  <li>기능: 회원 등록, 조회</li>
  <li>아직 Database를 결정하지 않았다고 가정</li>
</ul>

<h3 id="--일반적인-web-application-계층-구조">- <u>일반적인 Web Application 계층 구조</u></h3>
<p><img src="/assets/images/Spring-Tutorial/3-1.png" alt="Image" /><br /></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Controller</code>: 웹 MVC의 컨트롤러 역할</li>
  <li><code class="language-plaintext highlighter-rouge">Service</code>: 핵심 비즈니스 로직 구현, 비즈니스 도메인 객체를 가지고 서비스 로직이 돌아가도록 구현한 계층(ex. 회원은 중복 가입이 안 된다거나 하는 등의 것들)</li>
  <li><code class="language-plaintext highlighter-rouge">Repository</code>: 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리함</li>
  <li><code class="language-plaintext highlighter-rouge">Domain</code>: 비즈니스 도메인 객체 (ex. 회원, 주문, 쿠폰 등등 주로 데이터베이스에 저장하고 관리됨)</li>
</ul>

<h3 id="--클래스-의존관계">- <u>클래스 의존관계</u></h3>
<p><img src="/assets/images/Spring-Tutorial/3-2.png" alt="Image" width="75%" height="75%" /><br /></p>
<ul>
  <li>아직 Database가 선정되지 않은 상황이므로, Interface로 구현 클래스롤 변경할 수 있도록 설계</li>
  <li>Database는 RDB, NoSQL 등등 다양한 경우를 고민중인 상황으로 가정</li>
  <li>개발을 진행하기 위해서 초기 개발 단계에서는 구현체로 가벼운 메모리 기반의 데이터 저장소 사용</li>
</ul>

<h2 id="file-tree-참고하기">File Tree 참고하기</h2>
<p><img src="/assets/images/Spring-Tutorial/3-3.png" alt="Image" width="75%" height="75%" /></p>

<h2 id="회원-도메인과-리포지토리-만들기">회원 도메인과 리포지토리 만들기</h2>
<h3 id="--member-객체">- <u>Member 객체</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Member.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.domain</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>    <span class="c1">// 사용자 지정이 아닌 시스템이 지정해주는 id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--memberrepository-인터페이스">- <u>MemberRepository 인터페이스</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberRepository.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberRepository</span> <span class="o">{</span>
    <span class="nc">Member</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">);</span>

    <span class="c1">// 회원의 id나 name이 없을 경우, 단순히 null을 반환하는 대신, optional로 감싸서 반환하는 방식이 요즘 더 선호됨</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--memorymemberrepository-구현체">- <u>MemoryMemberRepository 구현체</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemoryMemberRepository.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryMemberRepository</span> <span class="kd">implements</span> <span class="nc">MemberRepository</span><span class="o">{</span>

    <span class="c1">// 실무에서는 동시성 문제가 있을 수 있어서 이렇게 공유되는 변수일 때는...</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Member</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>   <span class="c1">// ConcurrentHashMap을 사용함</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">sequence</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>  <span class="c1">// AtomicLong을 사용함</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(++</span><span class="n">sequence</span><span class="o">);</span>   <span class="c1">// sequence로 id 설정</span>
        <span class="n">store</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">);</span>  <span class="c1">// store라는 map 객체에 &lt;id, member&gt;인 객체 추가</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">store</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>  <span class="c1">// 해당 id를 가진 객체가 없는데 조회를 할 경우, null 처리를 위해 ofNullable로 감싸줌</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>  <span class="c1">// 3. 반환</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">member</span> <span class="o">-&gt;</span> <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>    <span class="c1">// 1. member.getName() 과 name이 같은지 확인하여</span>
                <span class="o">.</span><span class="na">findAny</span><span class="o">();</span> <span class="c1">// 2. 같은 걸 하나라도 찾으면</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// store는 map인데, 반환은 리스트로 되어 있음 -&gt; java에서 실무할 땐 루프 돌리기도 쉽고 해서 리스트를 많이 쓴다고 함</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clearStore</span><span class="o">(){</span>
        <span class="n">store</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="회원-서비스-개발">회원 서비스 개발</h2>
<h3 id="--memberservice-객체">- <u>MemberService 객체</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberService.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemoryMemberRepository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>
    <span class="c1">// private final MemberRepository memberRepository = new MemoryMemberRepository(); // 기존 방식: MemberService가 MemoryMemberRepository를 직접 생성하게 함</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// MemberService 코드를 DI 가능하게 변경한다.</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 회원가입
     */</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">join</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">validateDuplicateMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>    <span class="c1">// 중복 회원 검증</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">validateDuplicateMember</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>   <span class="c1">// 회원 리포지토리에서 멤버 이름으로 찾아서</span>
                <span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="o">{</span>   <span class="c1">// 만약 존재한다면</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"이미 존재하는 회원입니다."</span><span class="o">);</span>  <span class="c1">// 이미 존재한다고 예외를 던지게끔 설계</span>
                <span class="o">});</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 전체 회원 조회
     */</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findMembers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findOne</span><span class="o">(</span><span class="nc">Long</span> <span class="n">memberId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="java에서-테스트를-실행하는-방법">java에서 테스트를 실행하는 방법</h2>
<p>개발한 기능을 실행해서 테스트 할 때<br />
1) 자바의 main 메서드<br />
2) 웹 애플리케이션의 컨트롤러<br />
등을 통해 해당 기능을 실행한다.</p>

<p>앞선 방법은 <u>준비 및 실행하는데 오래 걸리고</u>, <u>반복 실행이 어려우며</u>, <u>여러 테스트를 한번에 실행하기 어렵다</u>는 단점이 있다.</p>

<blockquote>
  <p>따라서, 자바는 <code class="language-plaintext highlighter-rouge">JUnit</code>이라는 프레임워크로 테스트를 실행해서 이러한 문제를 해결한다!</p>
</blockquote>

<h3 id="--테스트-작성-시-주의사항">- <u>테스트 작성 시 주의사항!</u></h3>
<p>한번에 여러 테스트를 실행하면 메모리 DB에 직전 테스트의 결과가 남을 수 있어 제대로 테스트 케이스가 실행되지 않을 수 있다. 따라서, 메모리 DB에 저장된 데이터를 삭제해주어야 한다.</p>

<p><code class="language-plaintext highlighter-rouge">@BeforeEach</code>: 각 테스트가 실행되기 전 마다 이 기능 실행<br />
<code class="language-plaintext highlighter-rouge">@AfterEach</code>: 각 테스트가 종료될 때 마다 이 기능 실행</p>

<blockquote>
  <p>테스트는 각각 독립적으로 실행되어야 한다. 테스트 순서에 의존관계가 있는 것은 좋은 테스트가 아님!</p>
</blockquote>

<ul>
  <li>참고 1: Test를 먼저 만들고 구현코드를 만드는 것을 ‘테스트 주도 개발(TDD)’라고 한다.</li>
  <li>참고 2: 실무에서는 Test를 build tool이랑 엮어서 Test case를 통과하지 못하면 아예 빌드가 되지 않게끔 만든다고 한다.</li>
</ul>

<h2 id="memberrepository-테스트-케이스-작성">MemberRepository 테스트 케이스 작성</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemoryMemberRepositoryTest.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.AfterEach</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Assertions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>  <span class="c1">// junit 프레임워크로 테스트</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.*;</span>    <span class="c1">// static import를 통해 assertThat을 바로 쓸 수 있다.</span>

<span class="kd">class</span> <span class="nc">MemoryMemberRepositoryTest</span> <span class="o">{</span>
    <span class="nc">MemoryMemberRepository</span> <span class="n">repository</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryMemberRepository</span><span class="o">();</span>

    <span class="nd">@AfterEach</span>  <span class="c1">// 테스트는 각각 독립적으로 실행되어야 한다. 테스트 순서에 의존관계가 있는 것은 좋은 테스트가 아니다.</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">clearStore</span><span class="o">();</span>    <span class="c1">// 한 번에 여러 테스트를 실행하면 메모리 DB에 직전 테스트의 결과가 남을 수 있다. 따라서 메모리 DB에 저장된 데이터를 삭제해준다.</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(){</span>
        <span class="nc">Member</span> <span class="n">member</span>  <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring"</span><span class="o">);</span>   <span class="c1">// 1. 이름을 세팅하고</span>

        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>    <span class="c1">// 2. member repository에 저장한 뒤</span>

        <span class="nc">Member</span> <span class="n">result</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">get</span><span class="o">();</span>  <span class="c1">// 3. id로 찾아낸 member와 비교</span>
        <span class="c1">// System.out.println("result = " + (result == member));   // 4. 비교 결과를 콘솔에 출력..할 수도 있지만 항상 콘솔에서 볼 수는 없으니</span>
        <span class="c1">//Assertions.assertEquals(result, member);    // 5. junit에서 제공하는 assertions를 통해 검증(앞: expected, 뒤: actual)</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">member</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>   <span class="c1">// 5. assertj에서 제공하는 assertThat을 사용</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findByName</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// given</span>
        <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring1"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring2"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="nc">Member</span> <span class="n">result</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="s">"spring1"</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>

        <span class="c1">// then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">member1</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// given</span>
        <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring1"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring2"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>

        <span class="c1">// then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="memberservice-테스트-케이스-작성">MemberService 테스트 케이스 작성</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberServiceTest.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.assertj.core.api.Assertions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.AfterEach</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.BeforeEach</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.*;</span>

<span class="kd">class</span> <span class="nc">MemberServiceTest</span> <span class="o">{</span>
<span class="cm">/*
    MemberService memberService = new MemberService();
    MemoryMemberRepository memberRepository = new MemoryMemberRepository();
*/</span>

    <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="nc">MemoryMemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="nd">@BeforeEach</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">memberRepository</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryMemberRepository</span><span class="o">();</span>
        <span class="n">memberService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">);</span>    <span class="c1">// DI 방식으로 memberRepository를 미리 생성하고 생성자에서 받게 함</span>
    <span class="o">}</span>

    <span class="nd">@AfterEach</span>  <span class="c1">// 테스트는 각각 독립적으로 실행되어야 한다. 테스트 순서에 의존관계가 있는 것은 좋은 테스트가 아니다.</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">clearStore</span><span class="o">();</span>    <span class="c1">// 한 번에 여러 테스트를 실행하면 메모리 DB에 직전 테스트의 결과가 남을 수 있다. 따라서 메모리 DB에 저장된 데이터를 삭제해준다.</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="n">회원가입</span><span class="o">()</span> <span class="o">{</span>   <span class="c1">// join()</span>
        <span class="c1">// given</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="nc">Long</span> <span class="n">saveId</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="c1">// then</span>
        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findOne</span><span class="o">(</span><span class="n">saveId</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="n">중복_회원_예외</span><span class="o">()</span> <span class="o">{</span>   <span class="c1">// validateDuplicateMember() 검증</span>
        <span class="c1">// given</span>
        <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring"</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring"</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>
        <span class="nc">IllegalStateException</span> <span class="n">e</span> <span class="o">=</span> <span class="n">assertThrows</span><span class="o">(</span><span class="nc">IllegalStateException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member2</span><span class="o">));</span> <span class="c1">// 예외 메시지를 변수 e로 받아서</span>

        <span class="c1">// then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"이미 존재하는 회원입니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Spring-Tutorial" /><category term="java" /><category term="spring" /><summary type="html"><![CDATA[Spring Introduction]]></summary></entry><entry><title type="html">[Team_ForV] 프로젝트의 활용 가능성</title><link href="http://localhost:4000/team_forv/Team_ForV09/" rel="alternate" type="text/html" title="[Team_ForV] 프로젝트의 활용 가능성" /><published>2022-08-29T00:00:00+09:00</published><updated>2022-08-29T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV09</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV09/"><![CDATA[<h2 id="프로젝트를-실제로-배포하고-운영까지-한다고-가정해보자">프로젝트를 실제로 배포하고 운영까지 한다고 가정해보자..</h2>
<p>앞서 설명했듯이 client에서 각각의 서버로 다른 요청을 보낸다.</p>

<p>각 서버는 client로부터 요청을 받아,<br />
<code class="language-plaintext highlighter-rouge">django api server</code>에서는 사용자들의 요청에 대한 정보를 수집하여 데이터베이스에 저장하고,<br />
<code class="language-plaintext highlighter-rouge">flask model server</code>에서는 사용자의 요청에 따라 만든 wav파일을 gcs에 업로드한다.</p>

<blockquote>
  <p>홍보를 하는 입장에서는 소비자에 대한 정보와 니즈파악이 중요하다.</p>
</blockquote>

<p>이것들이 앞으로의 ‘사업의 방향성’을 제시해줄 수 있기 때문인데, 이 서비스는 사용자의 이용정보들을 데이터베이스와 gcs에 차곡차곡 쌓게 되어, 이렇게 수집된 데이터들을 활용할 수 있는 측면이 많다고 생각한다.<br />
하나하나 살펴보자!</p>

<h2 id="활용할-데이터의-종류">활용할 데이터의 종류</h2>
<h3 id="--django-api-server">- <u>django api server</u></h3>
<p><img src="/assets/images/Team_ForV/9-2.png" alt="image" width="60%" height="60%" /><br /></p>

<p>uuid, text(사용자에게 입력받은 문장), created_at(사용자의 요청이 들어온 시간),<br />
member_id(사용자가 원하는 그룹 멤버의 정보) 등의 정보를 데이터베이스에 저장해둔다.</p>

<h3 id="--flask-model-server">- <u>flask model server</u></h3>
<p><img src="/assets/images/Team_ForV/9-3.png" alt="image" /><br /></p>

<p>uuid와 요청시간, 멤버 정보를 갖고 음성파일의 이름을 지어 버켓에 저장해둔다.</p>

<h2 id="사용자-이용-데이터의-활용방안">사용자 이용 데이터의 활용방안!</h2>
<p><img src="/assets/images/Team_ForV/9-1.png" alt="image" width="90%" height="90%" class="align-center" /></p>

<h3 id="--활동시간">- <u>활동시간</u></h3>
<p>client에서 서버로 요청을 보낼 때 api 구성에 요청 시간에 대한 정보도 포함되어있다.<br />
이를 통해서<br />
1) <u>팬들의 주 활동시간</u>을 유추하거나,<br />
2) <u>사용자의 요청이 몰리는 시간</u>을 미리 파악하여 특정 시간에만 서버를 더 증설할 수도 있고,<br />
3) <u>광고나 이벤트 등의 효율적인 운영시간</u>을 유추해볼 수 있다.</p>

<h3 id="--요청한-문구">- <u>요청한 문구</u></h3>
<p>요청한 text 문구들을 분석해보면 <u>팬들의 관심사</u>나 <u>유행하는 밈</u>들도 파악해 볼 수 있다.</p>

<h3 id="--그룹-내-맴버-별-통계">- <u>그룹 내 맴버 별 통계</u></h3>
<p>또, 멤버 별 사용자들의 요청의 빈도수를 통해 <u>그룹 내에 맴버 별 인기의 척도</u>를 가늠할 수도 있겠다.<br />
이를 통해 <u>멤버 별 홍보의 방향성</u>을 결정할 수 있다.</p>

<h3 id="--음성-파일">- <u>음성 파일</u></h3>
<p>로그인 기능이 추가된다면, <u>생성된 음성파일들을 사용자에게 제공해주는</u> 등의 활용을 할 수도 있다.</p>

<blockquote>
  <p>이렇게 이 프로젝트를 통해 단순한 홍보효과를 넘어서 <u>새로운 가치를 발견하는 것</u>도 기대해볼 수 있다.</p>
</blockquote>

<h2 id="한-걸음-더-나아가기">한 걸음 더 나아가기</h2>
<blockquote>
  <p>그렇다면 더 나아가서 이 데이터들를 활용하기 위해 추가하면 좋은 기술들이 무엇이 있을까?</p>
</blockquote>

<h3 id="--elastic-search">- <u>Elastic Search!!</u></h3>
<p><code class="language-plaintext highlighter-rouge">Elasticsearch</code>는 Apache Lucene(아파치 루씬) 기반의 Java 오픈소스 분산 검색 엔진이다.<br />
<code class="language-plaintext highlighter-rouge">Elasticsearch</code>를 통해 루씬 라이브러리를 단독으로 사용할 수 있게 되었으며, 방대한 양의 데이터를 신속하게, 거의 실시간(NRT, Near Real Time)으로 저장, 검색, 분석할 수 있다.<br />
<code class="language-plaintext highlighter-rouge">Elasticsearch</code>는 검색을 위해 단독으로 사용되기도 하며, <code class="language-plaintext highlighter-rouge">ELK</code>(Elasticsearch / Logstatsh / Kibana)스택으로 사용되기도 하는데, ELK 스택이란 다음과 같다.</p>

<p><img src="/assets/images/Team_ForV/9-4.png" alt="image" width="80%" height="80%" /></p>

<p>1) <code class="language-plaintext highlighter-rouge">Logstash</code>: 다양한 소스(DB, csv파일 등)의 로그 또는 트랜잭션 데이터를 수집, 집계, 파싱하여 <code class="language-plaintext highlighter-rouge">Elasticsearch</code>로 전달<br />
2) <code class="language-plaintext highlighter-rouge">Elasticsearch</code>: <code class="language-plaintext highlighter-rouge">Logstash</code>로부터 받은 데이터를 검색 및 집계를 하여 필요한 관심 있는 정보를 획득<br />
3) <code class="language-plaintext highlighter-rouge">Kibana</code>: <code class="language-plaintext highlighter-rouge">Elasticsearch</code>의 빠른 검색을 통해 데이터를 시각화 및 모니터링<br />
<br /></p>

<p>이 프로젝트에서 사용된 데이터베이스는 <code class="language-plaintext highlighter-rouge">mysql</code> 즉, RDBMS의 일종이다.<br />
관계형 DB는 Elasticsearch에서 각각 다음과 같이 대응시킬 수 있다.<br />
<img src="/assets/images/Team_ForV/9-5.jpeg" alt="image" width="60%" height="60%" />
<img src="/assets/images/Team_ForV/9-6.png" alt="image" width="30%" height="30%" /><br /></p>

<p>이렇게 이 프로젝트에 <code class="language-plaintext highlighter-rouge">Elasticsearch</code>를 추가한다면 앞서 말한 데이터들을 사용하는 데 유용하게 쓰일 것 같다!</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://victorydntmd.tistory.com/308">https://victorydntmd.tistory.com/308</a> [Elasticsearch 기본 개념잡기]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="Info" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] AI Models</title><link href="http://localhost:4000/team_forv/Team_ForV08/" rel="alternate" type="text/html" title="[Team_ForV] AI Models" /><published>2022-08-26T00:00:00+09:00</published><updated>2022-08-29T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV08</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV08/"><![CDATA[<h2 id="음성-합성은-어떻게-이루어질까">음성 합성은 어떻게 이루어질까?</h2>
<p>대부분의 음성 합성 네트워크는 두 단계로 이루어진다!</p>

<p>1) Mel-spectrogram 생성<br />
2) waveform 생성</p>

<p>이 프로젝트에서는 <code class="language-plaintext highlighter-rouge">Glow-TTS</code>와 <code class="language-plaintext highlighter-rouge">HiFi-GAN</code>을 사용하여 위의 두 가지 단계를 수행하고, 그 결과물을 이용하여 음성 합성 과정을 수행한다.</p>

<p>각각에 대해서 차근차근 알아보자!</p>

<h2 id="mel-spectrogram의-생성">Mel-spectrogram의 생성</h2>
<p>학습에 필요한 음성 녹음을 마쳤다면, 녹음한 음성 데이터들로 목소리 학습을 진행해야 한다.</p>

<p>음성 데이터를 raw data를 그대로 사용하면 <u>파라미터가 너무 많아지기도</u> 하고 <u>데이터 용량이 너무 커지므로</u><br />
보통 <code class="language-plaintext highlighter-rouge">Mel-spectrogram</code>을 많이 사용한다고 한다.</p>

<p>음성파일에서 의미있는 정보를 얻기 위해선 음성 데이터를 컴퓨터가 다루기 쉽도록 가공해주어야 하는데, 여기서부터 ‘신호처리’의 영역으로 들어간다.</p>

<h3 id="--신호signals란">- <u>신호(Signals)란?</u></h3>
<p>Signal은 시간에 따른 특정 양의 변화이다.<br />
Audio같은 경우 공기의 압력이 이에 해당하는데,<br />
이 정보를 디지털 방식으로 얻는 방법은 시간에 변화에 따른 기압 sample을 채취하는 것으로, 데이터를 샘플링하는 속도를 조절하여 얻을 수 있다.<br />
이렇게 얻어낸 파형 신호에 대해 컴퓨터로 해석하고, 분석 및 수정을 하는 것이다.<br />
아래 예시는 librosa 라이브러리를 이용하여 wav파일로부터 파형 신호를 얻어내는 예제이다.</p>

<p><img src="/assets/images/Team_ForV/8-1.png" alt="image" width="40%" height="40%" /><br /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">librosa</span>
<span class="kn">import</span> <span class="nn">librosa.display</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">y</span><span class="p">,</span> <span class="n">sr</span> <span class="o">=</span> <span class="n">librosa</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'./example_data/blues.00000.wav'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Signal'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Time (samples)'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Amplitude'</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 얻어낸 signal 자체만으로는 의미가 없고, 이로부터 유용한 정보를 뽑아내기 위해 ‘푸리에 변환’이라는 개념이 등장한다.</p>

<h3 id="--푸리에-변환fourier-transform이란">- <u>푸리에 변환(Fourier Transform)이란?</u></h3>
<p>푸리에 변환을 간단히 말하자면 ‘입력 신호를 다양한 주파수를 가지는 주기함수들로 분해하는 것’이다.</p>

<p><img src="/assets/images/Team_ForV/8-2.png" alt="image" width="40%" height="40%" /><br /></p>

<p>오디오 신호는 여러 개의 단일 주파수 음파들로 구성되는데,<br />
<code class="language-plaintext highlighter-rouge">time domain</code>에서는 진폭(amplitude)만 얻어낼 것을 ‘푸리에 변환’을 통해<br />
<code class="language-plaintext highlighter-rouge">frequency domain</code>에서 주파수(frequency)와 진폭(amplitude)를 가지는 주기함수를 얻어내는 것이다.<br />
이렇게 나온 결과를 <code class="language-plaintext highlighter-rouge">spectrum</code>이라고 한다.</p>

<h3 id="--fast-fourier-transformfft">- <u>Fast Fourier Transform(FFT)</u></h3>
<p>푸리에 변환의 한 예로 fast Fourier transform (FFT)는 신호처리에서 널리 쓰이는 알고리즘인데,<br />
다음 예제를 보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">n_fft</span> <span class="o">=</span> <span class="mi">2048</span>
<span class="n">ft</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">librosa</span><span class="p">.</span><span class="n">stft</span><span class="p">(</span><span class="n">y</span><span class="p">[:</span><span class="n">n_fft</span><span class="p">],</span> <span class="n">hop_length</span> <span class="o">=</span> <span class="n">n_fft</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ft</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Spectrum'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Frequency Bin'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Amplitude'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/images/Team_ForV/8-3.png" alt="image" width="40%" height="40%" /><br /></p>

<p>자, 그런데 뭔가 좀 이상하다.<br />
FFT를 통해 얻은 spectrum에는 시간 정보가 없다!<br />
음악이나 speech같은 non periodic한 audio signal은 주파수 정보가 시간마다 달라지기 때문에 FFT만 가지고는 사용할 수는 없다.</p>

<p>따라서, ‘음성 데이터를 시간 단위로 짧게 쪼개서 FFT를 해주자!’라는 해결책이 나왔고,<br />
이것이 Short Time Fourier Transform이다.</p>

<h3 id="--short-time-fourier-transformstft--spectrogram">- <u>Short Time Fourier Transform(STFT) &amp; Spectrogram</u></h3>
<p>STFT를 통해 나오는 spectrogram은 서로의 위에 쌓인 FFT들의 묶음으로 생각할 수 있다.<br />
각각 다른 주파수에 대해 시간이 지남에 따라 달라지기 때문에, spectrogram은 신호의 크기 또는 진폭을 시각적으로 보여줄 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spec</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">librosa</span><span class="p">.</span><span class="n">stft</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">hop_length</span><span class="o">=</span><span class="mi">512</span><span class="p">))</span>
<span class="n">spec</span> <span class="o">=</span> <span class="n">librosa</span><span class="p">.</span><span class="n">amplitude_to_db</span><span class="p">(</span><span class="n">spec</span><span class="p">,</span> <span class="n">ref</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">)</span>

<span class="n">librosa</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">specshow</span><span class="p">(</span><span class="n">spec</span><span class="p">,</span> <span class="n">sr</span><span class="o">=</span><span class="n">sr</span><span class="p">,</span> <span class="n">x_axis</span><span class="o">=</span><span class="s">'time'</span><span class="p">,</span> <span class="n">y_axis</span><span class="o">=</span><span class="s">'log'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="nb">format</span><span class="o">=</span><span class="s">'%+2.0f dB'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Spectrogram'</span><span class="p">)</span>
</code></pre></div></div>
<p><img src="/assets/images/Team_ForV/8-4.png" alt="image" width="50%" height="50%" /><br /></p>

<p>자, 먼 길 왔는데, 그래서 Mel-Spectrogram은 뭐냐..?</p>

<h3 id="--mel-spectrogram">- <u>Mel-Spectrogram</u></h3>
<p>사람들은 음성 신호를 인식할 때 주파수를 linear scale로 인식하는게 아니라고 한다.<br />
또, 낮은 주파수를 높은 주파수보다 더 예민하게 받아들이는데, 예를 들어 500 ~ 1000 Hz 가 바뀌는건 예민하게 인식하는데 10000Hz ~ 20000 Hz가 바뀌는 것은 잘 인식 못한다는 것이다.</p>

<p><img src="/assets/images/Team_ForV/8-5.gif" alt="image" width="30%" height="30%" /><br /></p>

<p>동일한 pitch distance면 듣는 사람으로 하여금 동일한 정도로 멀리 들리도록하는 pitch 단위를 제안했는데, 이를 mel scale이라고 하고, 이 주파수를 mel scale로 볼 수 있게 한 것이다.</p>

<p>앞선 spectrogram에 mel scale을 적용하면 Mel-Spectrogram을 만들 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mel_spect</span> <span class="o">=</span> <span class="n">librosa</span><span class="p">.</span><span class="n">feature</span><span class="p">.</span><span class="n">melspectrogram</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span> <span class="n">sr</span><span class="o">=</span><span class="n">sr</span><span class="p">,</span> <span class="n">n_fft</span><span class="o">=</span><span class="mi">2048</span><span class="p">,</span> <span class="n">hop_length</span><span class="o">=</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">mel_spect</span> <span class="o">=</span> <span class="n">librosa</span><span class="p">.</span><span class="n">power_to_db</span><span class="p">(</span><span class="n">spect</span><span class="p">,</span> <span class="n">ref</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">)</span>
<span class="n">librosa</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">specshow</span><span class="p">(</span><span class="n">mel_spect</span><span class="p">,</span> <span class="n">y_axis</span><span class="o">=</span><span class="s">'mel'</span><span class="p">,</span> <span class="n">fmax</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span> <span class="n">x_axis</span><span class="o">=</span><span class="s">'time'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Mel Spectrogram'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="nb">format</span><span class="o">=</span><span class="s">'%+2.0f dB'</span><span class="p">)</span>
</code></pre></div></div>
<p><img src="/assets/images/Team_ForV/8-6.png" alt="image" width="50%" height="50%" /><br /></p>

<h2 id="wave-form의-생성">wave form의 생성</h2>
<p><img src="/assets/images/Team_ForV/8-7.png" alt="image" width="60%" height="60%" /><br /><br />
Glow-TTS와 Hifi-Gan에 대해서 이해하기 위해서는 먼저 Gan 모델에 대한 전반적인 이해가 필요하다.</p>

<h3 id="--gan-model">- <u>Gan Model</u></h3>
<p>GAN은 생성자와 구분자로 구성되어있다. 구분자는 가짜 데이터가 포함된 전체데이터에서 실제 데이터를 구분해내는 학습을, 생성자는 실제와 비슷한 데이터를 생성해서 서로간 상호학습을 하는 방식이다.</p>

<h3 id="--flow-based-generative-models">- <u>Flow-based generative models</u></h3>
<p>연속적인 역변환을 통해서 생성하는 방식으로, 데이터의 분포에서 학습하는 방식이다.<br />
그림을 보면 GAN과 VAE는 각각 구분자와 인코더 부분이 사다리꼴 모양인데, 이는 원본 데이터를 압축하는 것을 의미하고, 압축 및 확장하는 과정에서 데이터의 손실이 발생할 수 있다.<br />
하지만 Flow-based 생성모델은 그림에서도 볼 수 있듯이 역함수 변환을 통해 데이터의 손실을 줄일 수 있다.</p>

<h2 id="glow-tts--hifi-gan">Glow-TTS &amp; Hifi-Gan</h2>
<p><img src="/assets/images/Team_ForV/8-0.png" alt="image" width="90%" height="90%" class="align-center" /><br />
<code class="language-plaintext highlighter-rouge">Glow-TTS</code> 모델은 ‘Flow-based generative model’ for parallel TTS를 제안한다.<br />
<code class="language-plaintext highlighter-rouge">Hifi-Gan</code> 모델은 ‘Gan Model’에서 discriminator를 sub-discriminators로 만들어 기존의 것보다 성능을 높인 것이 특징이다.</p>

<p>각각의 모델을 처음 제안한 ‘카카오엔터프라이즈의 기술블로그’에 자세히 설명되어있으니 그 내용을 인용하겠다.</p>

<h3 id="--glow-tts">- <u>Glow-TTS</u></h3>
<blockquote>
  <p>FastSpeech와 ParaNet 같은 최신 음성합성(TTS) 모델은 발화를 병렬적으로 합성(non-Autoregressive)해 그 속도를 높인  새로운 보코더(vocoder)를 제안했습니다. 하지만 이런 병렬 모델이 텍스트를 구성하는 음소 순서대로 오디오를 정렬하기 위해서는 따로 훈련된 Autoregressive 모델의 지원이 반드시 필요합니다.</p>
</blockquote>

<blockquote>
  <p>이에 AI Lab은 정렬 모델을 따로 구축하지 않고도 이를 보다 정확하게 추정하는 새로운 TTS 모델인 Glow-TTS를 제안했습니다. Glow-TTS는 플로우 기반 생성 모델(flow-based generative models)과 동적 프로그래밍(dynamic programming)의 속성을 활용해 입력된 텍스트 순서에 따라 발화를 차례대로 정렬합니다(monotonic alignment).</p>
</blockquote>

<blockquote>
  <p>그 결과, 매우 긴 텍스트로 빠르게 합성함은 물론, 서로 다른 강세와 억양을 갖춘 발화를 생성할 수 있습니다. 자체 실험에서 Glow-TTS는 autoregressive 모델인 Tacotron 2과 비교해 비슷한 품질의 음성을 약 15배 더 빠르게 생성했습니다. 또한 Glow-TTS가 다화자 음성합성 태스크에도 쉽게 적용될 수 있음을 확인했습니다.</p>
</blockquote>

<h3 id="--hifi-gan">- <u>Hifi-Gan</u></h3>
<blockquote>
  <p>최근 음성합성 연구에서는 GAN(generative adversarial networks) 구조를 활용해 보코더(vocoder)의 음성 합성 속도와 메모리 효율을 높이는 시도가 있었습니다. 하지만 이런 방식의 보코더가 합성한 음성의 품질은 Autoregressive 모델이나 플로우 기반의 생성 모델(flow-based generative model)에 미치지 못했습니다. 이에 AI Lab은 음성 오디오의 주기적 신호를 구별해내는 방식으로 기존 제안된 모델보다 월등히 좋은 품질의 오디오를 빠르게 합성하는 HiFi-GAN을 제안했습니다.</p>
</blockquote>

<blockquote>
  <p>AI Lab은 메모리 효율성 및 속도와 관련된 초매개변수(hyperparameter)를 조정하고, 이 값을 조합한 3가지 버전의 세부 모델로 실험을 진행했습니다. 첫 번째 버전은 인간과 비슷한 수준의 고품질 오디오를 실시간의 167.9배 속도로 합성합니다. 두번째 버전은 비교 모델 중 가장 적은 매개변수를 사용하면서도 가장 좋은 음질을 생성합니다. 세 번째 버전은 GPU에서 실시간의 1,186.8배, CPU에서 13.4배 더 빠르게 기존 모델과 비슷한 품질의 오디오를 합성합니다.</p>
</blockquote>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>사실 사용된 AI 기술에 대해서 깊게 들어가면 논문도 살펴봐야되고 끝없이 들어가야하지만, 이 프로젝트는 AI 기술 자체에 초점을 맞춘 것은 아니라서 간단하게만 다뤄보았다.<br />
새삼 다시 느낀거지만 AI는 컴퓨터랑 관련이 있다기보단 그 자체로 다른 하나의 학문이라는 생각이 든다..</p>

<p>다음 글에서는 이 프로젝트를 배포하고 난 뒤, 쌓이게 되는 사용자들의 데이터를 어떻게 활용할 수 있는지를 살펴보자!</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://sce-tts.github.io/#/v2/train">https://sce-tts.github.io/#/v2/train</a> [TTS 모델학습]<br />
2) <a href="https://medium.com/analytics-vidhya/understanding-the-mel-spectrogram-fca2afa2ce53">https://medium.com/analytics-vidhya/understanding-the-mel-spectrogram-fca2afa2ce53</a><br />
[Understanding the Mel Spectrogram]<br />
3) <a href="https://sofar-sogood.tistory.com/entry/Glow-TTS-Glow-TTS-A-Generative-Flow-for-Text-to-Speech-via-Monotonic-Alignment-Search-NIPS-20">https://sofar-sogood.tistory.com/entry/Glow-TTS-Glow-TTS-A-Generative-Flow-for-Text-to-Speech-via-Monotonic-Alignment-Search-NIPS-20</a><br />
[Glow-TTS: A Generative Flow for Text-to-Speech via Monotonic Alignment Search (NIPS 20)]<br />
4) <a href="https://sofar-sogood.tistory.com/entry/Hifi-GAN-HiFi-GAN-Generative-Adversarial-Networks-for-Efficient-and-High-Fidelity-Speech-Synthesis-NIPS-20">https://sofar-sogood.tistory.com/entry/Hifi-GAN-HiFi-GAN-Generative-Adversarial-Networks-for-Efficient-and-High-Fidelity-Speech-Synthesis-NIPS-20</a><br />
[HiFi-GAN: Generative Adversarial Networks for Efficient and High Fidelity Speech Synthesis (NIPS 20)]
5) <a href="https://tech.kakaoenterprise.com/94">https://tech.kakaoenterprise.com/94</a> [카카오엔터프라이즈 기술블로그 Tech&amp;(테크앤):티스토리]<br />
6) <a href="https://tech.kakaoenterprise.com/96">https://tech.kakaoenterprise.com/96</a> [카카오엔터프라이즈 기술블로그 Tech&amp;(테크앤):티스토리]
7) <a href="https://medium.com/@sunwoopark/slow-paper-glow-generative-flow-with-invertible-1x1-convolutions-837710116939">https://medium.com/@sunwoopark/slow-paper-glow-generative-flow-with-invertible-1x1-convolutions-837710116939</a><br />
[Glow: Generative Flow with Invertible 1x1 Convolutions]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="AI" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] Docker Setting</title><link href="http://localhost:4000/team_forv/Team_ForV07/" rel="alternate" type="text/html" title="[Team_ForV] Docker Setting" /><published>2022-08-25T00:00:00+09:00</published><updated>2022-08-26T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV07</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV07/"><![CDATA[<h2 id="문제상황-발생">문제상황 발생!</h2>
<p><img src="/assets/images/Team_ForV/7-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
음성파일 합성을 위해선 TTS 라는 라이브러리와 g2pk라는 라이브러리가 필요하다.</p>

<p>g2pk는 영어가 입력되었을 시 보이는 것처럼 한국어 발음에 맞춰서 변환해주고,<br />
-&gt; 최종적으로 변환된 문장을 TTS라이브러리를 통해 음성으로 만들어준다.</p>

<p>그래, 여기까지는 그렇다 치는데 이 라이브러리들을 사용하는데에 2가지 문제가 있었다.</p>

<ol>
  <li>위 라이브러리들은 3.6 ~ 3.7 사이의 파이썬 버전을 요구했다. 하지만 API Server가 이미 먼저 만들어진 상태였고, API Server는 최신 버전의 파이썬을 사용중이었기 때문에 버전이 맞지 않았다.</li>
  <li>결정적으로 g2pk 라이브러리를 사용하기 위해 설치되는 서브 모듈 중 ‘mecab’이라는 라이브러리가 당최 가상환경에서 설치되지를 않았다(아마 M1 환경에서 제대로 설치가 되지 않는 것 같다). 구글링해보니 이미 악명 높은 라이브러리인 것 같더라..</li>
</ol>

<h2 id="docker를-이용하여-문제를-해결해보자">Docker를 이용하여 문제를 해결해보자!!</h2>
<p><img src="/assets/images/Team_ForV/7-2.png" alt="image" width="70%" height="70%" /><br /></p>

<p>Docker는 ‘컨테이너 기반의 오픈소스 가상화 플랫폼’이다.</p>

<p>여기에서 말하는 ‘컨테이너’는 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다.<br />
백엔드 프로그램, 데이터베이스 서버, 메시지 큐등 어떤 프로그램도 컨테이너로 추상화할 수 있고 AWS, Azure, Google cloud등 어디에서든 실행할 수 있다.</p>

<p>Docker의 컨테이너 개념을 이용해서 필요한 각각의 실행환경들을 컨테이너로 분리하여 Docker 위에서 돌아가도록 구성하게 되었다.<br />
이렇게 구성할 경우, model server와 api server의 실행환경이 다르더라도 하나의 서버에 여러개의 컨테이너를 실행하면서 서로 영향을 미치지 않고 독립적으로 실행되어 마치 가벼운 Virtual Machine을 사용하는 느낌을 줄 수 있다.</p>

<h2 id="docker-composeyml--dockerfile">docker-compose.yml &amp; DockerFile</h2>
<h3 id="--docker-composeyml">- docker-compose.yml</h3>
<p>frontend(react), api server(django), model server(flask), mysql, rabbitMQ, celery<br />
이렇게 총 6개의 컨테이너를 구성했다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># docker-compose.yml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">frontend</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./frontend</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">npm"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">start"</span> <span class="pi">]</span> 
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">3000:3000</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./frontend/:/frontend</span>
      <span class="pi">-</span> <span class="s">./frontend/node_modules/:/frontend/node_modules</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">CI=true</span>
      <span class="pi">-</span> <span class="s">CHOKIDAR_USEPOLLING=true</span>
      <span class="pi">-</span> <span class="s">REACT_APP_BACKEND_URL=http://localhost:5000</span>
    <span class="na">tty</span><span class="pi">:</span> <span class="no">true</span>
  
  <span class="na">apiserver</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./backend/apiserver</span>
      <span class="na">args</span><span class="pi">:</span>
        <span class="na">DJANGO_ALLOWED_HOSTS</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
        <span class="na">DJANGO_SECRET_KEY</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
        <span class="na">DJANGO_CORS_ORIGIN_WHITELIST</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">sh -c "/wait &amp;&amp; python ./apiserver/manage.py makemigrations &amp;&amp; python ./apiserver/manage.py makemigrations mainApp &amp;&amp; python ./apiserver/manage.py migrate &amp;&amp; python ./apiserver/db_init.py &amp;&amp; python ./apiserver/model_init.py &amp;&amp; python ./apiserver/manage.py runserver 0.0.0.0:8000"</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8000:8000</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/backend</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ttsmysql</span>

  <span class="na">ttsmysql</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">--lower_case_table_names=1</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">ttsmysql</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MYSQL_DATABASE=tts</span>
      <span class="pi">-</span> <span class="s">MYSQL_USER = root</span>
      <span class="pi">-</span> <span class="s">MYSQL_ROOT_PASSWORD=1234</span>
      <span class="pi">-</span> <span class="s">TZ=Asia/Seoul</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>

  <span class="na">modelserver</span><span class="pi">:</span>
    <span class="na">platform</span><span class="pi">:</span> <span class="s">linux/amd64</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./backend/modelserver</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">5000:5000</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">FLASK_APP=app</span>
      <span class="pi">-</span> <span class="s">FLASK_ENV=development</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">flask run --host=0.0.0.0</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/backend</span>

  <span class="na">rabbit</span><span class="pi">:</span>
      <span class="na">hostname</span><span class="pi">:</span> <span class="s">tts_host</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">rabbitmq:3-management</span>
      <span class="na">command</span><span class="pi">:</span> <span class="s">rabbitmq-server</span>
      <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
      <span class="na">environment</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">RABBITMQ_DEFAULT_USER=tts</span>
        <span class="pi">-</span> <span class="s">RABBITMQ_DEFAULT_PASS=tts123</span>
        <span class="pi">-</span> <span class="s">RABBITMQ_DEFAULT_VHOST=tts_host</span>
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">5672:5672</span>  
        <span class="pi">-</span> <span class="s">15672:15672</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/var/lib/rabbitmq</span>
      <span class="na">networks</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">tts</span>
      <span class="na">depends_on</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">modelserver</span>

  <span class="na">celery</span><span class="pi">:</span>
    <span class="na">platform</span><span class="pi">:</span> <span class="s">linux/amd64</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./backend/modelserver</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">apiserver"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">rabbit"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">modelserver"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">celery"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-A"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">celery_app"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">worker"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--loglevel=info"</span><span class="pi">]</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/backend</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">tts</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">bridge</span>
</code></pre></div></div>

<h3 id="--dockerfile">- Dockerfile</h3>
<p><img src="/assets/images/Team_ForV/7-3.png" alt="image" width="70%" height="70%" /><br /></p>

<p>Dockerfile을 이해하기 위해선 docker 이미지라는 개념을 먼저 알아야한다.</p>

<p>도커 이미지란, 서비스 운영에 필요한 서버 프로그램, 소스 코드, 컴파일된 실행 파일을 묶은 형태로써 기존에 있는 이미지에 추가적인 구성을 더해 또 다른 이미지를 만들 수 있다.<br />
도커 허브와 같은 컨테이너 레지스트리에서 pull 받아서 사용하거나, dockerfile을 직접 작성해 이미지를 만들어서 push할 수 있다.</p>

<p>다 살펴보진 않고, 문제의 핵심부분인 model server에 쓰인 Dockerfile만 보자.</p>
<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Dockerfile</span>
<span class="k">FROM</span><span class="s"> python:3.6.15</span>

<span class="c"># Python</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> apt-utils <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nt">-y</span> <span class="nb">install </span>software-properties-common <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get update <span class="nt">--fix-missing</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nt">-y</span> <span class="nb">install</span> <span class="nt">--fix-missing</span> python3-pip <span class="o">&amp;&amp;</span> <span class="se">\
</span>  python3 <span class="nt">-m</span> pip <span class="nb">install </span>pip <span class="nt">--upgrade</span>

<span class="k">RUN </span>apt-get update <span class="nt">-y</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> build-essential gcc <span class="se">\
</span>  libsndfile1

<span class="c"># mecab start</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> tzdata g++ git curl
<span class="k">RUN </span>apt-get <span class="nb">install </span>python3-setuptools
<span class="k">RUN </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> default-jdk default-jre
<span class="c"># mecab end</span>

<span class="k">WORKDIR</span><span class="s"> /backend/modelserver</span>

<span class="k">COPY</span><span class="s"> requirements.txt .</span>
<span class="k">COPY</span><span class="s"> requirements_TTS.txt .</span>

<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements_TTS.txt

<span class="k">RUN </span>pip <span class="nb">install </span>celery
<span class="k">RUN </span>pip <span class="nb">install </span>google-cloud-storage

<span class="k">RUN </span>pip <span class="nb">install </span><span class="nv">nltk</span><span class="o">==</span>3.6.7
<span class="k">RUN </span>pip <span class="nb">install </span><span class="nv">konlpy</span><span class="o">==</span>0.6.0
<span class="k">RUN </span>pip <span class="nb">install </span>mecab-ko<span class="o">==</span>1.0.0
<span class="k">RUN </span>pip <span class="nb">install </span>mecab-python<span class="o">==</span>1.0.0
<span class="k">RUN </span>pip <span class="nb">install </span>python-mecab-ko<span class="o">==</span>1.0.14
<span class="k">RUN </span>pip <span class="nb">install </span><span class="nv">g2pk</span><span class="o">==</span>0.9.4

<span class="c"># mecab start</span>
<span class="c"># RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2</span>
<span class="c"># RUN update-alternatives --config python3</span>
<span class="k">RUN </span><span class="nb">cd</span> <span class="nb">.</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span>  curl <span class="nt">-s</span> https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh | bash <span class="nt">-s</span>
<span class="c"># mecab end</span>

<span class="k">RUN </span><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>C.UTF-8
<span class="k">ENV</span><span class="s"> LANG=C.UTF-8</span>
<span class="k">ENV</span><span class="s"> LANGUAGE=C.UTF-8</span>

<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">USER</span><span class="s"> root</span>
</code></pre></div></div>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>도커의 개념과 프로젝트에 사용한 도커 세팅에 대해 간단히 알아보았다.<br />
다음 글에서는 ‘음성 학습’과 ‘음성 합성’에 필요한 AI 학습 모델과 라이브러리들에 대해 좀 더 자세히 알아보도록 하자.</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html">https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html</a><br />
[초보를 위한 도커 안내서 - 도커란 무엇인가?]<br />
2) <a href="https://somjang.tistory.com/entry/Docker-ubuntu1604-%EA%B8%B0%EB%B0%98%EC%97%90%EC%84%9C-mecab-ko-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95">https://somjang.tistory.com/entry/Docker-ubuntu1604-%EA%B8%B0%EB%B0%98%EC%97%90%EC%84%9C-mecab-ko-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95</a><br />
[ubuntu16.04 기반에서 mecab-ko 활용하는 방법]<br />
3) <a href="https://github.com/litsynp/flask-g2pk">https://github.com/litsynp/flask-g2pk</a> [flask-g2pk]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="docker" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] Flask Model Server</title><link href="http://localhost:4000/team_forv/Team_ForV06/" rel="alternate" type="text/html" title="[Team_ForV] Flask Model Server" /><published>2022-08-22T00:00:00+09:00</published><updated>2022-08-22T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV06</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV06/"><![CDATA[<h2 id="flask-model-server의-역할">Flask Model Server의 역할</h2>
<p><img src="/assets/images/Team_ForV/6-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
<code class="language-plaintext highlighter-rouge">Flask Model Server</code>는 단 한 가지 역할만 수행한다.
클라이언트로부터 음성 합성 요청을 받으면<br />
-&gt; <code class="language-plaintext highlighter-rouge">flask</code> 서버가 <code class="language-plaintext highlighter-rouge">celery</code>에게 task를 할당하고<br />
-&gt; <code class="language-plaintext highlighter-rouge">celery worker</code>가 task를 수행한다.<br />
-&gt; 여기서 task는 ‘입력받은 text를 지정된 멤버의 음성으로 wav 파일을 만들어 gcs에 업로드하는 것’이다.<br />
-&gt; task를 끝내면 <code class="language-plaintext highlighter-rouge">celery worker</code>가 <code class="language-plaintext highlighter-rouge">flask</code>에게 작업이 완료됨을 알려주고, <code class="language-plaintext highlighter-rouge">flask</code>는 클라이언트에게 알려준다.<br />
-&gt; 클라이언트는 <code class="language-plaintext highlighter-rouge">google cloud storage</code>에 업로드된 wav파일의 url을 통해서 생성된 음성파일을 재생한다.</p>

<p>이처럼, <code class="language-plaintext highlighter-rouge">flask</code> 서버는 ‘TTS 음성 합성과 연관된 작업’만을 수행하도록 구성하였는데,<br />
<code class="language-plaintext highlighter-rouge">flask</code> 프레임워크의 특징을 보면서 model server로 <code class="language-plaintext highlighter-rouge">flask</code>를 선택한 이유를 살펴보자!</p>

<h2 id="flask에-대하여">Flask에 대하여..</h2>
<p><img src="/assets/images/Team_ForV/6-2.png" alt="image" width="40%" height="40%" /><br />
flask는 마이크로 웹 프레임워크다.
즉 간결하게 유지하고 확장할 수 있음을 의미한다.</p>

<p>간결하다는 것은? -&gt; 짧은 코드만으로도 완벽히 동작하는 웹 프로그램을 만들 수 있다.<br />
확장성 있는 설계? -&gt; 플라스크에는 다양한 확장 모듈을 통해 입맛대로 만들 수 있다.</p>

<p>서버를 분리한 이유가 <strong>음성합성만을 하는 서버</strong>가 필요했기 때문이고, 이를 위해선<br />
<strong>간단한 코드 구성만으로도 빠르게 뜨는 웹 프로그램</strong>이 필요했다. 따라서 model 서버로는 <code class="language-plaintext highlighter-rouge">flask</code>가 적절하겠다고 판단했다.</p>

<h2 id="rabbitmq--celery를-사용한-비동기처리">rabbitMQ &amp; celery를 사용한 비동기처리</h2>
<p><code class="language-plaintext highlighter-rouge">python</code> 서버는 사용자의 요청이 수행되는 동안 또다른 요청이 들어올 시에 앞선 요청이 수행될 때까지 대기하고 있게 된다. 이는 다중 사용자가 서비스를 이용하기에 매우 안 좋은 환경이다.</p>

<p>따라서, <code class="language-plaintext highlighter-rouge">rabbitMQ</code>와 <code class="language-plaintext highlighter-rouge">celery</code>를 이용하여 비동기처리를 하도록 만들었다.</p>

<p>파일들을 하나씩 뜯어보며 살펴보자.</p>

<h3 id="--celery-app">- celery app</h3>
<p>celery app을 생성하고 세부 항목들을 설정한다.</p>
<ol>
  <li>Celery App의 이름.</li>
  <li>broker: 처리할 Task를 보관하는 Broker(중계자)</li>
  <li>backend: 처리된 결과를 보관하는 Broker를 설정, 이를 생략하면 Task의 실행 결과를 받을 수 없음.</li>
  <li>include: Worker가 처리할 Task를 지정.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># celery_app.py: Celery App을 생성하는 파일
</span><span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">Celery</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Celery</span><span class="p">(</span><span class="s">'celery'</span><span class="p">,</span>
             <span class="n">broker</span><span class="o">=</span><span class="s">'amqp://tts:tts123@rabbit/tts_host'</span><span class="p">,</span>
             <span class="n">backend</span><span class="o">=</span><span class="s">'rpc://'</span><span class="p">,</span>
             <span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s">'voice'</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="--task">- task</h3>
<p>총 세 부분으로 구성되어있다.</p>
<ol>
  <li>음성 합성을 위해 각 멤버들에 대한 변수들을 설정하여 models 리스트에 저장해둔다.</li>
  <li>celery app에 등록되어있는 task가 호출되면 전달된 인자들을 기반으로 wav 파일을 만들고,</li>
  <li>서버에 저장하는 것이 아닌 google-cloude-storage에 저장한 후 True를 반환한다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># voice.py: Worker의 Task가 담겨있는 파일
</span><span class="kn">from</span> <span class="nn">celery_app</span> <span class="kn">import</span> <span class="n">app</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">google.cloud</span> <span class="kn">import</span> <span class="n">storage</span>

<span class="kn">from</span> <span class="nn">tts_modules</span> <span class="kn">import</span> <span class="n">normalize_text</span>
<span class="kn">from</span> <span class="nn">TTS.TTS.utils.synthesizer</span> <span class="kn">import</span> <span class="n">Synthesizer</span>

<span class="c1">############################################################################################################
</span><span class="n">models</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># models =&gt; [[id1_syn, id1_symbol], [id2_syn, id2_symbol], [id3_syn, id3_symbol], ...]
</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">):</span>
    <span class="n">member</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'member </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> synthesizer start!!'</span><span class="p">)</span>
    <span class="c1"># set synthesizer
</span>    <span class="n">synthesizer</span> <span class="o">=</span> <span class="n">Synthesizer</span><span class="p">(</span>
        <span class="sa">f</span><span class="s">"./voice_model/glow-tts/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">g_checkpoint_30000.pth.tar"</span><span class="p">,</span>
        <span class="sa">f</span><span class="s">"./voice_model/glow-tts/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">g_config.json"</span><span class="p">,</span>
        <span class="bp">None</span><span class="p">,</span>
        <span class="sa">f</span><span class="s">"./voice_model/hifigan-v2/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">h_checkpoint_305000.pth.tar"</span><span class="p">,</span>
        <span class="sa">f</span><span class="s">"./voice_model/hifigan-v2/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">h_config.json"</span><span class="p">,</span>
        <span class="bp">None</span><span class="p">,</span>
        <span class="bp">None</span><span class="p">,</span>
        <span class="bp">False</span><span class="p">,)</span>
    <span class="n">symbol</span> <span class="o">=</span> <span class="n">synthesizer</span><span class="p">.</span><span class="n">tts_config</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">characters</span>  <span class="c1"># normalize_text가 호출될 때 필요한 변수
</span>    
    <span class="n">member</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">synthesizer</span><span class="p">)</span>
    <span class="n">member</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
    <span class="n">models</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">member</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'member </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> synthesizer end!!'</span><span class="p">)</span>

<span class="c1">############################################################################################################
</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">"GOOGLE_APPLICATION_CREDENTIALS"</span><span class="p">]</span><span class="o">=</span><span class="s">"./micro-handler.json"</span> <span class="c1"># wav gcp bucket 업로드를 위한 key path
</span>
<span class="n">bucket_name</span> <span class="o">=</span> <span class="s">'forv_bucket'</span>    <span class="c1"># 서비스 계정 생성한 bucket 이름 입력
</span><span class="n">storage_client</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">Client</span><span class="p">()</span>
<span class="n">bucket</span> <span class="o">=</span> <span class="n">storage_client</span><span class="p">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>

<span class="c1"># source_file_name = ''    # GCP에 업로드할 파일 절대경로
# destination_blob_name = ''    # 업로드할 파일을 GCP에 저장할 때의 이름
# blob = bucket.blob(destination_blob_name)
# blob.upload_from_filename(source_file_name)
</span>
<span class="c1">############################################################################################################
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">task</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"gan_wav"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">gan_wav</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">member_id</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">created_at</span><span class="p">):</span>
    <span class="n">wav_file</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'wav_files/</span><span class="si">{</span><span class="n">member_id</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">uuid</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">created_at</span><span class="si">}</span><span class="s">_voice.wav'</span>
    <span class="n">wav_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'./temp/</span><span class="si">{</span><span class="n">member_id</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">uuid</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">created_at</span><span class="si">}</span><span class="s">_voice.wav'</span>
    
    <span class="c1"># 미리 만들어둔 객체를 참조
</span>    <span class="n">synth</span> <span class="o">=</span> <span class="n">models</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">member_id</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">sym</span> <span class="o">=</span> <span class="n">models</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">member_id</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>

    <span class="c1"># g2pk 라이브러리를 이용한 입력된 텍스트 변환
</span>    <span class="n">n_text</span> <span class="o">=</span> <span class="n">normalize_text</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">sym</span><span class="p">)</span>
    
    <span class="n">wav</span> <span class="o">=</span> <span class="n">synth</span><span class="p">.</span><span class="n">tts</span><span class="p">(</span><span class="n">n_text</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="n">synth</span><span class="p">.</span><span class="n">save_wav</span><span class="p">(</span><span class="n">wav</span><span class="p">,</span> <span class="n">wav_path</span><span class="p">)</span>   <span class="c1"># change wav to .wav file
</span>    
    <span class="n">blob</span> <span class="o">=</span> <span class="n">bucket</span><span class="p">.</span><span class="n">blob</span><span class="p">(</span><span class="n">wav_file</span><span class="p">)</span>
    <span class="n">blob</span><span class="p">.</span><span class="n">upload_from_filename</span><span class="p">(</span><span class="n">wav_path</span><span class="p">)</span> <span class="c1"># upload wav file to gcp bucket
</span>
    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">wav_path</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">wav_path</span><span class="p">)</span>

    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<h3 id="--flask-app">- flask app</h3>
<p>특정 http 요청이 들어왔을 때 celery worker에게 작업을 수행하도록 만든다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app.py: Task를 실행시킬 파일
</span><span class="kn">import</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
<span class="kn">from</span> <span class="nn">flask_cors</span> <span class="kn">import</span> <span class="n">CORS</span>

<span class="kn">from</span> <span class="nn">voice</span> <span class="kn">import</span> <span class="n">gan_wav</span>   <span class="c1"># import celery task
</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">cors</span> <span class="o">=</span> <span class="n">CORS</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">resources</span><span class="o">=</span><span class="p">{</span><span class="sa">r</span><span class="s">"/*"</span><span class="p">:</span> <span class="p">{</span><span class="s">"origins"</span><span class="p">:</span> <span class="s">"*"</span><span class="p">}})</span>   <span class="c1"># react와 연결을 위한 cors 설정
</span>

<span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="p">{</span><span class="s">'result'</span><span class="p">:</span> <span class="s">'hello world!'</span><span class="p">}</span>

<span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/api/texts'</span><span class="p">,</span> <span class="n">methods</span> <span class="o">=</span> <span class="p">[</span><span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_text</span><span class="p">():</span>
    <span class="s">'''
    {
    "uuid": "022db29c-d0e2-11e5-bb4c-60f81dca7676",
    "member_id": 1,
    "text": "안녕하세요!",
    "created_at": "2022-08-22"
    }
    '''</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">params</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">get_json</span><span class="p">()</span>
        
        <span class="n">uuid</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">'uuid'</span><span class="p">]</span>
        <span class="n">member_id</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">'member_id'</span><span class="p">]</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">'text'</span><span class="p">]</span>
        <span class="n">created_at</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">'created_at'</span><span class="p">]</span>
        
        <span class="n">gan_wav</span> <span class="o">=</span> <span class="n">gan_wav</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">member_id</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">created_at</span><span class="p">)</span> <span class="c1"># celery task에 인자 전달
</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span> <span class="c1"># celery worker가 task를 완료하기를 기다림
</span>            <span class="k">if</span> <span class="n">gan_wav</span><span class="p">.</span><span class="n">ready</span><span class="p">()</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
                <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">{</span><span class="s">'uuid'</span><span class="p">:</span> <span class="n">uuid</span><span class="p">,</span> <span class="s">'member_id'</span><span class="p">:</span> <span class="n">member_id</span><span class="p">,</span> <span class="s">'created_at'</span><span class="p">:</span> <span class="n">created_at</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>음성 합성에 필요한 핵심적인 부분은 tts와 g2pk라는 라이브러리이다.<br />
이 라이브러리를 사용할 때 가장 곤란했던 점이 <strong>‘라이브러리들끼리의 의존성’</strong> 문제였다.<br />
ai 관련 라이브러리들을 서로 의존성이 강하기 때문에 버전이 하나만 틀어져도 실행이 안 되는 경우가 많았고, 
이로 인해 <code class="language-plaintext highlighter-rouge">django</code>서버와 <code class="language-plaintext highlighter-rouge">flask</code>서버의 python 버전을 다르게 구성을 해야했다.</p>

<p>결론부터 말하자면 이 문제를 해결하기위해 <code class="language-plaintext highlighter-rouge">Docker</code>를 도입했다.<br />
다음 게시글에서는 이 프로젝트에 쓰인 ai 관련 라이브러리들과 <code class="language-plaintext highlighter-rouge">Docker</code> 세팅에 대해 알아보자.</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://leffept.tistory.com/202">https://leffept.tistory.com/202</a> [Flask 란?]<br />
2) <a href="https://heodolf.tistory.com/63">https://heodolf.tistory.com/63</a> [Celery 무작정 시작하기 (2) - Task]<br />
3) <a href="https://buildabetterworld.tistory.com/144?category=874656">https://buildabetterworld.tistory.com/144?category=874656</a><br />
[Celery Side-Project(Ant Platform) - 3. Flask에서 Celery로 비동기작업 수행하기(프로젝트 구조+Celery동작)]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="python" /><category term="flask" /><category term="rabbitMQ" /><category term="celery" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] Django API Server</title><link href="http://localhost:4000/team_forv/Team_ForV05/" rel="alternate" type="text/html" title="[Team_ForV] Django API Server" /><published>2022-08-18T00:00:00+09:00</published><updated>2022-08-19T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV05</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV05/"><![CDATA[<h2 id="django-api-server의-역할">Django API Server의 역할</h2>
<p><img src="/assets/images/Team_ForV/5-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
<code class="language-plaintext highlighter-rouge">Django API Server</code>의 경우 총 3가지의 역할을 하고 있다.</p>
<ol>
  <li>서버가 올라갈 시 <code class="language-plaintext highlighter-rouge">google-cloud-storage</code>로부터 필요한 ai모델파일들을 서버로 불러온다.</li>
  <li>사용자 정보 페이지 요청 시 db를 조회하여 필요한 정보(멤버들의 TMI 정보, 사진 정보 등등)들을 클라이언트에 제공해준다.</li>
  <li>클라이언트로부터 오는 text 요청(특정 목소리로 읽어주었으면 하는 문장)을 db에 저장해둔다.</li>
</ol>

<p>이처럼, <code class="language-plaintext highlighter-rouge">django</code> 서버는 <code class="language-plaintext highlighter-rouge">mysql</code> db와 연관된 작업을 많이 수행하도록 구성하였는데, 이는 <code class="language-plaintext highlighter-rouge">django</code>의 뛰어난 자체 <code class="language-plaintext highlighter-rouge">ORM</code> 때문이라고 볼 수 있다.</p>

<h2 id="orm이란">ORM이란?</h2>
<p><code class="language-plaintext highlighter-rouge">ORM</code>은 Object-Relation Mapping의 준말로, 객체(Object)와 관계형 데이터베이스(Relational)을 연결(Mapping)해주는 것을 말한다. <br />
이를 통해 개발자는 데이터베이스의 테이블에 <code class="language-plaintext highlighter-rouge">CRUD</code>(Create, Read, Update, Delete)를 할 때, SQL 쿼리를 사용하지 않고도, 가능하게 된다. <br />
<code class="language-plaintext highlighter-rouge">django</code>는 이 <code class="language-plaintext highlighter-rouge">ORM</code>을 내장하고 있어, 데이터베이스에 간편하게 접근할 수 있다.</p>

<p><img src="/assets/images/Team_ForV/5-2.png" alt="image" width="80%" height="80%" /><br />
위의 테이블들은 이 프로젝트에 쓰인 테이블이다.(로그인 기능을 안 넣었더니 확실히 초라하다..ㅎㅎ)</p>

<p>그렇다면, 이 프로젝트에서 어떤식으로 사용했는지 알아보자.</p>

<h2 id="model-serializer-view">Model, Serializer, View</h2>
<p><img src="/assets/images/Team_ForV/5-3.png" alt="image" width="40%" height="40%" /><br />
django REST framework(DRF)로 RESTful한 API를 쉽게 만들 수 있다. <br />
<br /></p>

<p>1st. 먼저 model.py를 작성한다.<br />
직접 CREATE TABLE 쿼리문을 통해 만드는 것이 아닌, ORM을 통해 class 인스턴스와 db 테이블을 매핑시킨다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">Member</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span> <span class="c1"># 팀원들에 대한 정보
</span>    <span class="nb">id</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">AutoField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># primary key
</span>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>   <span class="c1"># 이름
</span>    <span class="n">birth</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="c1"># 생년월일
</span>    <span class="n">tmi</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>  <span class="c1"># 팀원들의 TMI 정보들
</span>    <span class="n">position</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span> <span class="c1"># 팀원 각자의 역할
</span>    <span class="n">github_link</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>  <span class="c1"># 팀원 본인의 깃허브 링크(sns 계정의 일종)
</span>    <span class="n">image_link</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>   <span class="c1"># 팀원 본인의 프로필 사진(gcs에 저장해두고 url을 저장)
</span>    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">)</span> <span class="c1"># 해당 레코드 생성시 현재 시간 자동저장
</span>    <span class="n">updated_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># 해당 레코드 갱신시 현재 시간 자동저장
</span>    
<span class="k">class</span> <span class="nc">ModelLink</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>  <span class="c1"># 음성 합성에 필요한 멤버 개개인의 모델 파일 정보(glow-tts, hifi-gan)
</span>    <span class="nb">id</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">Member</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">,</span> <span class="n">db_column</span><span class="o">=</span><span class="s">"id"</span><span class="p">)</span>
    <span class="n">glow_config</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">glow_pth</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">glow_scale_stats</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">hifi_config</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">hifi_pth</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">hifi_scale_stats</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">)</span> <span class="c1"># 해당 레코드 생성시 현재 시간 자동저장
</span>    <span class="n">updated_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># 해당 레코드 갱신시 현재 시간 자동저장
</span>
<span class="k">class</span> <span class="nc">Text</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>   <span class="c1"># 사용자들의 문장요구를 db에 저장해두어 추후에 활용하기 위함
</span>    <span class="n">member_id</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Member</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">,</span> <span class="n">db_column</span><span class="o">=</span><span class="s">"member_id"</span><span class="p">)</span>
    <span class="n">uuid</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span> <span class="c1"># 로그인 대신 uuid를 사용
</span>    <span class="n">text</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span> <span class="c1"># 사용자가 요청한 문장
</span>    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>   <span class="c1"># 레코드 갱신 시점이 아닌 uuid 생성 시점을 기준으로 삼기 때문에 react에서 값을 가져와 저장함
</span>    <span class="n">updated_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># 해당 레코드 갱신시 현재 시간 자동저장
</span></code></pre></div></div>

<p><br />
2nd. serializer.py를 작성한다.<br />
Serializer는 DRF가 제공하는 클래스인데, DB 인스턴스를 JSON 데이터로 생성한다. <br />
이렇게 JSON 포맷으로 직렬화된 문자열은 views에서 클라이언트로 넘겨주게 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Member</span><span class="p">,</span> <span class="n">ModelLink</span><span class="p">,</span> <span class="n">Text</span>

<span class="k">class</span> <span class="nc">MemberSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>
        
<span class="k">class</span> <span class="nc">ModelSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">ModelLink</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>

<span class="k">class</span> <span class="nc">TextSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Text</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>
</code></pre></div></div>

<p><br />
3rd. views.py를 작성한다.<br />
django에서는 view를 통해서 HTTP 요청을 처리한다. <br />
FBV(함수기반뷰), CBV(클래스기반뷰)를 통해서도 API를 만들 수 있지만, <br />
DRF는 <code class="language-plaintext highlighter-rouge">apiview</code>, <code class="language-plaintext highlighter-rouge">mixins</code>, <code class="language-plaintext highlighter-rouge">viewset</code> 등을 제공한다.</p>

<p>각 request method마다 직접 serializer 처리를 해주어야 한다거나, <br />
공통된 queryset과 serializer_class가 반복되는 등의 문제를 해결하기 위해 <br />
<code class="language-plaintext highlighter-rouge">viewset</code>을 사용하여 구현했다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">.serializers</span> <span class="kn">import</span> <span class="n">MemberSerializer</span><span class="p">,</span> <span class="n">ModelSerializer</span><span class="p">,</span> <span class="n">TextSerializer</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Member</span><span class="p">,</span> <span class="n">ModelLink</span><span class="p">,</span> <span class="n">Text</span>
<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">viewsets</span>

<span class="c1"># ViewSet : Post, Get, Put, Delete 기본기능 내장
</span><span class="k">class</span> <span class="nc">MemberViewSet</span><span class="p">(</span><span class="n">viewsets</span><span class="p">.</span><span class="n">ModelViewSet</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Member</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>  
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">MemberSerializer</span>  

<span class="k">class</span> <span class="nc">ModelLinkViewSet</span><span class="p">(</span><span class="n">viewsets</span><span class="p">.</span><span class="n">ModelViewSet</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">ModelLink</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>  
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">ModelSerializer</span>

<span class="k">class</span> <span class="nc">TextViewSet</span><span class="p">(</span><span class="n">viewsets</span><span class="p">.</span><span class="n">ModelViewSet</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Text</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>  
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">TextSerializer</span>
</code></pre></div></div>

<p><br />
4th. url.py를 작성한다.<br />
이렇게 작성한 <code class="language-plaintext highlighter-rouge">viewset</code>을 가지고 url 링크에 매핑해주면, 클라이언트에서 다양한 요청이 들어올 시 처리할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.views</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">routers</span>
<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">permissions</span>

<span class="n">router</span> <span class="o">=</span> <span class="n">routers</span><span class="p">.</span><span class="n">DefaultRouter</span><span class="p">()</span>
<span class="n">router</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="sa">r</span><span class="s">'api/members'</span><span class="p">,</span> <span class="n">MemberViewSet</span><span class="p">)</span>
<span class="n">router</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="sa">r</span><span class="s">'api/modellinks'</span><span class="p">,</span> <span class="n">ModelLinkViewSet</span><span class="p">)</span>
<span class="n">router</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="sa">r</span><span class="s">'api/texts'</span><span class="p">,</span> <span class="n">TextViewSet</span><span class="p">)</span>
</code></pre></div></div>

<p>자, 이렇게 <code class="language-plaintext highlighter-rouge">DRF</code>와 <code class="language-plaintext highlighter-rouge">ORM</code>을 통해 db 테이블의 구성과 api 세팅을 마쳤다면 django와 mysql과 연동하여 실제로 사용이 가능하도록 만들면 된다.</p>

<h2 id="django와-mysql-연동하기">django와 mysql 연동하기</h2>
<p>django는 기본적으로 <code class="language-plaintext highlighter-rouge">sqlite3</code>를 사용한다. 하지만 이 프로젝트에서는 <code class="language-plaintext highlighter-rouge">mysql</code>를 사용할 것이므로, <code class="language-plaintext highlighter-rouge">django</code>와 <code class="language-plaintext highlighter-rouge">mysql</code>을 연동해주어야 한다. 방법은 간단하다!</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">mysqlclient</code>나 <code class="language-plaintext highlighter-rouge">pymysql</code>같은 라이브러리를 pip을 통해 설치하고</li>
  <li>my_settings.py에 다음과 같은 설정을 작성해주고,
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MY_DATABASES</span> <span class="o">=</span> <span class="p">{</span>
 <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span> 
 	<span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.mysql'</span><span class="p">,</span> <span class="c1"># 사용할 엔진 설정
</span>     <span class="s">'NAME'</span><span class="p">:</span> <span class="s">'tts'</span><span class="p">,</span>  <span class="c1"># 연동할 mysql의 데이터베이스 이름
</span>     <span class="s">'USER'</span><span class="p">:</span> <span class="s">'root'</span><span class="p">,</span>     <span class="c1"># db 접속 계정명
</span>     <span class="s">'PASSWORD'</span><span class="p">:</span> <span class="s">'1234'</span><span class="p">,</span>     <span class="c1"># 해당 db 접속 계정 비밀번호
</span>     <span class="s">'HOST'</span><span class="p">:</span> <span class="s">'ttsmysql'</span><span class="p">,</span>     <span class="c1"># 실제 db 주소
</span>     <span class="s">'PORT'</span><span class="p">:</span> <span class="s">'3306'</span><span class="p">,</span>     <span class="c1"># 포트 번호
</span>  <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>settings.py에 해당 설정을 import하여 적용시키면 된다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">from</span> <span class="nn">.my_settings</span> <span class="kn">import</span> <span class="n">MY_DATABASES</span>

 <span class="n">DATABASES</span> <span class="o">=</span> <span class="n">MY_DATABASES</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>지금까지 <code class="language-plaintext highlighter-rouge">django</code> api server에 대하여 정리해보았다. <br />
다음 포스팅에서는 <code class="language-plaintext highlighter-rouge">flask</code>로 만든 model 서버에 대해 정리해보도록 하자.</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://ssungkang.tistory.com/entry/Django-django-rest-framework-%EB%A5%BC-%EC%9C%84%ED%95%9C-JSON-%EC%A7%81%EB%A0%AC%ED%99%94?category=320582">https://ssungkang.tistory.com/entry/Django-django-rest-framework-%EB%A5%BC-%EC%9C%84%ED%95%9C-JSON-%EC%A7%81%EB%A0%AC%ED%99%94?category=320582</a><br />
[django rest framework 를 위한 JSON 직렬화]<br />
2) <a href="https://wikidocs.net/book/4223">https://wikidocs.net/book/4223</a> [점프 투 장고]<br />
3) <a href="https://ssungkang.tistory.com/entry/Django-APIView-Mixins-generics-APIView-ViewSet%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90">https://ssungkang.tistory.com/entry/Django-APIView-Mixins-generics-APIView-ViewSet%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90</a><br />
[APIView, Mixins, generics APIView, ViewSet을 알아보자]<br />
4) <a href="https://velog.io/@devmin/Django-MySQL-Connect">https://velog.io/@devmin/Django-MySQL-Connect</a> [Django와 MySQL 연결하기]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="python" /><category term="django" /><category term="mysql" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] 아키텍처 및 기술스택 소개</title><link href="http://localhost:4000/team_forv/Team_ForV03/" rel="alternate" type="text/html" title="[Team_ForV] 아키텍처 및 기술스택 소개" /><published>2022-08-17T00:00:00+09:00</published><updated>2022-08-17T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV03</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV03/"><![CDATA[<h2 id="아키텍처-소개">아키텍처 소개</h2>
<p><img width="921" alt="스크린샷 2022-08-03 오후 8 56 10" src="https://user-images.githubusercontent.com/70627982/182602386-c5919ba2-ac66-43a0-86c2-ed7f12c6d3f2.png" /><br /></p>

<ul>
  <li>
    <p><b>Front-End</b><br />
<img src="https://img.shields.io/badge/react-02569B?style=for-the-badge&amp;logo=react&amp;logoColor=white" /> <img src="https://img.shields.io/badge/javascript-F7DF1E?style=for-the-badge&amp;logo=javascript&amp;logoColor=black" /></p>
  </li>
  <li>
    <p><b>Back-End</b><br />
<img src="https://img.shields.io/badge/django-007396?style=for-the-badge&amp;logo=django&amp;logoColor=white" /> <img src="https://img.shields.io/badge/flask-6DB33F?style=for-the-badge&amp;logo=flask&amp;logoColor=white" /> <img src="https://img.shields.io/badge/python-3776AB?style=for-the-badge&amp;logo=python&amp;logoColor=white" /> <img src="https://img.shields.io/badge/mysql-4479A1?style=for-the-badge&amp;logo=mysql&amp;logoColor=white" /> <img src="https://img.shields.io/badge/celery-000000?style=for-the-badge&amp;logo=celery&amp;logoColor=white" /> <img src="https://img.shields.io/badge/rabbitmq-FF6F00?style=for-the-badge&amp;logo=rabbitmq&amp;logoColor=white" /> <img src="https://img.shields.io/badge/gunicorn-499848?style=for-the-badge&amp;logo=gunicorn&amp;logoColor=black" /></p>
  </li>
  <li>
    <p><b>DevOps</b>  <br />
<img src="https://img.shields.io/badge/docker-2496ED?style=for-the-badge&amp;logo=docker&amp;logoColor=white" /> <img src="https://img.shields.io/badge/NGINX-009639?style=for-the-badge&amp;logo=nginx&amp;logoColor=black" /> <!-- <img src="https://img.shields.io/badge/aws-232F3E?style=for-the-badge&logo=amazonaws&logoColor=white"> --></p>
  </li>
  <li>
    <p><b>AI (Tools, Env)</b>  <br />
<img src="https://img.shields.io/badge/colab-F9AB00?style=for-the-badge&amp;logo=googlecolab&amp;logoColor=white" /> <img src="https://img.shields.io/badge/pytorch-F7931E?style=for-the-badge&amp;logo=pytorch&amp;logoColor=white" /></p>
  </li>
  <li>
    <p><b>UI/UX, MockUp Design </b>  <br />
<img src="https://img.shields.io/badge/figma-34A7C1?style=for-the-badge&amp;logo=figma&amp;logoColor=white" /> <img src="https://img.shields.io/badge/zeplin-31A8FF?style=for-the-badge&amp;logo=zeplin&amp;logoColor=white" /></p>
  </li>
  <li>
    <p><b>Team Collaboration Tool</b>  <br />
<img src="https://img.shields.io/badge/github-181717?style=for-the-badge&amp;logo=github&amp;logoColor=white" /> <img src="https://img.shields.io/badge/notion-0052CC?style=for-the-badge&amp;logo=notion&amp;logoColor=white" /> <img src="https://img.shields.io/badge/slack-D24939?style=for-the-badge&amp;logo=slack&amp;logoColor=white" /> <img src="https://img.shields.io/badge/zoom-2496ED?style=for-the-badge&amp;logo=zoom&amp;logoColor=white" /></p>
  </li>
</ul>

<h2 id="프로젝트의-흐름">프로젝트의 흐름</h2>
<p>이 프로젝트의 기본 흐름은 이러하다.</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">react</code>(클라이언트)로부터 사용자의 요청이 들어오면,</li>
  <li><code class="language-plaintext highlighter-rouge">nginx</code>(proxy 서버)가 클라이언트와 서버 사이에서 대리로 통신을 수행해준다.</li>
  <li><code class="language-plaintext highlighter-rouge">django</code>나 <code class="language-plaintext highlighter-rouge">flask</code>는 python으로 쓰여진 web application이기 때문에 <code class="language-plaintext highlighter-rouge">gunicorn</code>과 같은 wsgi 서버를 통해 forwarding해주게 되고,</li>
  <li>사용자의 요청에 따라
    <ul>
      <li>단순한 페이지 조회 요청이 들어오면 <code class="language-plaintext highlighter-rouge">django</code> api 서버로 연결되어 필요한 정보들을 <code class="language-plaintext highlighter-rouge">mysql</code> 데이터베이스에서 조회해 보여주고,</li>
      <li>음성 합성 요청이 들어오게 되면 <code class="language-plaintext highlighter-rouge">flask</code> model 서버가 필요한 모델 파일들로 음성 파일을 합성하여 <code class="language-plaintext highlighter-rouge">google cloud storage</code>로 올린다.</li>
    </ul>
  </li>
  <li>앞선 백엔드단의 작업이 완료되면, client는 원하는 멤버의 프로필 정보를 확인하거나, 원하는 문장을 원하는 멤버의 목소리로 들어볼 수 있게 된다.</li>
  <li>마지막으로, 개발환경의 통합과 신속한 배포를 위해 <code class="language-plaintext highlighter-rouge">docker</code>로 컨테이너화하여 개발을 진행하였다.</li>
</ol>

<p>이 일련의 과정들을 수행함에 있어서, 사용자의 요청이 많은 상황에 대비하여 몇몇 ‘장치’들을 추가했는데…</p>

<h2 id="서버의-분리와-비동기처리">서버의 분리와 비동기처리</h2>
<ul>
  <li>
    <h3 id="서버의-분리">서버의 분리</h3>
    <p><img src="/assets/images/Team_ForV/3-1.png" alt="image" width="50%" height="50%" /><br /></p>
  </li>
</ul>

<p>아키텍처에서 볼 수 있듯이, 기능별로 서버를 분리했다. <br />
이렇게 서버를 분리하여 운영할 시 model 서버가 다운되도 api 서버는 동작하듯이, 한 기능을 못 쓰게 되더라도 전체 서비스가 죽는 것은 방지할 수 있다.<br /></p>

<p><code class="language-plaintext highlighter-rouge">django</code>는 자체 ORM을 내장하여 다양한 데이터베이스에 유연하게 액세스할 수 있다. <br />
따라서, 데이터베이스와 연결되는 모든 작업들은 <code class="language-plaintext highlighter-rouge">django</code>가 api server로써 동작하도록 만들었고, <br />
<code class="language-plaintext highlighter-rouge">flask</code>는 비교적 가벼워서 음성 합성 작업만 전담하는 model sever로 선택했다.</p>

<ul>
  <li>
    <h3 id="message-queue와-worker를-이용한-비동기처리">Message Queue와 Worker를 이용한 비동기처리</h3>
    <p><img src="/assets/images/Team_ForV/3-2.png" alt="image" width="50%" height="50%" /><br /></p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">python</code> 서버는 사용자의 요청이 수행되는 동안 또다른 요청이 들어올 시에 앞선 요청이 수행될 때까지 대기하고 있게 된다. 이는 다중 사용자가 서비스를 이용하기에 매우 안 좋은 환경이다.</p>

<p>따라서, <code class="language-plaintext highlighter-rouge">rabbitMQ</code>와 <code class="language-plaintext highlighter-rouge">celery</code>를 이용하여 비동기처리를 하도록 만들었다. <br />
사용자의 요청을 task화하여 <code class="language-plaintext highlighter-rouge">celery</code>에게 전달하고, <br />
<code class="language-plaintext highlighter-rouge">celery</code> worker가 그 작업을 비동기적으로 수행하게끔하여, 서버가 여러가지 일을 수행할 수 있도록하였다!</p>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>단순히 Frontend와 Backend를 넘어 Proxy Server, WSGI, Bucket, Docker, AWS … 등등 많은 기술들이 등장했다. <br />
앞으로의 글에서는 앞서 언급한 기술들에 대해 하나씩 정리하고자 한다.</p>

<p>먼저, <code class="language-plaintext highlighter-rouge">python</code> 기반의 Backend framework에서의 work flow를 살펴보자!</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="Info" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] Python Web Framework</title><link href="http://localhost:4000/team_forv/Team_ForV04/" rel="alternate" type="text/html" title="[Team_ForV] Python Web Framework" /><published>2022-08-17T00:00:00+09:00</published><updated>2022-08-17T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV04</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV04/"><![CDATA[<h2 id="아키텍처를-보며">아키텍처를 보며..</h2>
<p><img src="/assets/images/Team_ForV/1-a.png" alt="image" width="120%" height="120%" /></p>

<p><code class="language-plaintext highlighter-rouge">python</code>으로 웹 application을 만들 때<br />
-&gt; 기본적으로 socket을 제공하니까 개 노가다 하면 만들 수야 있겠지만 의미도 없고..<br />
-&gt; 따라서, <code class="language-plaintext highlighter-rouge">python</code>을 이용하여 <code class="language-plaintext highlighter-rouge">WSGI</code> 라는 인터페이스를 만들어 사용하고 있다.<br /></p>

<h2 id="wsgi가-뭔데">WSGI가 뭔데?</h2>
<p><img src="/assets/images/Team_ForV/1-b.png" alt="image" width="50%" height="50%" />
<img src="/assets/images/Team_ForV/1-c.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">WSGI</code>는 ‘Web Server GateWay Interface’의 약자로 web server로 들어오는 request를 python으로 쓰여진 web application으로 forwarding 해주는 interface를 말한다.<br />
예시) <code class="language-plaintext highlighter-rouge">gunicorn</code>, <code class="language-plaintext highlighter-rouge">uwsgi</code> 등등이 있음</p>

<dl>
  <dt>Q) 근데, flask, django 사용했을 때 gunicorn 같은 거 없이도 web server 잘 돌아가던데?<br /></dt>
  <dd>사실은 프레임워크 안에 자체적으로 WSGI가 내장되어 있어서 잘 돌아갔던 것..</dd>
</dl>

<p>web application을 만들기 위해선 <code class="language-plaintext highlighter-rouge">flask</code>나 <code class="language-plaintext highlighter-rouge">django</code>가 제공해주는 <code class="language-plaintext highlighter-rouge">template</code>나 <code class="language-plaintext highlighter-rouge">view</code>를 가지고 <code class="language-plaintext highlighter-rouge">python</code>으로 웹 서버를 만드는 것인데..(결국 <code class="language-plaintext highlighter-rouge">flask</code>나 <code class="language-plaintext highlighter-rouge">django</code>는 프레임워크에 불과하다는 소리!)<br />
-&gt; 실제로 deploy까지 하게 되면 <code class="language-plaintext highlighter-rouge">WSGI</code>라는 인터페이스가 있고, 그런 인터페이스의 제공을 위해 <code class="language-plaintext highlighter-rouge">gunicorn</code> 등을 이용하는 것이다.<br />
-&gt; 다만, python web server는 보안 및 퍼포먼스의 문제가 있어 전문적 web server를 <code class="language-plaintext highlighter-rouge">proxy server</code>로 두는데..<br /></p>

<h2 id="proxy-server는-무엇이냐">Proxy Server는 무엇이냐</h2>
<p><img src="/assets/images/Team_ForV/1-d.png" alt="image" width="50%" height="50%" />
<img src="/assets/images/Team_ForV/1-e.jpeg" alt="image" width="40%" height="50%" /></p>

<p><code class="language-plaintext highlighter-rouge">Proxy</code>: 서버와 클라이언트 사이에서 대리로 통신을 수행해주는 것<br />
즉, Client가 자신을 거쳐 다른 네트워크에 접속할 수 있도록 중간에서 대리해주는 서버를 말한다.<br />
사용자가 많거나, performance, security를 고려하여 전문적 server를 두는 것이다.<br /></p>

<h2 id="아키텍처를-보며-다시-정리해보자">아키텍처를 보며 다시 정리해보자!</h2>
<p><img src="/assets/images/Team_ForV/1-a.png" alt="image" width="120%" height="120%" /></p>

<ol>
  <li>웹 브라우저의 동작방식<br />
사용자가 서비스를 이용하려면 웹 브라우저에 URL을 입력하는데, 이 때 웹 브라우저가 URL을 사용해서 서버에 요청하는 페이지는 크게 2가지 종류가 있다.
    <ul>
      <li>정적 페이지 요청<br />
   예를 들어 <code class="language-plaintext highlighter-rouge">http://3.37.58.70:5000/static/hello.css</code>라는 URL 접속 요청이 들어오면, 서비스는 <code class="language-plaintext highlighter-rouge">static/hello.css</code>라는 파일을 찾아서 웹 브라우저로 보내주는 것이다. .js, .jpg, .png 등등의 파일은 변하지 않는 성질 때문에 ‘정적 파일’이라고 하며, 웹 브라우저에서 이런 정적 파일을 요청하는 행위를 ‘정적 페이지 요청’이라 한다.</li>
      <li>동적 페이지 요청<br />
   서버의 데이터베이스에 어떤 내용이 있는지에 따라 수시로 변하는 파일들이 있다. 웹 브라우저의 이러한 요청을 ‘동적 페이지 요청’이라고 한다. 이러한 동적 요청은 정적 요청과는 달리 조금 복잡한 과정을 거쳐 응답한다.</li>
    </ul>
  </li>
  <li>
    <p>동적 페이지 요청의 처리를 위해 웹 서버와 WSGI 서버가 필요하다!<br />
웹 서버에 동적 페이지 요청이 들어오면 파이썬 프로그램을 호출해야 한다<br />
-&gt; 대부분의 웹 서버는 어떻게 파이썬 프로그램을 호출해야 하는지 모르기 때문에 파이썬 프로그램을 호출하지 못한다.<br />
-&gt; 이런 경우에 파이썬 프로그램을 호출하는 WSGI 서버가 필요한 것이다.<br /></p>

    <p>즉, 동적 페이지 요청의 과정은<br />
웹 서버가 WSGI 서버 호출 -&gt; WSGI 서버가 파이썬 프로그램을 호출<br /></p>
  </li>
  <li>
    <p>WSGI 서버의 동작 원리를 구체적으로 보자<br />
<code class="language-plaintext highlighter-rouge">웹 서버</code>로 들어온 동적 페이지 요청 -&gt; <code class="language-plaintext highlighter-rouge">WSGI 서버</code>를 호출 -&gt; <code class="language-plaintext highlighter-rouge">WSGI 어플리케이션</code> 호출 -&gt; 동적 요청 처리<br /></p>

    <p>즉, 동적 페이지 요청은 결국 <code class="language-plaintext highlighter-rouge">WSGI 애플리케이션</code>이 처리하는 것이고, 이런 <code class="language-plaintext highlighter-rouge">WSGI 애플리케이션</code>에는 <code class="language-plaintext highlighter-rouge">django</code>, <code class="language-plaintext highlighter-rouge">flask</code>, <code class="language-plaintext highlighter-rouge">fast api</code> 등이 있는 것이다!<br /></p>

    <p><img src="/assets/images/Team_ForV/1-g.png" alt="image" width="50%" height="50%" /></p>

    <p>++ <code class="language-plaintext highlighter-rouge">WSGI 서버</code>는 <code class="language-plaintext highlighter-rouge">웹 서버</code>와 <code class="language-plaintext highlighter-rouge">WSGI 애플리케이션</code> 중간에 위치해서 <code class="language-plaintext highlighter-rouge">WSGI 미들웨어</code>, <code class="language-plaintext highlighter-rouge">WSGI 컨테이너</code> 라고도 한다.</p>
  </li>
</ol>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>python을 이용한 백엔드 framework의 work flow에 대해 살펴보았다. <br />
다음에는 본격적으로 이 프로젝트에 쓰인 두 가지 서버에 대하여 정리해보는 시간을 갖도록 하자. <br />
먼저 <code class="language-plaintext highlighter-rouge">django</code>로 쓰인 api server에 대해 살펴보자.</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://liveyourit.tistory.com/251">https://liveyourit.tistory.com/251</a> [프록시 서버란?]<br />
2) <a href="https://wikidocs.net/81076">https://wikidocs.net/81076</a> [점프 투 플라스크]<br />
3) <a href="https://www.youtube.com/watch?v=5rjhJRyu8s8&amp;t=0s">https://www.youtube.com/watch?v=5rjhJRyu8s8&amp;t=0s</a> [django, flask 배포 스택 구성]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="python" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry></feed>