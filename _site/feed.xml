<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-08-28T19:50:49+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[Team_ForV] AI models</title><link href="http://localhost:4000/team_forv/Team_ForV08/" rel="alternate" type="text/html" title="[Team_ForV] AI models" /><published>2022-08-26T00:00:00+09:00</published><updated>2022-08-28T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV08</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV08/"><![CDATA[<p>##</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="AI" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] Docker Setting</title><link href="http://localhost:4000/team_forv/Team_ForV07/" rel="alternate" type="text/html" title="[Team_ForV] Docker Setting" /><published>2022-08-25T00:00:00+09:00</published><updated>2022-08-26T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV07</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV07/"><![CDATA[<h2 id="문제상황-발생">문제상황 발생!</h2>
<p><img src="/assets/images/Team_ForV/7-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
음성파일 합성을 위해선 TTS 라는 라이브러리와 g2pk라는 라이브러리가 필요하다.</p>

<p>g2pk는 영어가 입력되었을 시 보이는 것처럼 한국어 발음에 맞춰서 변환해주고,<br />
-&gt; 최종적으로 변환된 문장을 TTS라이브러리를 통해 음성으로 만들어준다.</p>

<p>그래, 여기까지는 그렇다 치는데 이 라이브러리들을 사용하는데에 2가지 문제가 있었다.</p>

<ol>
  <li>위 라이브러리들은 3.6 ~ 3.7 사이의 파이썬 버전을 요구했다. 하지만 API Server가 이미 먼저 만들어진 상태였고, API Server는 최신 버전의 파이썬을 사용중이었기 때문에 버전이 맞지 않았다.</li>
  <li>결정적으로 g2pk 라이브러리를 사용하기 위해 설치되는 서브 모듈 중 ‘mecab’이라는 라이브러리가 당최 가상환경에서 설치되지를 않았다(아마 M1 환경에서 제대로 설치가 되지 않는 것 같다). 구글링해보니 이미 악명 높은 라이브러리인 것 같더라..</li>
</ol>

<h2 id="docker를-이용하여-문제를-해결해보자">Docker를 이용하여 문제를 해결해보자!!</h2>
<p><img src="/assets/images/Team_ForV/7-2.png" alt="image" width="70%" height="70%" /><br /></p>

<p>Docker는 ‘컨테이너 기반의 오픈소스 가상화 플랫폼’이다.</p>

<p>여기에서 말하는 ‘컨테이너’는 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다.<br />
백엔드 프로그램, 데이터베이스 서버, 메시지 큐등 어떤 프로그램도 컨테이너로 추상화할 수 있고 AWS, Azure, Google cloud등 어디에서든 실행할 수 있다.</p>

<p>Docker의 컨테이너 개념을 이용해서 필요한 각각의 실행환경들을 컨테이너로 분리하여 Docker 위에서 돌아가도록 구성하게 되었다.<br />
이렇게 구성할 경우, model server와 api server의 실행환경이 다르더라도 하나의 서버에 여러개의 컨테이너를 실행하면서 서로 영향을 미치지 않고 독립적으로 실행되어 마치 가벼운 Virtual Machine을 사용하는 느낌을 줄 수 있다.</p>

<h2 id="docker-composeyml--dockerfile">docker-compose.yml &amp; DockerFile</h2>
<h3 id="--docker-composeyml">- docker-compose.yml</h3>
<p>frontend(react), api server(django), model server(flask), mysql, rabbitMQ, celery<br />
이렇게 총 6개의 컨테이너를 구성했다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># docker-compose.yml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">frontend</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./frontend</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">npm"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">start"</span> <span class="pi">]</span> 
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">3000:3000</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./frontend/:/frontend</span>
      <span class="pi">-</span> <span class="s">./frontend/node_modules/:/frontend/node_modules</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">CI=true</span>
      <span class="pi">-</span> <span class="s">CHOKIDAR_USEPOLLING=true</span>
      <span class="pi">-</span> <span class="s">REACT_APP_BACKEND_URL=http://localhost:5000</span>
    <span class="na">tty</span><span class="pi">:</span> <span class="no">true</span>
  
  <span class="na">apiserver</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./backend/apiserver</span>
      <span class="na">args</span><span class="pi">:</span>
        <span class="na">DJANGO_ALLOWED_HOSTS</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
        <span class="na">DJANGO_SECRET_KEY</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
        <span class="na">DJANGO_CORS_ORIGIN_WHITELIST</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">sh -c "/wait &amp;&amp; python ./apiserver/manage.py makemigrations &amp;&amp; python ./apiserver/manage.py makemigrations mainApp &amp;&amp; python ./apiserver/manage.py migrate &amp;&amp; python ./apiserver/db_init.py &amp;&amp; python ./apiserver/model_init.py &amp;&amp; python ./apiserver/manage.py runserver 0.0.0.0:8000"</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8000:8000</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/backend</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ttsmysql</span>

  <span class="na">ttsmysql</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">--lower_case_table_names=1</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">ttsmysql</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MYSQL_DATABASE=tts</span>
      <span class="pi">-</span> <span class="s">MYSQL_USER = root</span>
      <span class="pi">-</span> <span class="s">MYSQL_ROOT_PASSWORD=1234</span>
      <span class="pi">-</span> <span class="s">TZ=Asia/Seoul</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>

  <span class="na">modelserver</span><span class="pi">:</span>
    <span class="na">platform</span><span class="pi">:</span> <span class="s">linux/amd64</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./backend/modelserver</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">5000:5000</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">FLASK_APP=app</span>
      <span class="pi">-</span> <span class="s">FLASK_ENV=development</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">flask run --host=0.0.0.0</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/backend</span>

  <span class="na">rabbit</span><span class="pi">:</span>
      <span class="na">hostname</span><span class="pi">:</span> <span class="s">tts_host</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">rabbitmq:3-management</span>
      <span class="na">command</span><span class="pi">:</span> <span class="s">rabbitmq-server</span>
      <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
      <span class="na">environment</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">RABBITMQ_DEFAULT_USER=tts</span>
        <span class="pi">-</span> <span class="s">RABBITMQ_DEFAULT_PASS=tts123</span>
        <span class="pi">-</span> <span class="s">RABBITMQ_DEFAULT_VHOST=tts_host</span>
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">5672:5672</span>  
        <span class="pi">-</span> <span class="s">15672:15672</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/var/lib/rabbitmq</span>
      <span class="na">networks</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">tts</span>
      <span class="na">depends_on</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">modelserver</span>

  <span class="na">celery</span><span class="pi">:</span>
    <span class="na">platform</span><span class="pi">:</span> <span class="s">linux/amd64</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./backend/modelserver</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">apiserver"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">rabbit"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">modelserver"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">celery"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-A"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">celery_app"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">worker"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--loglevel=info"</span><span class="pi">]</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/backend</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">tts</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">bridge</span>
</code></pre></div></div>

<h3 id="--dockerfile">- Dockerfile</h3>
<p><img src="/assets/images/Team_ForV/7-3.png" alt="image" width="70%" height="70%" /><br /></p>

<p>Dockerfile을 이해하기 위해선 docker 이미지라는 개념을 먼저 알아야한다.</p>

<p>도커 이미지란, 서비스 운영에 필요한 서버 프로그램, 소스 코드, 컴파일된 실행 파일을 묶은 형태로써 기존에 있는 이미지에 추가적인 구성을 더해 또 다른 이미지를 만들 수 있다.<br />
도커 허브와 같은 컨테이너 레지스트리에서 pull 받아서 사용하거나, dockerfile을 직접 작성해 이미지를 만들어서 push할 수 있다.</p>

<p>다 살펴보진 않고, 문제의 핵심부분인 model server에 쓰인 Dockerfile만 보자.</p>
<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Dockerfile</span>
<span class="k">FROM</span><span class="s"> python:3.6.15</span>

<span class="c"># Python</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> apt-utils <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nt">-y</span> <span class="nb">install </span>software-properties-common <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get update <span class="nt">--fix-missing</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nt">-y</span> <span class="nb">install</span> <span class="nt">--fix-missing</span> python3-pip <span class="o">&amp;&amp;</span> <span class="se">\
</span>  python3 <span class="nt">-m</span> pip <span class="nb">install </span>pip <span class="nt">--upgrade</span>

<span class="k">RUN </span>apt-get update <span class="nt">-y</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> build-essential gcc <span class="se">\
</span>  libsndfile1

<span class="c"># mecab start</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> tzdata g++ git curl
<span class="k">RUN </span>apt-get <span class="nb">install </span>python3-setuptools
<span class="k">RUN </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> default-jdk default-jre
<span class="c"># mecab end</span>

<span class="k">WORKDIR</span><span class="s"> /backend/modelserver</span>

<span class="k">COPY</span><span class="s"> requirements.txt .</span>
<span class="k">COPY</span><span class="s"> requirements_TTS.txt .</span>

<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements_TTS.txt

<span class="k">RUN </span>pip <span class="nb">install </span>celery
<span class="k">RUN </span>pip <span class="nb">install </span>google-cloud-storage

<span class="k">RUN </span>pip <span class="nb">install </span><span class="nv">nltk</span><span class="o">==</span>3.6.7
<span class="k">RUN </span>pip <span class="nb">install </span><span class="nv">konlpy</span><span class="o">==</span>0.6.0
<span class="k">RUN </span>pip <span class="nb">install </span>mecab-ko<span class="o">==</span>1.0.0
<span class="k">RUN </span>pip <span class="nb">install </span>mecab-python<span class="o">==</span>1.0.0
<span class="k">RUN </span>pip <span class="nb">install </span>python-mecab-ko<span class="o">==</span>1.0.14
<span class="k">RUN </span>pip <span class="nb">install </span><span class="nv">g2pk</span><span class="o">==</span>0.9.4

<span class="c"># mecab start</span>
<span class="c"># RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2</span>
<span class="c"># RUN update-alternatives --config python3</span>
<span class="k">RUN </span><span class="nb">cd</span> <span class="nb">.</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span>  curl <span class="nt">-s</span> https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh | bash <span class="nt">-s</span>
<span class="c"># mecab end</span>

<span class="k">RUN </span><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>C.UTF-8
<span class="k">ENV</span><span class="s"> LANG=C.UTF-8</span>
<span class="k">ENV</span><span class="s"> LANGUAGE=C.UTF-8</span>

<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">USER</span><span class="s"> root</span>
</code></pre></div></div>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>도커의 개념과 프로젝트에 사용한 도커 세팅에 대해 간단히 알아보았다.<br />
다음 글에서는 ‘음성 학습’과 ‘음성 합성’에 필요한 AI 학습 모델과 라이브러리들에 대해 좀 더 자세히 알아보도록 하자.</p>

<h2 id="reference">Reference</h2>
<p><a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html">https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html</a> [초보를 위한 도커 안내서 - 도커란 무엇인가?]<br />
<a href="https://somjang.tistory.com/entry/Docker-ubuntu1604-%EA%B8%B0%EB%B0%98%EC%97%90%EC%84%9C-mecab-ko-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95">https://somjang.tistory.com/entry/Docker-ubuntu1604-%EA%B8%B0%EB%B0%98%EC%97%90%EC%84%9C-mecab-ko-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95</a> [ubuntu16.04 기반에서 mecab-ko 활용하는 방법]<br />
<a href="https://github.com/litsynp/flask-g2pk">https://github.com/litsynp/flask-g2pk</a> [flask-g2pk]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="docker" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] Flask Model Server</title><link href="http://localhost:4000/team_forv/Team_ForV06/" rel="alternate" type="text/html" title="[Team_ForV] Flask Model Server" /><published>2022-08-22T00:00:00+09:00</published><updated>2022-08-22T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV06</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV06/"><![CDATA[<h2 id="flask-model-server의-역할">Flask Model Server의 역할</h2>
<p><img src="/assets/images/Team_ForV/6-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
<code class="language-plaintext highlighter-rouge">Flask Model Server</code>는 단 한 가지 역할만 수행한다.
클라이언트로부터 음성 합성 요청을 받으면<br />
-&gt; <code class="language-plaintext highlighter-rouge">flask</code> 서버가 <code class="language-plaintext highlighter-rouge">celery</code>에게 task를 할당하고<br />
-&gt; <code class="language-plaintext highlighter-rouge">celery worker</code>가 task를 수행한다.<br />
-&gt; 여기서 task는 ‘입력받은 text를 지정된 멤버의 음성으로 wav 파일을 만들어 gcs에 업로드하는 것’이다.<br />
-&gt; task를 끝내면 <code class="language-plaintext highlighter-rouge">celery worker</code>가 <code class="language-plaintext highlighter-rouge">flask</code>에게 작업이 완료됨을 알려주고, <code class="language-plaintext highlighter-rouge">flask</code>는 클라이언트에게 알려준다.<br />
-&gt; 클라이언트는 <code class="language-plaintext highlighter-rouge">google cloud storage</code>에 업로드된 wav파일의 url을 통해서 생성된 음성파일을 재생한다.</p>

<p>이처럼, <code class="language-plaintext highlighter-rouge">flask</code> 서버는 ‘TTS 음성 합성과 연관된 작업’만을 수행하도록 구성하였는데,<br />
<code class="language-plaintext highlighter-rouge">flask</code> 프레임워크의 특징을 보면서 model server로 <code class="language-plaintext highlighter-rouge">flask</code>를 선택한 이유를 살펴보자!</p>

<h2 id="flask에-대하여">Flask에 대하여..</h2>
<p><img src="/assets/images/Team_ForV/6-2.png" alt="image" width="40%" height="40%" /><br />
flask는 마이크로 웹 프레임워크다.
즉 간결하게 유지하고 확장할 수 있음을 의미한다.</p>

<p>간결하다는 것은? -&gt; 짧은 코드만으로도 완벽히 동작하는 웹 프로그램을 만들 수 있다.
확장성 있는 설계? -&gt; 플라스크에는 다양한 확장 모듈을 통해 입맛대로 만들 수 있다.</p>

<p>서버를 분리한 이유가 <strong>음성합성만을 하는 서버</strong>가 필요했기 때문이고, 이를 위해선<br />
<strong>간단한 코드 구성만으로도 빠르게 뜨는 웹 프로그램</strong>이 필요했다. 따라서 model 서버로는 <code class="language-plaintext highlighter-rouge">flask</code>가 적절하겠다고 판단했다.</p>

<h2 id="rabbitmq--celery를-사용한-비동기처리">rabbitMQ &amp; celery를 사용한 비동기처리</h2>
<p><code class="language-plaintext highlighter-rouge">python</code> 서버는 사용자의 요청이 수행되는 동안 또다른 요청이 들어올 시에 앞선 요청이 수행될 때까지 대기하고 있게 된다. 이는 다중 사용자가 서비스를 이용하기에 매우 안 좋은 환경이다.</p>

<p>따라서, <code class="language-plaintext highlighter-rouge">rabbitMQ</code>와 <code class="language-plaintext highlighter-rouge">celery</code>를 이용하여 비동기처리를 하도록 만들었다.</p>

<p>파일들을 하나씩 뜯어보며 살펴보자.</p>

<h3 id="--celery-app">- celery app</h3>
<p>celery app을 생성하고 세부 항목들을 설정한다.</p>
<ol>
  <li>Celery App의 이름.</li>
  <li>broker: 처리할 Task를 보관하는 Broker(중계자)</li>
  <li>backend: 처리된 결과를 보관하는 Broker를 설정, 이를 생략하면 Task의 실행 결과를 받을 수 없음.</li>
  <li>include: Worker가 처리할 Task를 지정.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># celery_app.py: Celery App을 생성하는 파일
</span><span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">Celery</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Celery</span><span class="p">(</span><span class="s">'celery'</span><span class="p">,</span>
             <span class="n">broker</span><span class="o">=</span><span class="s">'amqp://tts:tts123@rabbit/tts_host'</span><span class="p">,</span>
             <span class="n">backend</span><span class="o">=</span><span class="s">'rpc://'</span><span class="p">,</span>
             <span class="n">include</span><span class="o">=</span><span class="p">[</span><span class="s">'voice'</span><span class="p">],</span>
<span class="p">)</span>
</code></pre></div></div>

<h3 id="--task">- task</h3>
<p>총 세 부분으로 구성되어있다.</p>
<ol>
  <li>음성 합성을 위해 각 멤버들에 대한 변수들을 설정하여 models 리스트에 저장해둔다.</li>
  <li>celery app에 등록되어있는 task가 호출되면 전달된 인자들을 기반으로 wav 파일을 만들고,</li>
  <li>서버에 저장하는 것이 아닌 google-cloude-storage에 저장한 후 True를 반환한다.</li>
</ol>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># voice.py: Worker의 Task가 담겨있는 파일
</span><span class="kn">from</span> <span class="nn">celery_app</span> <span class="kn">import</span> <span class="n">app</span>

<span class="kn">import</span> <span class="nn">os</span>
<span class="kn">from</span> <span class="nn">google.cloud</span> <span class="kn">import</span> <span class="n">storage</span>

<span class="kn">from</span> <span class="nn">tts_modules</span> <span class="kn">import</span> <span class="n">normalize_text</span>
<span class="kn">from</span> <span class="nn">TTS.TTS.utils.synthesizer</span> <span class="kn">import</span> <span class="n">Synthesizer</span>

<span class="c1">############################################################################################################
</span><span class="n">models</span> <span class="o">=</span> <span class="p">[]</span> <span class="c1"># models =&gt; [[id1_syn, id1_symbol], [id2_syn, id2_symbol], [id3_syn, id3_symbol], ...]
</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">):</span>
    <span class="n">member</span> <span class="o">=</span> <span class="p">[]</span>

    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'member </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> synthesizer start!!'</span><span class="p">)</span>
    <span class="c1"># set synthesizer
</span>    <span class="n">synthesizer</span> <span class="o">=</span> <span class="n">Synthesizer</span><span class="p">(</span>
        <span class="sa">f</span><span class="s">"./voice_model/glow-tts/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">g_checkpoint_30000.pth.tar"</span><span class="p">,</span>
        <span class="sa">f</span><span class="s">"./voice_model/glow-tts/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">g_config.json"</span><span class="p">,</span>
        <span class="bp">None</span><span class="p">,</span>
        <span class="sa">f</span><span class="s">"./voice_model/hifigan-v2/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">h_checkpoint_305000.pth.tar"</span><span class="p">,</span>
        <span class="sa">f</span><span class="s">"./voice_model/hifigan-v2/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s">h_config.json"</span><span class="p">,</span>
        <span class="bp">None</span><span class="p">,</span>
        <span class="bp">None</span><span class="p">,</span>
        <span class="bp">False</span><span class="p">,)</span>
    <span class="n">symbol</span> <span class="o">=</span> <span class="n">synthesizer</span><span class="p">.</span><span class="n">tts_config</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">characters</span>  <span class="c1"># normalize_text가 호출될 때 필요한 변수
</span>    
    <span class="n">member</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">synthesizer</span><span class="p">)</span>
    <span class="n">member</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">symbol</span><span class="p">)</span>
    <span class="n">models</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">member</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'member </span><span class="si">{</span><span class="n">i</span><span class="si">}</span><span class="s"> synthesizer end!!'</span><span class="p">)</span>

<span class="c1">############################################################################################################
</span><span class="n">os</span><span class="p">.</span><span class="n">environ</span><span class="p">[</span><span class="s">"GOOGLE_APPLICATION_CREDENTIALS"</span><span class="p">]</span><span class="o">=</span><span class="s">"./micro-handler.json"</span> <span class="c1"># wav gcp bucket 업로드를 위한 key path
</span>
<span class="n">bucket_name</span> <span class="o">=</span> <span class="s">'forv_bucket'</span>    <span class="c1"># 서비스 계정 생성한 bucket 이름 입력
</span><span class="n">storage_client</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">Client</span><span class="p">()</span>
<span class="n">bucket</span> <span class="o">=</span> <span class="n">storage_client</span><span class="p">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>

<span class="c1"># source_file_name = ''    # GCP에 업로드할 파일 절대경로
# destination_blob_name = ''    # 업로드할 파일을 GCP에 저장할 때의 이름
# blob = bucket.blob(destination_blob_name)
# blob.upload_from_filename(source_file_name)
</span>
<span class="c1">############################################################################################################
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">task</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="s">"gan_wav"</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">gan_wav</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">member_id</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">created_at</span><span class="p">):</span>
    <span class="n">wav_file</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'wav_files/</span><span class="si">{</span><span class="n">member_id</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">uuid</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">created_at</span><span class="si">}</span><span class="s">_voice.wav'</span>
    <span class="n">wav_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'./temp/</span><span class="si">{</span><span class="n">member_id</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">uuid</span><span class="si">}</span><span class="s">_</span><span class="si">{</span><span class="n">created_at</span><span class="si">}</span><span class="s">_voice.wav'</span>
    
    <span class="c1"># 미리 만들어둔 객체를 참조
</span>    <span class="n">synth</span> <span class="o">=</span> <span class="n">models</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">member_id</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">sym</span> <span class="o">=</span> <span class="n">models</span><span class="p">[</span><span class="nb">int</span><span class="p">(</span><span class="n">member_id</span><span class="p">)</span> <span class="o">-</span><span class="mi">1</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span>

    <span class="c1"># g2pk 라이브러리를 이용한 입력된 텍스트 변환
</span>    <span class="n">n_text</span> <span class="o">=</span> <span class="n">normalize_text</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">sym</span><span class="p">)</span>
    
    <span class="n">wav</span> <span class="o">=</span> <span class="n">synth</span><span class="p">.</span><span class="n">tts</span><span class="p">(</span><span class="n">n_text</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
    <span class="n">synth</span><span class="p">.</span><span class="n">save_wav</span><span class="p">(</span><span class="n">wav</span><span class="p">,</span> <span class="n">wav_path</span><span class="p">)</span>   <span class="c1"># change wav to .wav file
</span>    
    <span class="n">blob</span> <span class="o">=</span> <span class="n">bucket</span><span class="p">.</span><span class="n">blob</span><span class="p">(</span><span class="n">wav_file</span><span class="p">)</span>
    <span class="n">blob</span><span class="p">.</span><span class="n">upload_from_filename</span><span class="p">(</span><span class="n">wav_path</span><span class="p">)</span> <span class="c1"># upload wav file to gcp bucket
</span>
    <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="n">isfile</span><span class="p">(</span><span class="n">wav_path</span><span class="p">):</span>
        <span class="n">os</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">wav_path</span><span class="p">)</span>

    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<h3 id="--flask-app">- flask app</h3>
<p>특정 http 요청이 들어왔을 때 celery worker에게 작업을 수행하도록 만든다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># app.py: Task를 실행시킬 파일
</span><span class="kn">import</span> <span class="nn">time</span>
<span class="kn">from</span> <span class="nn">flask</span> <span class="kn">import</span> <span class="n">Flask</span><span class="p">,</span> <span class="n">request</span>
<span class="kn">from</span> <span class="nn">flask_cors</span> <span class="kn">import</span> <span class="n">CORS</span>

<span class="kn">from</span> <span class="nn">voice</span> <span class="kn">import</span> <span class="n">gan_wav</span>   <span class="c1"># import celery task
</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Flask</span><span class="p">(</span><span class="n">__name__</span><span class="p">)</span>
<span class="n">cors</span> <span class="o">=</span> <span class="n">CORS</span><span class="p">(</span><span class="n">app</span><span class="p">,</span> <span class="n">resources</span><span class="o">=</span><span class="p">{</span><span class="sa">r</span><span class="s">"/*"</span><span class="p">:</span> <span class="p">{</span><span class="s">"origins"</span><span class="p">:</span> <span class="s">"*"</span><span class="p">}})</span>   <span class="c1"># react와 연결을 위한 cors 설정
</span>

<span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/'</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">hello_world</span><span class="p">():</span>
    <span class="k">return</span> <span class="p">{</span><span class="s">'result'</span><span class="p">:</span> <span class="s">'hello world!'</span><span class="p">}</span>

<span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">route</span><span class="p">(</span><span class="s">'/api/texts'</span><span class="p">,</span> <span class="n">methods</span> <span class="o">=</span> <span class="p">[</span><span class="s">'POST'</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_text</span><span class="p">():</span>
    <span class="s">'''
    {
    "uuid": "022db29c-d0e2-11e5-bb4c-60f81dca7676",
    "member_id": 1,
    "text": "안녕하세요!",
    "created_at": "2022-08-22"
    }
    '''</span>
    <span class="k">if</span> <span class="n">request</span><span class="p">.</span><span class="n">method</span> <span class="o">==</span> <span class="s">'POST'</span><span class="p">:</span>
        <span class="n">params</span> <span class="o">=</span> <span class="n">request</span><span class="p">.</span><span class="n">get_json</span><span class="p">()</span>
        
        <span class="n">uuid</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">'uuid'</span><span class="p">]</span>
        <span class="n">member_id</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">'member_id'</span><span class="p">]</span>
        <span class="n">text</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">'text'</span><span class="p">]</span>
        <span class="n">created_at</span> <span class="o">=</span> <span class="n">params</span><span class="p">[</span><span class="s">'created_at'</span><span class="p">]</span>
        
        <span class="n">gan_wav</span> <span class="o">=</span> <span class="n">gan_wav</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">member_id</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">created_at</span><span class="p">)</span> <span class="c1"># celery task에 인자 전달
</span>
        <span class="k">while</span> <span class="bp">True</span><span class="p">:</span> <span class="c1"># celery worker가 task를 완료하기를 기다림
</span>            <span class="k">if</span> <span class="n">gan_wav</span><span class="p">.</span><span class="n">ready</span><span class="p">()</span> <span class="o">==</span> <span class="bp">False</span><span class="p">:</span>
                <span class="n">time</span><span class="p">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
                <span class="k">continue</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="k">return</span> <span class="p">{</span><span class="s">'uuid'</span><span class="p">:</span> <span class="n">uuid</span><span class="p">,</span> <span class="s">'member_id'</span><span class="p">:</span> <span class="n">member_id</span><span class="p">,</span> <span class="s">'created_at'</span><span class="p">:</span> <span class="n">created_at</span><span class="p">}</span>
</code></pre></div></div>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>음성 합성에 필요한 핵심적인 부분은 tts와 g2pk라는 라이브러리이다.<br />
이 라이브러리를 사용할 때 가장 곤란했던 점이 <strong>‘라이브러리들끼리의 의존성’</strong> 문제였다.<br />
ai 관련 라이브러리들을 서로 의존성이 강하기 때문에 버전이 하나만 틀어져도 실행이 안 되는 경우가 많았고, 
이로 인해 <code class="language-plaintext highlighter-rouge">django</code>서버와 <code class="language-plaintext highlighter-rouge">flask</code>서버의 python 버전을 다르게 구성을 해야했다.</p>

<p>결론부터 말하자면 이 문제를 해결하기위해 <code class="language-plaintext highlighter-rouge">Docker</code>를 도입했다.<br />
다음 게시글에서는 이 프로젝트에 쓰인 ai 관련 라이브러리들과 <code class="language-plaintext highlighter-rouge">Docker</code> 세팅에 대해 알아보자.</p>

<h2 id="reference">Reference</h2>
<p><a href="https://leffept.tistory.com/202">https://leffept.tistory.com/202</a> [Flask 란?]<br />
<a href="https://heodolf.tistory.com/63">https://heodolf.tistory.com/63</a> [Celery 무작정 시작하기 (2) - Task]<br />
<a href="https://buildabetterworld.tistory.com/144?category=874656">https://buildabetterworld.tistory.com/144?category=874656</a> [Celery Side-Project(Ant Platform) - 3. Flask에서 Celery로 비동기작업 수행하기(프로젝트 구조+Celery동작)]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="python" /><category term="flask" /><category term="rabbitMQ" /><category term="celery" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] Django API Server</title><link href="http://localhost:4000/team_forv/Team_ForV05/" rel="alternate" type="text/html" title="[Team_ForV] Django API Server" /><published>2022-08-18T00:00:00+09:00</published><updated>2022-08-19T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV05</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV05/"><![CDATA[<h2 id="django-api-server의-역할">Django API Server의 역할</h2>
<p><img src="/assets/images/Team_ForV/5-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
<code class="language-plaintext highlighter-rouge">Django API Server</code>의 경우 총 3가지의 역할을 하고 있다.</p>
<ol>
  <li>서버가 올라갈 시 <code class="language-plaintext highlighter-rouge">google-cloud-storage</code>로부터 필요한 ai모델파일들을 서버로 불러온다.</li>
  <li>사용자 정보 페이지 요청 시 db를 조회하여 필요한 정보(멤버들의 TMI 정보, 사진 정보 등등)들을 클라이언트에 제공해준다.</li>
  <li>클라이언트로부터 오는 text 요청(특정 목소리로 읽어주었으면 하는 문장)을 db에 저장해둔다.</li>
</ol>

<p>이처럼, <code class="language-plaintext highlighter-rouge">django</code> 서버는 <code class="language-plaintext highlighter-rouge">mysql</code> db와 연관된 작업을 많이 수행하도록 구성하였는데, 이는 <code class="language-plaintext highlighter-rouge">django</code>의 뛰어난 자체 <code class="language-plaintext highlighter-rouge">ORM</code> 때문이라고 볼 수 있다.</p>

<h2 id="orm이란">ORM이란?</h2>
<p><code class="language-plaintext highlighter-rouge">ORM</code>은 Object-Relation Mapping의 준말로, 객체(Object)와 관계형 데이터베이스(Relational)을 연결(Mapping)해주는 것을 말한다. <br />
이를 통해 개발자는 데이터베이스의 테이블에 <code class="language-plaintext highlighter-rouge">CRUD</code>(Create, Read, Update, Delete)를 할 때, SQL 쿼리를 사용하지 않고도, 가능하게 된다. <br />
<code class="language-plaintext highlighter-rouge">django</code>는 이 <code class="language-plaintext highlighter-rouge">ORM</code>을 내장하고 있어, 데이터베이스에 간편하게 접근할 수 있다.</p>

<p><img src="/assets/images/Team_ForV/5-2.png" alt="image" width="80%" height="80%" /><br />
위의 테이블들은 이 프로젝트에 쓰인 테이블이다.(로그인 기능을 안 넣었더니 확실히 초라하다..ㅎㅎ)</p>

<p>그렇다면, 이 프로젝트에서 어떤식으로 사용했는지 알아보자.</p>

<h2 id="model-serializer-view">Model, Serializer, View</h2>
<p><img src="/assets/images/Team_ForV/5-3.png" alt="image" width="40%" height="40%" /><br />
django REST framework(DRF)로 RESTful한 API를 쉽게 만들 수 있다. <br />
<br /></p>

<p>1st. 먼저 model.py를 작성한다.<br />
직접 CREATE TABLE 쿼리문을 통해 만드는 것이 아닌, ORM을 통해 class 인스턴스와 db 테이블을 매핑시킨다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">datetime</span> <span class="kn">import</span> <span class="n">datetime</span>
<span class="kn">from</span> <span class="nn">django.db</span> <span class="kn">import</span> <span class="n">models</span>

<span class="k">class</span> <span class="nc">Member</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span> <span class="c1"># 팀원들에 대한 정보
</span>    <span class="nb">id</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">AutoField</span><span class="p">(</span><span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>  <span class="c1"># primary key
</span>    <span class="n">name</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">8</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>   <span class="c1"># 이름
</span>    <span class="n">birth</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span> <span class="c1"># 생년월일
</span>    <span class="n">tmi</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>  <span class="c1"># 팀원들의 TMI 정보들
</span>    <span class="n">position</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span> <span class="c1"># 팀원 각자의 역할
</span>    <span class="n">github_link</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>  <span class="c1"># 팀원 본인의 깃허브 링크(sns 계정의 일종)
</span>    <span class="n">image_link</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>   <span class="c1"># 팀원 본인의 프로필 사진(gcs에 저장해두고 url을 저장)
</span>    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">)</span> <span class="c1"># 해당 레코드 생성시 현재 시간 자동저장
</span>    <span class="n">updated_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># 해당 레코드 갱신시 현재 시간 자동저장
</span>    
<span class="k">class</span> <span class="nc">ModelLink</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>  <span class="c1"># 음성 합성에 필요한 멤버 개개인의 모델 파일 정보(glow-tts, hifi-gan)
</span>    <span class="nb">id</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">OneToOneField</span><span class="p">(</span><span class="n">Member</span><span class="p">,</span> <span class="n">primary_key</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">,</span> <span class="n">db_column</span><span class="o">=</span><span class="s">"id"</span><span class="p">)</span>
    <span class="n">glow_config</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">glow_pth</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">glow_scale_stats</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">hifi_config</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">hifi_pth</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">hifi_scale_stats</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">,</span> <span class="n">null</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">default</span><span class="o">=</span><span class="n">datetime</span><span class="p">.</span><span class="n">now</span><span class="p">)</span> <span class="c1"># 해당 레코드 생성시 현재 시간 자동저장
</span>    <span class="n">updated_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># 해당 레코드 갱신시 현재 시간 자동저장
</span>
<span class="k">class</span> <span class="nc">Text</span><span class="p">(</span><span class="n">models</span><span class="p">.</span><span class="n">Model</span><span class="p">):</span>   <span class="c1"># 사용자들의 문장요구를 db에 저장해두어 추후에 활용하기 위함
</span>    <span class="n">member_id</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Member</span><span class="p">,</span> <span class="n">on_delete</span><span class="o">=</span><span class="n">models</span><span class="p">.</span><span class="n">CASCADE</span><span class="p">,</span> <span class="n">db_column</span><span class="o">=</span><span class="s">"member_id"</span><span class="p">)</span>
    <span class="n">uuid</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span> <span class="c1"># 로그인 대신 uuid를 사용
</span>    <span class="n">text</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span> <span class="c1"># 사용자가 요청한 문장
</span>    <span class="n">created_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">CharField</span><span class="p">(</span><span class="n">max_length</span><span class="o">=</span><span class="mi">100</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="s">''</span><span class="p">)</span>   <span class="c1"># 레코드 갱신 시점이 아닌 uuid 생성 시점을 기준으로 삼기 때문에 react에서 값을 가져와 저장함
</span>    <span class="n">updated_at</span> <span class="o">=</span> <span class="n">models</span><span class="p">.</span><span class="n">DateTimeField</span><span class="p">(</span><span class="n">auto_now</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span> <span class="c1"># 해당 레코드 갱신시 현재 시간 자동저장
</span></code></pre></div></div>

<p><br />
2nd. serializer.py를 작성한다.<br />
Serializer는 DRF가 제공하는 클래스인데, DB 인스턴스를 JSON 데이터로 생성한다. <br />
이렇게 JSON 포맷으로 직렬화된 문자열은 views에서 클라이언트로 넘겨주게 된다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">serializers</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Member</span><span class="p">,</span> <span class="n">ModelLink</span><span class="p">,</span> <span class="n">Text</span>

<span class="k">class</span> <span class="nc">MemberSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Member</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>
        
<span class="k">class</span> <span class="nc">ModelSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">ModelLink</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>

<span class="k">class</span> <span class="nc">TextSerializer</span><span class="p">(</span><span class="n">serializers</span><span class="p">.</span><span class="n">ModelSerializer</span><span class="p">):</span>
    <span class="k">class</span> <span class="nc">Meta</span><span class="p">:</span>
        <span class="n">model</span> <span class="o">=</span> <span class="n">Text</span>
        <span class="n">fields</span> <span class="o">=</span> <span class="s">'__all__'</span>
</code></pre></div></div>

<p><br />
3rd. views.py를 작성한다.<br />
django에서는 view를 통해서 HTTP 요청을 처리한다. <br />
FBV(함수기반뷰), CBV(클래스기반뷰)를 통해서도 API를 만들 수 있지만, <br />
DRF는 <code class="language-plaintext highlighter-rouge">apiview</code>, <code class="language-plaintext highlighter-rouge">mixins</code>, <code class="language-plaintext highlighter-rouge">viewset</code> 등을 제공한다.</p>

<p>각 request method마다 직접 serializer 처리를 해주어야 한다거나, <br />
공통된 queryset과 serializer_class가 반복되는 등의 문제를 해결하기 위해 <br />
<code class="language-plaintext highlighter-rouge">viewset</code>을 사용하여 구현했다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">.serializers</span> <span class="kn">import</span> <span class="n">MemberSerializer</span><span class="p">,</span> <span class="n">ModelSerializer</span><span class="p">,</span> <span class="n">TextSerializer</span>
<span class="kn">from</span> <span class="nn">.models</span> <span class="kn">import</span> <span class="n">Member</span><span class="p">,</span> <span class="n">ModelLink</span><span class="p">,</span> <span class="n">Text</span>
<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">viewsets</span>

<span class="c1"># ViewSet : Post, Get, Put, Delete 기본기능 내장
</span><span class="k">class</span> <span class="nc">MemberViewSet</span><span class="p">(</span><span class="n">viewsets</span><span class="p">.</span><span class="n">ModelViewSet</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Member</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>  
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">MemberSerializer</span>  

<span class="k">class</span> <span class="nc">ModelLinkViewSet</span><span class="p">(</span><span class="n">viewsets</span><span class="p">.</span><span class="n">ModelViewSet</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">ModelLink</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>  
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">ModelSerializer</span>

<span class="k">class</span> <span class="nc">TextViewSet</span><span class="p">(</span><span class="n">viewsets</span><span class="p">.</span><span class="n">ModelViewSet</span><span class="p">):</span>
    <span class="n">queryset</span> <span class="o">=</span> <span class="n">Text</span><span class="p">.</span><span class="n">objects</span><span class="p">.</span><span class="nb">all</span><span class="p">()</span>  
    <span class="n">serializer_class</span> <span class="o">=</span> <span class="n">TextSerializer</span>
</code></pre></div></div>

<p><br />
4th. url.py를 작성한다.<br />
이렇게 작성한 <code class="language-plaintext highlighter-rouge">viewset</code>을 가지고 url 링크에 매핑해주면, 클라이언트에서 다양한 요청이 들어올 시 처리할 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">django.urls</span> <span class="kn">import</span> <span class="n">include</span><span class="p">,</span> <span class="n">path</span>
<span class="kn">from</span> <span class="nn">.views</span> <span class="kn">import</span> <span class="o">*</span>
<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">routers</span>
<span class="kn">from</span> <span class="nn">rest_framework</span> <span class="kn">import</span> <span class="n">permissions</span>

<span class="n">router</span> <span class="o">=</span> <span class="n">routers</span><span class="p">.</span><span class="n">DefaultRouter</span><span class="p">()</span>
<span class="n">router</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="sa">r</span><span class="s">'api/members'</span><span class="p">,</span> <span class="n">MemberViewSet</span><span class="p">)</span>
<span class="n">router</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="sa">r</span><span class="s">'api/modellinks'</span><span class="p">,</span> <span class="n">ModelLinkViewSet</span><span class="p">)</span>
<span class="n">router</span><span class="p">.</span><span class="n">register</span><span class="p">(</span><span class="sa">r</span><span class="s">'api/texts'</span><span class="p">,</span> <span class="n">TextViewSet</span><span class="p">)</span>
</code></pre></div></div>

<p>자, 이렇게 <code class="language-plaintext highlighter-rouge">DRF</code>와 <code class="language-plaintext highlighter-rouge">ORM</code>을 통해 db 테이블의 구성과 api 세팅을 마쳤다면 django와 mysql과 연동하여 실제로 사용이 가능하도록 만들면 된다.</p>

<h2 id="django와-mysql-연동하기">django와 mysql 연동하기</h2>
<p>django는 기본적으로 <code class="language-plaintext highlighter-rouge">sqlite3</code>를 사용한다. 하지만 이 프로젝트에서는 <code class="language-plaintext highlighter-rouge">mysql</code>를 사용할 것이므로, <code class="language-plaintext highlighter-rouge">django</code>와 <code class="language-plaintext highlighter-rouge">mysql</code>을 연동해주어야 한다. 방법은 간단하다!</p>

<ol>
  <li><code class="language-plaintext highlighter-rouge">mysqlclient</code>나 <code class="language-plaintext highlighter-rouge">pymysql</code>같은 라이브러리를 pip을 통해 설치하고</li>
  <li>my_settings.py에 다음과 같은 설정을 작성해주고,
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">MY_DATABASES</span> <span class="o">=</span> <span class="p">{</span>
 <span class="s">'default'</span><span class="p">:</span> <span class="p">{</span> 
 	<span class="s">'ENGINE'</span><span class="p">:</span> <span class="s">'django.db.backends.mysql'</span><span class="p">,</span> <span class="c1"># 사용할 엔진 설정
</span>     <span class="s">'NAME'</span><span class="p">:</span> <span class="s">'tts'</span><span class="p">,</span>  <span class="c1"># 연동할 mysql의 데이터베이스 이름
</span>     <span class="s">'USER'</span><span class="p">:</span> <span class="s">'root'</span><span class="p">,</span>     <span class="c1"># db 접속 계정명
</span>     <span class="s">'PASSWORD'</span><span class="p">:</span> <span class="s">'1234'</span><span class="p">,</span>     <span class="c1"># 해당 db 접속 계정 비밀번호
</span>     <span class="s">'HOST'</span><span class="p">:</span> <span class="s">'ttsmysql'</span><span class="p">,</span>     <span class="c1"># 실제 db 주소
</span>     <span class="s">'PORT'</span><span class="p">:</span> <span class="s">'3306'</span><span class="p">,</span>     <span class="c1"># 포트 번호
</span>  <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div>    </div>
  </li>
  <li>settings.py에 해당 설정을 import하여 적용시키면 된다.
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="kn">from</span> <span class="nn">.my_settings</span> <span class="kn">import</span> <span class="n">MY_DATABASES</span>

 <span class="n">DATABASES</span> <span class="o">=</span> <span class="n">MY_DATABASES</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>지금까지 <code class="language-plaintext highlighter-rouge">django</code> api server에 대하여 정리해보았다. <br />
다음 포스팅에서는 <code class="language-plaintext highlighter-rouge">flask</code>로 만든 model 서버에 대해 정리해보도록 하자.</p>

<h2 id="reference">Reference</h2>
<p><a href="https://ssungkang.tistory.com/entry/Django-django-rest-framework-%EB%A5%BC-%EC%9C%84%ED%95%9C-JSON-%EC%A7%81%EB%A0%AC%ED%99%94?category=320582">https://ssungkang.tistory.com/entry/Django-django-rest-framework-%EB%A5%BC-%EC%9C%84%ED%95%9C-JSON-%EC%A7%81%EB%A0%AC%ED%99%94?category=320582</a> [django rest framework 를 위한 JSON 직렬화]<br />
<a href="https://wikidocs.net/book/4223">https://wikidocs.net/book/4223</a> [점프 투 장고]<br />
<a href="https://ssungkang.tistory.com/entry/Django-APIView-Mixins-generics-APIView-ViewSet%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90">https://ssungkang.tistory.com/entry/Django-APIView-Mixins-generics-APIView-ViewSet%EC%9D%84-%EC%95%8C%EC%95%84%EB%B3%B4%EC%9E%90</a> [APIView, Mixins, generics APIView, ViewSet을 알아보자]<br />
<a href="https://velog.io/@devmin/Django-MySQL-Connect">https://velog.io/@devmin/Django-MySQL-Connect</a> [Django와 MySQL 연결하기]<br /></p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="python" /><category term="django" /><category term="mysql" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] Python Web Framework</title><link href="http://localhost:4000/team_forv/Team_ForV04/" rel="alternate" type="text/html" title="[Team_ForV] Python Web Framework" /><published>2022-08-17T00:00:00+09:00</published><updated>2022-08-17T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV04</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV04/"><![CDATA[<h2 id="아키텍처를-보며">아키텍처를 보며..</h2>
<p><img src="/assets/images/Team_ForV/1-a.png" alt="image" width="120%" height="120%" /></p>

<p><code class="language-plaintext highlighter-rouge">python</code>으로 웹 application을 만들 때<br />
-&gt; 기본적으로 socket을 제공하니까 개 노가다 하면 만들 수야 있겠지만 의미도 없고..<br />
-&gt; 따라서, <code class="language-plaintext highlighter-rouge">python</code>을 이용하여 <code class="language-plaintext highlighter-rouge">WSGI</code> 라는 인터페이스를 만들어 사용하고 있다.<br /></p>

<h2 id="wsgi가-뭔데">WSGI가 뭔데?</h2>
<p><img src="/assets/images/Team_ForV/1-b.png" alt="image" width="50%" height="50%" />
<img src="/assets/images/Team_ForV/1-c.png" alt="image" /></p>

<p><code class="language-plaintext highlighter-rouge">WSGI</code>는 ‘Web Server GateWay Interface’의 약자로 web server로 들어오는 request를 python으로 쓰여진 web application으로 forwarding 해주는 interface를 말한다.<br />
예시) <code class="language-plaintext highlighter-rouge">gunicorn</code>, <code class="language-plaintext highlighter-rouge">uwsgi</code> 등등이 있음</p>

<dl>
  <dt>Q) 근데, flask, django 사용했을 때 gunicorn 같은 거 없이도 web server 잘 돌아가던데?<br /></dt>
  <dd>사실은 프레임워크 안에 자체적으로 WSGI가 내장되어 있어서 잘 돌아갔던 것..</dd>
</dl>

<p>web application을 만들기 위해선 <code class="language-plaintext highlighter-rouge">flask</code>나 <code class="language-plaintext highlighter-rouge">django</code>가 제공해주는 <code class="language-plaintext highlighter-rouge">template</code>나 <code class="language-plaintext highlighter-rouge">view</code>를 가지고 <code class="language-plaintext highlighter-rouge">python</code>으로 웹 서버를 만드는 것인데..(결국 <code class="language-plaintext highlighter-rouge">flask</code>나 <code class="language-plaintext highlighter-rouge">django</code>는 프레임워크에 불과하다는 소리!)<br />
-&gt; 실제로 deploy까지 하게 되면 <code class="language-plaintext highlighter-rouge">WSGI</code>라는 인터페이스가 있고, 그런 인터페이스의 제공을 위해 <code class="language-plaintext highlighter-rouge">gunicorn</code> 등을 이용하는 것이다.<br />
-&gt; 다만, python web server는 보안 및 퍼포먼스의 문제가 있어 전문적 web server를 <code class="language-plaintext highlighter-rouge">proxy server</code>로 두는데..<br /></p>

<h2 id="proxy-server는-무엇이냐">Proxy Server는 무엇이냐</h2>
<p><img src="/assets/images/Team_ForV/1-d.png" alt="image" width="50%" height="50%" />
<img src="/assets/images/Team_ForV/1-e.jpeg" alt="image" width="40%" height="50%" /></p>

<p><code class="language-plaintext highlighter-rouge">Proxy</code>: 서버와 클라이언트 사이에서 대리로 통신을 수행해주는 것<br />
즉, Client가 자신을 거쳐 다른 네트워크에 접속할 수 있도록 중간에서 대리해주는 서버를 말한다.<br />
사용자가 많거나, performance, security를 고려하여 전문적 server를 두는 것이다.<br /></p>

<h2 id="아키텍처를-보며-다시-정리해보자">아키텍처를 보며 다시 정리해보자!</h2>
<p><img src="/assets/images/Team_ForV/1-a.png" alt="image" width="120%" height="120%" /></p>

<ol>
  <li>웹 브라우저의 동작방식<br />
사용자가 서비스를 이용하려면 웹 브라우저에 URL을 입력하는데, 이 때 웹 브라우저가 URL을 사용해서 서버에 요청하는 페이지는 크게 2가지 종류가 있다.
    <ul>
      <li>정적 페이지 요청<br />
   예를 들어 <code class="language-plaintext highlighter-rouge">http://3.37.58.70:5000/static/hello.css</code>라는 URL 접속 요청이 들어오면, 서비스는 <code class="language-plaintext highlighter-rouge">static/hello.css</code>라는 파일을 찾아서 웹 브라우저로 보내주는 것이다. .js, .jpg, .png 등등의 파일은 변하지 않는 성질 때문에 ‘정적 파일’이라고 하며, 웹 브라우저에서 이런 정적 파일을 요청하는 행위를 ‘정적 페이지 요청’이라 한다.</li>
      <li>동적 페이지 요청<br />
   서버의 데이터베이스에 어떤 내용이 있는지에 따라 수시로 변하는 파일들이 있다. 웹 브라우저의 이러한 요청을 ‘동적 페이지 요청’이라고 한다. 이러한 동적 요청은 정적 요청과는 달리 조금 복잡한 과정을 거쳐 응답한다.</li>
    </ul>
  </li>
  <li>
    <p>동적 페이지 요청의 처리를 위해 웹 서버와 WSGI 서버가 필요하다!<br />
웹 서버에 동적 페이지 요청이 들어오면 파이썬 프로그램을 호출해야 한다<br />
-&gt; 대부분의 웹 서버는 어떻게 파이썬 프로그램을 호출해야 하는지 모르기 때문에 파이썬 프로그램을 호출하지 못한다.<br />
-&gt; 이런 경우에 파이썬 프로그램을 호출하는 WSGI 서버가 필요한 것이다.<br /></p>

    <p>즉, 동적 페이지 요청의 과정은<br />
웹 서버가 WSGI 서버 호출 -&gt; WSGI 서버가 파이썬 프로그램을 호출<br /></p>
  </li>
  <li>
    <p>WSGI 서버의 동작 원리를 구체적으로 보자<br />
<code class="language-plaintext highlighter-rouge">웹 서버</code>로 들어온 동적 페이지 요청 -&gt; <code class="language-plaintext highlighter-rouge">WSGI 서버</code>를 호출 -&gt; <code class="language-plaintext highlighter-rouge">WSGI 어플리케이션</code> 호출 -&gt; 동적 요청 처리<br /></p>

    <p>즉, 동적 페이지 요청은 결국 <code class="language-plaintext highlighter-rouge">WSGI 애플리케이션</code>이 처리하는 것이고, 이런 <code class="language-plaintext highlighter-rouge">WSGI 애플리케이션</code>에는 <code class="language-plaintext highlighter-rouge">django</code>, <code class="language-plaintext highlighter-rouge">flask</code>, <code class="language-plaintext highlighter-rouge">fast api</code> 등이 있는 것이다!<br /></p>

    <p><img src="/assets/images/Team_ForV/1-g.png" alt="image" width="50%" height="50%" /></p>

    <p>++ <code class="language-plaintext highlighter-rouge">WSGI 서버</code>는 <code class="language-plaintext highlighter-rouge">웹 서버</code>와 <code class="language-plaintext highlighter-rouge">WSGI 애플리케이션</code> 중간에 위치해서 <code class="language-plaintext highlighter-rouge">WSGI 미들웨어</code>, <code class="language-plaintext highlighter-rouge">WSGI 컨테이너</code> 라고도 한다.</p>
  </li>
</ol>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>python을 이용한 백엔드 framework의 work flow에 대해 살펴보았다. <br />
다음에는 본격적으로 이 프로젝트에 쓰인 두 가지 서버에 대하여 정리해보는 시간을 갖도록 하자. <br />
먼저 <code class="language-plaintext highlighter-rouge">django</code>로 쓰인 api server에 대해 살펴보자.</p>

<h2 id="reference">Reference</h2>
<p><a href="https://liveyourit.tistory.com/251">https://liveyourit.tistory.com/251</a> [프록시 서버란?]<br />
<a href="https://wikidocs.net/81076">https://wikidocs.net/81076</a> [점프 투 플라스크]<br />
<a href="https://www.youtube.com/watch?v=5rjhJRyu8s8&amp;t=0s">https://www.youtube.com/watch?v=5rjhJRyu8s8&amp;t=0s</a> [django, flask 배포 스택 구성]<br /></p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="python" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] 아키텍처 및 기술스택 소개</title><link href="http://localhost:4000/team_forv/Team_ForV03/" rel="alternate" type="text/html" title="[Team_ForV] 아키텍처 및 기술스택 소개" /><published>2022-08-17T00:00:00+09:00</published><updated>2022-08-17T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV03</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV03/"><![CDATA[<h2 id="아키텍처-소개">아키텍처 소개</h2>
<p><img width="921" alt="스크린샷 2022-08-03 오후 8 56 10" src="https://user-images.githubusercontent.com/70627982/182602386-c5919ba2-ac66-43a0-86c2-ed7f12c6d3f2.png" /><br /></p>

<ul>
  <li>
    <p><b>Front-End</b><br />
<img src="https://img.shields.io/badge/react-02569B?style=for-the-badge&amp;logo=react&amp;logoColor=white" /> <img src="https://img.shields.io/badge/javascript-F7DF1E?style=for-the-badge&amp;logo=javascript&amp;logoColor=black" /></p>
  </li>
  <li>
    <p><b>Back-End</b><br />
<img src="https://img.shields.io/badge/django-007396?style=for-the-badge&amp;logo=django&amp;logoColor=white" /> <img src="https://img.shields.io/badge/flask-6DB33F?style=for-the-badge&amp;logo=flask&amp;logoColor=white" /> <img src="https://img.shields.io/badge/python-3776AB?style=for-the-badge&amp;logo=python&amp;logoColor=white" /> <img src="https://img.shields.io/badge/mysql-4479A1?style=for-the-badge&amp;logo=mysql&amp;logoColor=white" /> <img src="https://img.shields.io/badge/celery-000000?style=for-the-badge&amp;logo=celery&amp;logoColor=white" /> <img src="https://img.shields.io/badge/rabbitmq-FF6F00?style=for-the-badge&amp;logo=rabbitmq&amp;logoColor=white" /> <img src="https://img.shields.io/badge/gunicorn-499848?style=for-the-badge&amp;logo=gunicorn&amp;logoColor=black" /></p>
  </li>
  <li>
    <p><b>DevOps</b>  <br />
<img src="https://img.shields.io/badge/docker-2496ED?style=for-the-badge&amp;logo=docker&amp;logoColor=white" /> <img src="https://img.shields.io/badge/NGINX-009639?style=for-the-badge&amp;logo=nginx&amp;logoColor=black" /> <!-- <img src="https://img.shields.io/badge/aws-232F3E?style=for-the-badge&logo=amazonaws&logoColor=white"> --></p>
  </li>
  <li>
    <p><b>AI (Tools, Env)</b>  <br />
<img src="https://img.shields.io/badge/colab-F9AB00?style=for-the-badge&amp;logo=googlecolab&amp;logoColor=white" /> <img src="https://img.shields.io/badge/pytorch-F7931E?style=for-the-badge&amp;logo=pytorch&amp;logoColor=white" /></p>
  </li>
  <li>
    <p><b>UI/UX, MockUp Design </b>  <br />
<img src="https://img.shields.io/badge/figma-34A7C1?style=for-the-badge&amp;logo=figma&amp;logoColor=white" /> <img src="https://img.shields.io/badge/zeplin-31A8FF?style=for-the-badge&amp;logo=zeplin&amp;logoColor=white" /></p>
  </li>
  <li>
    <p><b>Team Collaboration Tool</b>  <br />
<img src="https://img.shields.io/badge/github-181717?style=for-the-badge&amp;logo=github&amp;logoColor=white" /> <img src="https://img.shields.io/badge/notion-0052CC?style=for-the-badge&amp;logo=notion&amp;logoColor=white" /> <img src="https://img.shields.io/badge/slack-D24939?style=for-the-badge&amp;logo=slack&amp;logoColor=white" /> <img src="https://img.shields.io/badge/zoom-2496ED?style=for-the-badge&amp;logo=zoom&amp;logoColor=white" /></p>
  </li>
</ul>

<h2 id="프로젝트의-흐름">프로젝트의 흐름</h2>
<p>이 프로젝트의 기본 흐름은 이러하다.</p>
<ol>
  <li><code class="language-plaintext highlighter-rouge">react</code>(클라이언트)로부터 사용자의 요청이 들어오면,</li>
  <li><code class="language-plaintext highlighter-rouge">nginx</code>(proxy 서버)가 클라이언트와 서버 사이에서 대리로 통신을 수행해준다.</li>
  <li><code class="language-plaintext highlighter-rouge">django</code>나 <code class="language-plaintext highlighter-rouge">flask</code>는 python으로 쓰여진 web application이기 때문에 <code class="language-plaintext highlighter-rouge">gunicorn</code>과 같은 wsgi 서버를 통해 forwarding해주게 되고,</li>
  <li>사용자의 요청에 따라
    <ul>
      <li>단순한 페이지 조회 요청이 들어오면 <code class="language-plaintext highlighter-rouge">django</code> api 서버로 연결되어 필요한 정보들을 <code class="language-plaintext highlighter-rouge">mysql</code> 데이터베이스에서 조회해 보여주고,</li>
      <li>음성 합성 요청이 들어오게 되면 <code class="language-plaintext highlighter-rouge">flask</code> model 서버가 필요한 모델 파일들로 음성 파일을 합성하여 <code class="language-plaintext highlighter-rouge">google cloud storage</code>로 올린다.</li>
    </ul>
  </li>
  <li>앞선 백엔드단의 작업이 완료되면, client는 원하는 멤버의 프로필 정보를 확인하거나, 원하는 문장을 원하는 멤버의 목소리로 들어볼 수 있게 된다.</li>
  <li>마지막으로, 개발환경의 통합과 신속한 배포를 위해 <code class="language-plaintext highlighter-rouge">docker</code>로 컨테이너화하여 개발을 진행하였다.</li>
</ol>

<p>이 일련의 과정들을 수행함에 있어서, 사용자의 요청이 많은 상황에 대비하여 몇몇 ‘장치’들을 추가했는데…</p>

<h2 id="서버의-분리와-비동기처리">서버의 분리와 비동기처리</h2>
<ul>
  <li>
    <h3 id="서버의-분리">서버의 분리</h3>
    <p><img src="/assets/images/Team_ForV/3-1.png" alt="image" width="50%" height="50%" /><br /></p>
  </li>
</ul>

<p>아키텍처에서 볼 수 있듯이, 기능별로 서버를 분리했다. <br />
이렇게 서버를 분리하여 운영할 시 model 서버가 다운되도 api 서버는 동작하듯이, 한 기능을 못 쓰게 되더라도 전체 서비스가 죽는 것은 방지할 수 있다.<br /></p>

<p><code class="language-plaintext highlighter-rouge">django</code>는 자체 ORM을 내장하여 다양한 데이터베이스에 유연하게 액세스할 수 있다. <br />
따라서, 데이터베이스와 연결되는 모든 작업들은 <code class="language-plaintext highlighter-rouge">django</code>가 api server로써 동작하도록 만들었고, <br />
<code class="language-plaintext highlighter-rouge">flask</code>는 비교적 가벼워서 음성 합성 작업만 전담하는 model sever로 선택했다.</p>

<ul>
  <li>
    <h3 id="message-queue와-worker를-이용한-비동기처리">Message Queue와 Worker를 이용한 비동기처리</h3>
    <p><img src="/assets/images/Team_ForV/3-2.png" alt="image" width="50%" height="50%" /><br /></p>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">python</code> 서버는 사용자의 요청이 수행되는 동안 또다른 요청이 들어올 시에 앞선 요청이 수행될 때까지 대기하고 있게 된다. 이는 다중 사용자가 서비스를 이용하기에 매우 안 좋은 환경이다.</p>

<p>따라서, <code class="language-plaintext highlighter-rouge">rabbitMQ</code>와 <code class="language-plaintext highlighter-rouge">celery</code>를 이용하여 비동기처리를 하도록 만들었다. <br />
사용자의 요청을 task화하여 <code class="language-plaintext highlighter-rouge">celery</code>에게 전달하고, <br />
<code class="language-plaintext highlighter-rouge">celery</code> worker가 그 작업을 비동기적으로 수행하게끔하여, 서버가 여러가지 일을 수행할 수 있도록하였다!</p>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>단순히 Frontend와 Backend를 넘어 Proxy Server, WSGI, Bucket, Docker, AWS … 등등 많은 기술들이 등장했다. <br />
앞으로의 글에서는 앞서 언급한 기술들에 대해 하나씩 정리하고자 한다.</p>

<p>먼저, <code class="language-plaintext highlighter-rouge">python</code> 기반의 Backend framework에서의 work flow를 살펴보자!</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="Info" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] 프로젝트 소개</title><link href="http://localhost:4000/team_forv/Team_ForV02/" rel="alternate" type="text/html" title="[Team_ForV] 프로젝트 소개" /><published>2022-08-16T00:00:00+09:00</published><updated>2022-08-17T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV02</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV02/"><![CDATA[<h2 id="들어가기에-앞서">들어가기에 앞서..</h2>
<p>여름방학을 맞아 학교 사람들과 같이 프로젝트를 진행해보았다.<br />
AI 기술을 활용한 web 서비스를 end to end로 개발해보는 경험을 했다.<br />
프로젝트가 끝나고 기억이 흐려지기 전에 프로젝트를 진행하며 겪었던 시행착오들과 공부했던 내용을 차곡차곡 정리해보고자 한다.</p>

<h2 id="프로젝트-소개">프로젝트 소개</h2>
<p>프로젝트를 시작하기에 앞서 여러 AI 관련 프로젝트들을 참고하였고, 그 중 눈에 들어왔던 기술은..</p>

<p><img src="/assets/images/Team_ForV/2-1.png" alt="image" width="80%" height="80%" class="align-center" /><br />
네이버에서 진행하는 개발자 컨퍼런스 DEVIEW의 ‘연예인의 목소리로 책 읽어주기’발표에서 선보인 ‘사람의 목소리를 학습시키는 기술’이었다.</p>

<p>사람의 목소리를 학습시켜 그 목소리로 오디오북을 만들어준다는 내용이었고, 이 발표를 보고 한 아이디어를 떠올렸다.</p>

<p><img src="/assets/images/Team_ForV/2-2.png" alt="image" width="80%" height="80%" class="align-center" /><br />
우리나라에서 엔터테인먼트 사업이 한하다는 걸 얘기하는 건 어쩌면 뻔하게 들릴 수도 있을만큼, k-pop의 인기는 굳이 따로 설명하지 않아도 전 세계적으로 인정받고 있는 대중문화의 일종이다.</p>

<p>이런 흐름에 맞춰서 기획사들도 소비자들을 확보하기 위해 다양한 노력을 기울이고 있는데,</p>

<p>z세대가 핵심 소비자인 브랜드라면, 다른 데선 할 수 없는 특이한 체험을 마케팅에 접목하면 좋다’라던지,<br />
이미 몇몇 회사에서는 소속 연예인들의 음성 데이터를 활용하는 방안들도 검토 중이라는 걸 알 수 있었다.<br /></p>

<p><img src="/assets/images/Team_ForV/2-3.png" alt="image" width="80%" height="80%" class="align-center" /><br />
직접 목소리를 학습시켜 TTS를 만드는 서비스를 새로운 엔터테인먼트 사업의 한 홍보수단으로 활용해본다면 어떨까하는 생각이 들어서 이 프로젝트를 시작하게 되었다.</p>

<h2 id="프로젝트-목적">프로젝트 목적</h2>
<p>‘팀원들의 목소리로 TTS 서비스를 제공하는 프로젝트’를 아티스트 홍보 페이지의 한 예시로 제시한다.</p>

<h2 id="세부-구성">세부 구성</h2>
<p>프론트엔드 담당해주신 분들이 디자인을 예쁘게 해주셨다.<br />
별도 설명이 없어도 사용자가 서비스를 쉽게 이용할 수 있도록 최대한 직관적이고, 심플하게 디자인했다.<br />
또, 사용자의 환경에 따라 같은 화면을 보여주기 위해 모든 페이지는 반응형웹으로 디자인했다.</p>

<ul>
  <li>
    <h3 id="main-page">Main page</h3>
    <p><img src="/assets/images/Team_ForV/2-4.png" alt="image" width="80%" height="80%" /></p>
  </li>
  <li>
    <h3 id="detail-page">Detail page</h3>
    <p><img src="/assets/images/Team_ForV/2-5.png" alt="image" width="80%" height="80%" /></p>
  </li>
  <li>
    <h3 id="make-tts-page">Make-TTS page</h3>
    <p><img src="/assets/images/Team_ForV/2-6.png" alt="image" width="80%" height="80%" /></p>
  </li>
  <li>
    <h3 id="responsive-web">Responsive web</h3>
    <p><img width="48%" height="48%" src="https://user-images.githubusercontent.com/98803599/183294274-d0c7a378-536c-4fe6-8522-1e82d89f9294.gif" />
  <img width="48%" height="48%" src="https://user-images.githubusercontent.com/98803599/183294585-a59fa2c3-b9c6-463c-b211-0042fd356c9a.gif" /></p>
  </li>
</ul>

<h2 id="demo">Demo</h2>

<!-- Courtesy of embedresponsively.com //-->
<div class="responsive-video-container">

  <iframe src="https://www.youtube-nocookie.com/embed/HNyv6iGliqA" frameborder="0" allowfullscreen=""></iframe>

</div>

<h2 id="앞으로의-포스팅-예고">앞으로의 포스팅 예고!</h2>
<p>가볍게 프로젝트의 아키텍처를 보며 어떤 기술들을 왜 적용했는지, 그리고 그 특징들이 무엇인지 살펴보고<br />
내가 맡은 백엔드와 AI 파트 위주로 보면서 그동안 겪었던 시행착오들과 코드들을 정리해보고자 한다!</p>

<h2 id="appendix--reference">Appendix &amp; Reference</h2>
<p><a href="https://github.com/2022SiliconValley-Team-ForV">https://github.com/2022SiliconValley-Team-ForV</a> [Team_ForV 프로젝트 깃허브 링크]<br /></p>

<p><a href="https://sce-tts.github.io/#/v2/index">https://sce-tts.github.io/#/v2/index</a> [내 목소리로 TTS 만들기 프로젝트]
<a href="https://deview.kr/2017/schedule/182">https://deview.kr/2017/schedule/182</a> [2017년 ‘책 읽어주는 딥러닝’ - 데브시스터즈 / 김태훈님]
<a href="https://deview.kr/2018/schedule/247">https://deview.kr/2018/schedule/247</a> [2018년 ‘누구나 만드는 내 목소리 합성기’ - 네이버 / 이봉준님]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="Info" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[SiDoli] 프로젝트 소개</title><link href="http://localhost:4000/sidoli/SiDoli01/" rel="alternate" type="text/html" title="[SiDoli] 프로젝트 소개" /><published>2022-06-29T00:00:00+09:00</published><updated>2022-07-01T00:00:00+09:00</updated><id>http://localhost:4000/sidoli/SiDoli01</id><content type="html" xml:base="http://localhost:4000/sidoli/SiDoli01/"><![CDATA[<h2 id="0-들어가기에-앞서">0. 들어가기에 앞서</h2>
<p>학교에서 ‘안드로이드 프로그래밍’이라는 과목을 수강하면서 팀 프로젝트를 진행하게 되었다.<br />
시흥시와 협력하는 ce 교과로써 시흥시에 도움이 될 만한 어플을 고안해서 제안해보는 과제였다.<br />
우리 팀은 시흥시가 뭔가 위험하다는 이미지가 있는 것 같고, 이를 개선하기 위해 ‘시흥시 안전지도’라는 컨셉으로 어플리케이션을 개발해보자 라는 결론에 이르렀다.</p>

<p>그리고 현재 기능적으로는 어플이 완성된 상태이고, 자잘한 버그와 디자인만 손 보면 구글 플레이스토어에 업로드하여 서비스해볼 생각이다. 그에 앞서 개발하면서 배웠던 점들에 대해서 정리해보는 시간을 갖고자 한다.</p>

<h2 id="1-제안서-소개">1. 제안서 소개</h2>
<h3 id="--주제-선정-및-필요성">- 주제 선정 및 필요성</h3>
<p><img src="/assets/images/SiDoli/a.png" alt="image" class="align-center" width="90%" height="90%" /></p>

<p><img src="/assets/images/SiDoli/b.png" alt="image" class="align-center" width="90%" height="90%" /></p>

<p>학교가 시흥에 있다는 말을 들었을 때 주변의 반응이 ‘거기 위험하지 않아?’라든지, ‘공단 있는 곳 아니야?’라든지 다소 위험하다는 인식이 많았다. 실제로 학교 근처에 공단이 위치해있다보니 가로등이 없는 거리도 꽤 있고, 어두운 거리들도 많아서 좀 더 밝은 귀갓길을 결정하는데 도움이 될 수 있는 서비스가 있다면 시흥시에 대한 인식도 개선될 수 있을 것이다.</p>

<h3 id="--참고한-유사-서비스">- 참고한 유사 서비스</h3>
<ol>
  <li>
    <p>화순군 스마트 조명 지킴이
<img src="/assets/images/SiDoli/c.png" alt="image" class="align-center" /></p>

    <p>보안등 데이터를 불러와서 지도에 보여줄 수 있다면 사용자로 하여금 좀 더 안전한 경로를 결정할 때 도움이 될 것 같다는 생각에 참고한 어플리케이션이다.</p>
  </li>
  <li>
    <p>안심해
<img src="/assets/images/SiDoli/d.png" alt="image" /></p>

    <p>전반적인 기능들과 컨셉이 우리 팀이 구현하고자 하는 어플과 상당히 유사하여 참고하게 된 어플이다.</p>
  </li>
</ol>

<h3 id="--차별성">- 차별성</h3>
<p><img src="/assets/images/SiDoli/e.png" alt="image" class="align-center" width="90%" height="90%" /></p>

<p>그렇다면, 시흥시의 데이터를 이용해서 시흥시만의 특화된 서비스를 만들어보자!!</p>

<h2 id="2-sidoli-어플리케이션-소개">2. SiDoli 어플리케이션 소개</h2>
<p><img src="/assets/images/SiDoli/f.png" alt="image" class="align-center" width="90%" height="90%" /></p>

<!-- Courtesy of embedresponsively.com //-->
<div class="responsive-video-container">

  <iframe src="https://www.youtube-nocookie.com/embed/tgOPO2Vbt5M" frameborder="0" allowfullscreen=""></iframe>

</div>

<ul>
  <li>기본 기능(지도의 기본적인 기능)
    <ol>
      <li>Map View: <code class="language-plaintext highlighter-rouge">구글맵 api</code>를 이용하여 지도를 보여준다.</li>
      <li>현 위치 조회: <code class="language-plaintext highlighter-rouge">GPS</code>를 이용하여 현 위치를 조회하고 지도에 표시해준다.</li>
    </ol>
  </li>
  <li>특화 기능
    <ol>
      <li>보안등 정보: 시흥시에 설치된 보안등의 위치를 지도에 보여준다.</li>
      <li>안심벨: 긴급 상황에 대비해 주변에 위험을 알릴 수 있도록 알림음이 울리도록 구현했다.</li>
      <li>긴급신고: 인근 경찰서에 긴급신고하는 기능이다.</li>
      <li>경찰서 안내: 현위치부터 시흥시에 있는 경찰서까지의 경로를 안내해준다.</li>
    </ol>
  </li>
</ul>

<h2 id="3-앞으로의-게시글-예고">3. 앞으로의 게시글 예고</h2>
<p>프로젝트를 진행하면서 새로 배웠던 것들을 하나씩 정리해보자. 주로 코틀린 관련 내용들을 포스팅할 예정이고, 대략 이런 게시글들이 있지 않을까..</p>

<ol>
  <li>구글 맵 api 초기 설정</li>
  <li>공공 데이터 포털에서 필요한 데이터 이용하기</li>
  <li>json parsing</li>
  <li>기타 사항(Kotlin)
    <ul>
      <li>db 파일 내부 저장소로 옮기기</li>
      <li>마커와 클러스트링</li>
      <li>위치 정보와 길찾기 api</li>
      <li>기타 잡다한 기능(ringtone, uri)</li>
    </ul>
  </li>
</ol>]]></content><author><name>hi~ June!!</name></author><category term="SiDoli" /><category term="Info" /><summary type="html"><![CDATA[Grean Apple Bean의 프로젝트]]></summary></entry><entry><title type="html">[안드로이드 기초] Chapter 05 - 레이아웃 익히기</title><link href="http://localhost:4000/android/Chapter05/" rel="alternate" type="text/html" title="[안드로이드 기초] Chapter 05 - 레이아웃 익히기" /><published>2022-04-11T00:00:00+09:00</published><updated>2022-04-11T00:00:00+09:00</updated><id>http://localhost:4000/android/Chapter05</id><content type="html" xml:base="http://localhost:4000/android/Chapter05/"><![CDATA[<h2 id="1-레이아웃의-개요">1. 레이아웃의 개요</h2>
<ul>
  <li>레이아웃의 기본 개념<br />
레이아웃은 레이아웃 안에 존재하는 위젯을 배치하게 해준다. 다음과 같은 속성들이 있다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">orientation</code>: 레이아웃 안에 배치할 위젯의 수직 또는 수평 방향을 설정</li>
      <li><code class="language-plaintext highlighter-rouge">gravity</code>: 레이아웃 안에 배치할 위젯의 정렬 방향을 좌측, 우측, 중앙 등으로 설정</li>
      <li><code class="language-plaintext highlighter-rouge">padding</code>: 레이아웃 안에 배치할 위젯의 여백을 설정</li>
      <li><code class="language-plaintext highlighter-rouge">layout_weight</code>: 레이아웃이 전체 화면에서 차지하는 공간의 가중값을 설정</li>
      <li><code class="language-plaintext highlighter-rouge">baselineAligned</code>: 레이아웃 안에 배치할 위젯을 보기 좋게 정렬함
<br /><br /></li>
    </ul>
  </li>
  <li>레이아웃의 종류<br />
<img src="/assets/images/Android/%5BAndroid-Basic%5DCh05_1.png" alt="Image" />
    <ul>
      <li><code class="language-plaintext highlighter-rouge">Linear Layout</code>: 레이아웃의 왼쪽 위부터 아래쪽 또는 오른쪽으로 차례로 배치</li>
      <li><code class="language-plaintext highlighter-rouge">Relative Layout</code>: 위젯 자신이 속한 레이아웃의 상하좌우 위치를 지정하여 배치 or 다른 위젯으로부터 상대적인 위치를 지정함</li>
      <li><code class="language-plaintext highlighter-rouge">Table Layout</code>: 행과 열의 개수를 지정한 테이블 형태로 위젯을 배열한다.</li>
      <li><code class="language-plaintext highlighter-rouge">Grid Layout</code>: 테이블 레이아웃과 비슷하지만 행 또는 열을 확장하여 다양하게 배치할 때 더 편리하다.</li>
      <li><code class="language-plaintext highlighter-rouge">Frame Layout</code>: 위젯을 왼쪽 위에 일률적으로 겹쳐서 배치하여 중복되어 보이는 효과를 낼 수 있다. 여러 개의 위젯을 배치한 후 상황에 따라서 필요한 위젯을 보이는 방식에 주로 활용한다.</li>
    </ul>
  </li>
</ul>

<h2 id="2-리니어레이아웃">2. 리니어레이아웃</h2>

<h2 id="3-기타-레이아웃">3. 기타 레이아웃</h2>]]></content><author><name>hi~ June!!</name></author><category term="Android" /><category term="Kotlin" /><summary type="html"><![CDATA[Layout에 대해 알아보자]]></summary></entry><entry><title type="html">[스프링 입문] Section 02 - 스프링 웹 개발 기초</title><link href="http://localhost:4000/spring/Section02/" rel="alternate" type="text/html" title="[스프링 입문] Section 02 - 스프링 웹 개발 기초" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-07T00:00:00+09:00</updated><id>http://localhost:4000/spring/Section02</id><content type="html" xml:base="http://localhost:4000/spring/Section02/"><![CDATA[<h2 id="web을-개발하는-3가지-방법">Web을 개발하는 3가지 방법</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">정적 컨텐츠</code>: 파일을 그냥 웹 브라우저에 내려주는 것</li>
  <li><code class="language-plaintext highlighter-rouge">MVC와 템플릿 엔진</code>: html, PHP, JSP 같은 파일을 서버에서 프로그래밍해서 동적으로 바꾼 후 내려주는 것</li>
  <li><code class="language-plaintext highlighter-rouge">API</code>: 예를 들자면, 만약 Android나 ios같은 Client랑 개발해야할 떄, ‘jason’이라는 포멧으로 내려주는 것</li>
</ul>

<h2 id="1-정적-컨텐츠">1. 정적 컨텐츠</h2>
<p><img src="/assets/images/section2_1.png" alt="Image" /></p>

<p>1st. 웹 브라우저가 요청을 서버에 넘겨줌<br />
2nd. controller 쪽에서 관련 컨트롤러가 있는지 찾아봄<br />
3rd. 관련 컨트롤러가 없기 떄문에 resources에서 파일을 찾아봄<br />
4th. 별도 변환 과정 없이 그냥 반환해 줌</p>

<h2 id="2-mvc와-템플릿-엔진">2. MVC와 템플릿 엔진</h2>
<p>MVC: <code class="language-plaintext highlighter-rouge">Model</code>, <code class="language-plaintext highlighter-rouge">View</code>, <code class="language-plaintext highlighter-rouge">Controller</code>의 앞 자만 따서 부른다.<br />
<code class="language-plaintext highlighter-rouge">View</code>는 화면과 관련된 일만 하도록, <code class="language-plaintext highlighter-rouge">Controller</code>는 비지니스 로직과 관련된 일만 하도록 <strong><em><span style="color:gold">‘분리’</span></em></strong> 한다는 것이 핵심이다.</p>

<p><img src="/assets/images/section2_2.png" alt="Image" /></p>

<p>1st. 웹 브라우저에서 요청이 들어오면<br />
2nd. 해당 <code class="language-plaintext highlighter-rouge">Controller</code>가 mapping 되어있는 메소드를 찾아서 실행 후<br />
3rd. 반환된 값을 통해 <code class="language-plaintext highlighter-rouge">viewResolver</code>가 해당하는 <code class="language-plaintext highlighter-rouge">view</code>를 찾아주고 템플릿 엔진에 연결시켜줌<br />
4th. 템플릿 엔진은 해당 파일을 렌더링 후 웹 브라우저에 반환해준다.</p>

<h2 id="3-api">3. API</h2>
<p><img src="/assets/images/section2_3.png" alt="Image" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ResponseBody</code>를 사용하면
    <ul>
      <li>HTTP의 BODY에 문자 내용을 직접 반환한다.</li>
      <li><code class="language-plaintext highlighter-rouge">viewResolver</code>대신 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>가 동작하는데(spring에 셋팅되어있음)
        <ul>
          <li>기본 문자 처리의 경우: <code class="language-plaintext highlighter-rouge">StringHttpMessageConverter</code></li>
          <li>기본 객체 처리의 경우: <code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code> &lt;-</li>
          <li>기타 등등의 경우에 맞는 여러 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>가 기본으로 등록되어있음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>-&gt; <code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code>: 객체를 jason으로 바꿔주는 라이브러리들 중 하나이다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Spring" /><category term="Java" /><summary type="html"><![CDATA[Web을 개발하는 3가지 방법에 대해 알아보자]]></summary></entry></feed>