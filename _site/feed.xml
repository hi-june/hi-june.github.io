<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-11-24T23:36:08+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 19 - 자바의 메모리 모델과 Object 클래스</title><link href="http://localhost:4000/java%20lang/Chap19/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 19 - 자바의 메모리 모델과 Object 클래스" /><published>2022-11-24T00:00:00+09:00</published><updated>2022-11-24T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap19</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap19/"><![CDATA[<h2 id="19-1-자바-가상머신의-메모리-모델">19-1. 자바 가상머신의 메모리 모델</h2>
<h3 id="--가상머신은-운영체제-위에서-동작합니다">- <u>가상머신은 운영체제 위에서 동작합니다.</u></h3>
<blockquote>
  <p>자바 가상머신은 운영체제 위에서 실행되는 하나의 프로그램이다.<br />
자바 프로그램은 자바 가상머신에서 실행되는 프로그램이다.</p>
</blockquote>

<p>프로그램의 실행에 필요한 메모리 공간을 가리켜 ‘메인 메모리(Main Memory)’라고 한다.<br />
그리고 이 메모리의 효율적인 사용을 위해서 운영체제가 응용프로그램에게 메모리를 할당해준다.<br />
<br />
즉, 자바 가상머신은 운영체제가 할당해 주는 메모리 공간을 기반으로 스스로를 실행하면서 더불어 자바 응용 프로그램의 실행도 돕는다.</p>

<h3 id="--자바-가상머신의-메모리-살림살이">- <u>자바 가상머신의 메모리 살림살이</u></h3>
<p>가상머신은 운영체제로부터 할당받은 메모리 공간의 효율적인 사용을 고민해야 한다.<br />
그리고 이 저장공간의 효율적인 사용을 위해 ‘수납장’ 처럼 메모리 공간을 나누고 데이터를 특성에 따라 구분해서 저장한다.<br />
<img src="/assets/images/java-lang/19-1.png" alt="image" width="50%" height="50%" /><br /></p>

<p>각각의 메모리 영역에는 다음의 데이터들을 저장한다.</p>

<ul>
  <li>메소드 영역(Method Area): 메소드의 바이트코드, static 변수</li>
  <li>스택 영역(Stack Area): 지역변수, 매개변수</li>
  <li>힙 영역(Heap Area): 인스턴스</li>
</ul>

<h3 id="--메소드-영역method-area">- <u>메소드 영역(Method Area)</u></h3>
<blockquote>
  <p>‘프로그램이 종료될 때까지’ 유지되어야 할 정보가 저장된다.
바이트 코드(Byte Code): 소스파일을 컴파일할 때 생성되는, 자바 가상머신에 의해 실행이 가능한 코드</p>
</blockquote>

<p><img src="/assets/images/java-lang/19-2.png" alt="image" width="50%" height="50%" /><br /></p>

<p>바이트 코드도 메모리 공간에 존재해야 실행이 가능하다.<br />
인스턴스의 생성 및 클래스 변수의 접근을 위해서는 먼저 해당 클래스의 바이트코드가 메모리 공간에 로딩되어야 한다.<br />
즉, 메소드 영역은 특정 클래스의 정보가 메모리 공간에 올려질 때 채워지는 영역이다.</p>

<h3 id="--스택-영역stack-area">- <u>스택 영역(Stack Area)</u></h3>
<p>스택은 지역 변수와 매개변수가 저장되는 공간이다. 이 둘은 다음과 같은 공통점이 있다.</p>
<blockquote>
  <p>중괄호로 구분되는 지역 내에서만 유효한 변수들이다.</p>
</blockquote>

<p><img src="/assets/images/java-lang/19-3.png" alt="image" width="70%" height="70%" /><br />
<img src="/assets/images/java-lang/19-4.png" alt="image" width="70%" height="70%" /><br />
<img src="/assets/images/java-lang/19-5.png" alt="image" width="70%" height="70%" /><br /></p>

<p>즉, 중괄호 내에 할당된 이후에 해당 중괄호를 벗어나면 바로 소멸되는 특성의 데이터 저장을 위한 영역이<br />
‘스택’이다.</p>

<h3 id="--힙-영역heap-area">- <u>힙 영역(Heap Area)</u></h3>
<p>인스턴스를 스택이 아닌 힙이라는 별도의 영역에 할당하는 이유는 무엇일까?</p>
<blockquote>
  <p>인스턴스의 소멸 시점과 소멸 방법이 지역변수와 다르기 때문이다.</p>
</blockquote>

<p><img src="/assets/images/java-lang/19-6.png" alt="image" width="80%" height="80%" /><br /></p>

<h3 id="--자바-가상머신의-인스턴스-소멸시기">- <u>자바 가상머신의 인스턴스 소멸시기</u></h3>
<p>인스턴스의 소멸시기는 더 이상 접근할 수 없어지는 시기,<br />
즉 대상 인스턴스를 참조하는 게 더 이상 없을 때이다.<br />
<img src="/assets/images/java-lang/19-7.png" alt="image" width="50%" height="50%" /><br /></p>

<p>이러한 인스턴스의 소멸 방식을 가리켜 ‘가비지 컬렉션(Garbage Collection)이라고 한다.<br />
정리하자면, 힙 영역은 가상머신에 의한 가비지 컬렉션이 일어나는 메모리 공간이다.<br />
즉 스택 영역과 힙 영역을 구분하여 관리하는 이유는 가비지 컬렉션 때문이다.</p>

<h2 id="19-2-object-클래스">19-2. Object 클래스</h2>
<h3 id="--">- <u></u></h3>
<h3 id="---1">- <u></u></h3>
<h3 id="---2">- <u></u></h3>
<h3 id="---3">- <u></u></h3>
<h3 id="---4">- <u></u></h3>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 18 - 예외처리(Exception Handling)</title><link href="http://localhost:4000/java%20lang/Chap18/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 18 - 예외처리(Exception Handling)" /><published>2022-11-05T00:00:00+09:00</published><updated>2022-11-05T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap18</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap18/"><![CDATA[<h2 id="18-1-자바-예외처리의-기본">18-1. 자바 예외처리의 기본</h2>
<h3 id="--자바에서-말하는-예외">- <u>자바에서 말하는 예외</u></h3>
<p>프로그램 실행 중에 발생하는 ‘예외적인 상황’을 줄여서 ‘예외’라 한다.<br />
즉, 단순한 문법 오류가 아닌 실행 중간에 발생하는 ‘정상적이지 않은 상황’을 뜻한다.</p>

<p>가상머신은 예외가 발생하면 그 내용을 간단히 출력하고 프로그램을 종료해버린다.<br />
가상머신은 예외의 원인을 알지만 개발자가 원하는 예외의 처리 방식까지는 알지 못하기 때문에<br />
이 예외에 대해 처리하는 부분을 만들어주면 된다.</p>

<h3 id="--예외의-처리를-위한-try--catch">- <u>예외의 처리를 위한 try ~ catch</u></h3>
<p>자바는 예외 상황별로 그 상황을 알리기 위한 클래스를 정의하고 있다.<br />
그 클래스를 ‘예외 클래스’라 한다.</p>

<p>예외를 처리할 때는 try ~ catch문을 사용하는데, 구조는 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// try 영역에서 발생한 예외 상황을 catch 영역에서 처리한다.</span>

<span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span> <span class="n">관찰</span> <span class="n">영역</span> <span class="o">...</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span> <span class="n">처리</span> <span class="n">영역</span> <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>try 영역의 실행 중간에 예외 상황이 만들어지고</li>
  <li>이로 인해 가상머신이 ArithmeticException 인스턴스를 생성하면</li>
  <li>이 인스턴스는 메소드를 호출하듯이 catch 구문의 매개변수 e에 전달이 된다.</li>
</ol>

<h3 id="--둘-이상의-예외를-처리하기-위한-구성">- <u>둘 이상의 예외를 처리하기 위한 구성</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 각 예외마다 처리 과정이 다른 경우</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span> <span class="n">관찰</span> <span class="n">영역</span> <span class="o">...</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">ArithmeticException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Exception 1 Occur!"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">InputMIsmatchException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">pritntln</span><span class="o">(</span><span class="s">"Exception 2 Occur!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 각 예외에 대해 처리 과정이 같은 경우</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span> <span class="n">관찰</span> <span class="n">영역</span> <span class="o">...</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">ArithmeticException</span> <span class="o">|</span> <span class="nc">InputMIsmatchException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Exception Occur!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--throwable-클래스와-예외처리의-책임-전가">- <u>Throwable 클래스와 예외처리의 책임 전가</u></h3>
<p><img src="/assets/images/java-lang/18-1.png" alt="image" width="80%" height="80%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExceptionMessage</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">md1</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">md2</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">md2</span><span class="o">(</span><span class="kt">int</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">/</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">md1</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Good bye~~!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위 예제의 메소드 호출 흐름은 다음과 같다.<br />
main -&gt; md1 -&gt; md2</p>

<p>예외가 발생하고 해당 예외를 처리하지 않으면<br />
발생한 메소드를 호출한 메소드에 그 책임이 넘어간다.</p>

<p><img src="/assets/images/java-lang/18-2.png" alt="image" width="80%" height="80%" /><br /></p>

<p>즉, 책임이 넘어가는 과정은<br />
md2 -&gt; md1 -&gt; main<br />
이렇게 된다.</p>

<h2 id="18-2-예외처리에-대한-나머지-설명들">18-2. 예외처리에 대한 나머지 설명들</h2>
<h3 id="--예외-클래스의-구분">- <u>예외 클래스의 구분</u></h3>
<p><img src="/assets/images/java-lang/18-3.png" alt="image" width="90%" height="90%" /><br /></p>

<p>예외라는 객체는 최상위 인터페이스로 Throwable이라는 인터페이스를 가진다.<br />
이 Throwable 인터페이스를 error와 exception 인터페이스가 구현을 하고, 다시 runtimeException이 exception 인터페이스를 구현한다.</p>

<ul>
  <li>Error<br />
  Error 클래스를 상속하는 클래스들을 보면 VirtualMachineError나 IOError 등등, JVM에서 발생한 오류이거나 입출력 관련하여 코드 수준 복구가 불가능한 오류 같이 사용자 애플리케이션이 제어할 수 있는 예외가 아니다. 말 그대로 ‘에러’인 것이다.
    <blockquote>
      <p>즉 Error 클래스를 상속하는 예외는 처리의 대상이 아니다.</p>
    </blockquote>

    <p>따라서 이런 유형의 예외가 발생하면 그냥 프로그램이 종료되도록 놔두고 이후에 원인을 파악하는 과정이 이어져야 한다.</p>
  </li>
  <li>
    <p>Exception<br />
  예상할 수 있는 예외 또는 프로그래머가 만드는 예외 이다.</p>

    <p><code class="language-plaintext highlighter-rouge">Checked exception</code>은 개발자가 사용하는 라이브러리, 코드 등에서 new 생성자를 이용해 만들어져, 해당 모듈을 사용하는 객체에게 여기서 예외가 발생할 수 있으니 throws 키워드를 이용하여 상위 caller에게 예외를 전달하든, 확인해서 처리하든지 하라는 뜻이다.</p>

    <p><code class="language-plaintext highlighter-rouge">Unchecked exception</code>은 개발자가 사용하는 라이브러리, 코드 등에서 만들어졌지만, 예외처리를 해야 할 상황은 아닌 경우를 말한다. NegativeArraySizeException이나 ArrayStoreException 처럼 코드를 수정해야 할 상황이지 예외처리할 상황은 아닌 것이다.</p>

    <blockquote>
      <p>Unchecked exception 또한 처리의 대상이 아니다.</p>
    </blockquote>
  </li>
</ul>

<h3 id="--개발자가-정의하는-예외">- <u>개발자가 정의하는 예외</u></h3>
<p>개발자가 직접 예외 클래스를 정의하고 이를 기반으로 특정 상황에서 예외가 발생하도록 할 수도 있다.<br />
핵심은 Exception을 상속하는데 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ReadAgeException</span> <span class="kd">extends</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">ReadAgeException</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="s">"유효하지 않은 나이가 입력되었습니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyExceptionClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"나이 입력: "</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">readAge</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"입력된 나이: %d \n"</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ReadAgeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">readAge</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">ReadAgeException</span> <span class="o">{</span>   <span class="c1">// 발생시킨 예외를 자신을 호출한 메소드에 던짐</span>
        <span class="nc">Scanner</span> <span class="n">kb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">kb</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ReadAgeException</span><span class="o">();</span>   <span class="c1">// 예외를 발생시킴</span>
        <span class="o">}</span>

        <span class="k">return</span>  <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/18-4.png" alt="image" width="50%" height="50%" /><br /></p>

<h3 id="--finally-구문">- <u>finally 구문</u></h3>
<p>try ~ catch문은 하나의 문장이므로 try문 홀로 존재할 수 없다.<br />
그런데 try문에 이어서 다음과 같이 finally 구문을 둘 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span> <span class="c1">// 코드의 실행이 try 안으로 진입하면, 무조견 실행된다.</span>

<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span> <span class="c1">// 코드의 실행이 try 안으로 진입하면, 무조견 실행된다.</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br />
그렇다면 finally 구문은 어떻게 유용하게 사용할 수 있을까?<br />
다음 코드를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Paths</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FinallyCase</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Path</span> <span class="n">file</span> <span class="o">=</span> <span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"/Users/june/Study/java-lang"</span><span class="o">);</span>
        <span class="nc">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">writer</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">newBufferedWriter</span><span class="o">(</span><span class="n">file</span><span class="o">);</span> <span class="c1">// IOException 발생 가능</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="sc">'A'</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="sc">'Z'</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span> <span class="c1">// 예외가 발생하든 안 하든 무조건 실행해야 하는 구문</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">writer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// 파일을 열었으면 닫아주어야 함</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// close 하는 중에도 IOException 발생 가능하기 때문</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>파일 버퍼를 열었다면 예외가 발생하든 안 하든 무조건 close를 실행하여 닫아야 한다.<br />
따라서, finally에 close메소드를 추가하여 무조건 실행이 되도록 만들어 주었다.<br />
다만, close하는 동안에도 IOException이 발생할 수 있기 때문에 불가피하게 try ~ catch로 잡아주게 되었다.<br />
하지만 코드 구성이 깔끔하지 않다는 아쉬움이 남는다.<br />
이를 해결하기 위해서 try-with-resources라는 문법이 등장했다.</p>

<h3 id="--try-with-resources-구문">- <u>try-with-resources 구문</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Paths</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TryWithResource</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Path</span> <span class="n">file</span> <span class="o">=</span> <span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"/Users/june/Study/java-lang"</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">newBufferedWriter</span><span class="o">(</span><span class="n">file</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="sc">'A'</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="sc">'Z'</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음과 같이 try문 옆에 괄호 안에 종료의 과정을 필요로 하는 리소스를 생성할 수 있다.<br />
그리고 이 리소스는 try-with-resources문을 빠져나오면서 자동으로 종료된다.</p>

<p>‘자동으로 종료되어야 할 리소스’ 관련 클래스는 다음 인터페이스를 구현해야한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">AutoCloseable</span>
</code></pre></div></div>

<p>그리고 이 인터페이스에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span>
</code></pre></div></div>

<p>즉, try-with-resources문에서 호출하는 메소드는 AutoCloseable 인터페이스의 close 메소드이다. 따라서 이외의 메소드를 기대하는 것은 어렵다는 것을 염두해두자.</p>

<p><br />
(참고) 예외처리는 성능의 저하로 이어진다.<br />
try 구문 안에 위치한 코드는 try 구문 밖에 위치한 코드에 비해 실행 속도가 느리다. 따라서 특별히 예외처리가 필요한 부분만 골라서 사용하도록 해야한다.</p>

<h2 id="reference">Reference</h2>
<p><a href="https://brunch.co.kr/@kd4/5">https://brunch.co.kr/@kd4/5</a> [자바의 예외처리]</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 17 - 인터페이스의 기본과 그 의미</title><link href="http://localhost:4000/java%20lang/Chap17/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 17 - 인터페이스의 기본과 그 의미" /><published>2022-11-02T00:00:00+09:00</published><updated>2022-11-02T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap17</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap17/"><![CDATA[<h2 id="17-1-인터페이스의-기본과-그-의미">17-1. 인터페이스의 기본과 그 의미</h2>
<h3 id="--추상-메소드만-담고-있는-인터페이스">- <u>추상 메소드만 담고 있는 인터페이스</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span>  <span class="c1">// 추상 메소드</span>
<span class="o">}</span>
</code></pre></div></div>
<p>기본 골격은 클래스와 동일하다.<br />
interface라는 선언이 붙고, 추상 메소드(메소드의 몸체가 비어 있는 메소드)로 이루어져있다.<br />
인스턴스 생성이 불가능하고, 다른 클래스에 의해서 구현(implements)된다.<br />
<br /></p>

<p>클래스의 인터페이스 구현에는 다음과 같은 특징이 있다.</p>
<ol>
  <li>구현할 인터페이스를 명시할 때 키워드 implements를 사용한다.</li>
  <li>다중 구현이 가능하다.</li>
  <li>상속과 구현은 동시에 가능하다.<br />
<br /></li>
</ol>

<p><img src="/assets/images/java-lang/17-1.png" alt="image" width="80%" height="80%" /><br /></p>

<p>또, 인터페이스 관련하여 다음 두 가지 특징도 있다.</p>
<ol>
  <li>인터페이스의 형을 대상으로 참조변수의 선언이 가능하다.</li>
  <li>인터페이스의 추상 메소드와 이를 구현하는 메소드 사이에 오버라이딩 관계가 성립한다.</li>
</ol>

<h3 id="--인터페이스의-본질적-의미">- <u>인터페이스의 본질적 의미</u></h3>
<blockquote>
  <p>해당 class의 사용방법을 명시한 내용</p>
</blockquote>

<p>다음의 예시를 보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>   <span class="c1">// MS가 정의하고 제공한 인터페이스</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SPrinterDriver</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From Samsung printer"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">LPrinterDriver</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From LG printer"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrinterDriver</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">myDoc</span> <span class="o">=</span> <span class="s">"This is a report about ..."</span><span class="o">;</span>
        <span class="nc">Printable</span> <span class="n">printer</span><span class="o">;</span>

        <span class="c1">// 삼성 프린터로 출력</span>
        <span class="n">printer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SPrinterDriver</span><span class="o">();</span>
        <span class="n">printer</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// LG 프린터로 출력</span>
        <span class="n">printer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LPrinterDriver</span><span class="o">();</span>
        <span class="n">printer</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>MS사는 인터페이스 Printable을 하나 만들어서 프린터 업체에게 제공하고 있다.<br />
MS사는 자신의 인터페이스를 구현할 클래스의 이름만 알면 될 뿐 내부적으로 구현이 어떻게 이뤄지는지는 알 필요가 없다.<br />
이렇게 인터페이스를 둠으로써 MS사의 윈도우는 삼성과 LG의 프린터를 대상으로 출력을 진행할 수 있게 된다.</p>

<h2 id="17-2-인터페이스의-문법-구성">17-2. 인터페이스의 문법 구성</h2>
<p>인터페이스는 많은 특성이 클래스와 유사하다.</p>
<ol>
  <li>인터페이스에 존재할 수 있는 메소드: 추상 메소드, 디폴트 메소드, static 메소드</li>
  <li>인터페이스 간 상속도 가능함</li>
  <li>인터페이스의 형(Type) 이름을 대상으로 instanceof 연산도 가능</li>
</ol>

<h3 id="--인터페이스에-선언되는-메소드와-변수">- <u>인터페이스에 선언되는 메소드와 변수</u></h3>
<p>인터페이스에 선언되는 메소드와 변수에는 다음과 같은 특징이 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="no">PAPER_WIDTH</span> <span class="o">=</span> <span class="mi">70</span><span class="o">;</span>
  <span class="kt">int</span> <span class="no">PAPER_HEIGHT</span> <span class="o">=</span> <span class="mi">120</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>메소드
    <ul>
      <li>인터페이스의 모든 메소드는 public이 선언된 것으로 간주한다.</li>
      <li>인터페이스를 구현하는 클래스는 인터페이스에 존재하는 모든 추상 메소드를 구현해야 한다.</li>
    </ul>
  </li>
  <li>변수
    <ul>
      <li>반드시 선언과 동시에 값으로 초기화를 해야 한다.</li>
      <li>모든 변수는 public, static, final이 선언된 것으로 간주한다.</li>
    </ul>
  </li>
</ul>

<h3 id="--인터페이스-간-상속">- <u>인터페이스 간 상속</u></h3>
<p>위의 예시 상황에서 컬러 프린터가 추가되었다고 가정해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span> <span class="c1">// 흑백 출력</span>
    <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span> <span class="c1">// 컬러 출력</span>
<span class="o">}</span>
</code></pre></div></div>
<p>컬러 프린터의 추가 때문에 기존의 Printable 인터페이스에 printCMYK 메소드를 추가하면<br />
-&gt; 이 인터페이스를 기반으로 개발된 드라이버(클래스)를 모두 수정해야 한다!!</p>

<p><br />
따라서 이러한 문제를 해결하기 위해 인터페이스 간의 상속을 지원한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span> <span class="c1">// public은 생략되어있으니까 주의하자!</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">ColorPrintable</span> <span class="kd">extends</span> <span class="nc">Printable</span> <span class="o">{</span>    <span class="c1">// Printable을 상속하는 인터페이스</span>
    <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span> <span class="c1">// public은 생략되어있으니까 주의하자!</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Prn909Drv</span> <span class="kd">implements</span> <span class="nc">ColorPrintable</span> <span class="o">{</span> <span class="c1">// ColorPrintable 뿐만 아니라 Printable에 있는 메소드도 구현해야 함</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">// Printable에 있는 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-909 black &amp; white ver"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">// ColorPrintable에 있는 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-909 CMYK ver"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrintDriver</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">mydoc</span> <span class="o">=</span> <span class="s">"This is a report about ..."</span><span class="o">;</span>
        <span class="nc">ColorPrintable</span> <span class="n">printer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Prn909Drv</span><span class="o">();</span>

        <span class="n">printer</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">mydoc</span><span class="o">);</span> <span class="c1">// 흑백 출력</span>
        <span class="n">printer</span><span class="o">.</span><span class="na">printCMYK</span><span class="o">(</span><span class="n">mydoc</span><span class="o">);</span> <span class="c1">// 컬러 출력</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 인터페이스 간 상속을 통해 기존의 사용 중인 드라이버(클래스)를 수정할 필요가 없게 되었다!</p>

<h3 id="--인터페이스의-디폴트-메소드">- <u>인터페이스의 디폴트 메소드</u></h3>
<p>앞선 상황에서는 ‘인터페이스 간의 상속’을 통해 추가할 메소드가 있을 때 이를 구현하고 있는 클래스들에 대한 문제를 해결했다.<br />
하지만, 만약 이미 수십 개의 인터페이스가 있는 상황이라면 어떻게 해야할까?<br />
상속을 통해 문제를 해결하려면 필연적으로 인터페이스의 수가 늘어난다.<br />
그리고 인터페이스의 수가 늘어나는 것은 그 자체로 프로그램 개발에 불편을 초래하는 일이다.<br />
<br /></p>

<p>이런 상황을 해결하기 위해 인터페이스의 ‘디폴트 메소드(Default Method)’가 등장했다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span>
    <span class="k">default</span> <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{}</span>   <span class="c1">// default 메소드 추가. 접근수준지정자 아님!</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Prn731Drv</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>  <span class="c1">// 최초 출시한 프린터</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-731 printer"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Prn909Drv</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>  <span class="c1">// 그 이후 출시한 컬러프린터</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-909 black &amp; white ver"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// default method인 printCMYK를 overriding중</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-909 CMYK ver"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrintDriverDefault</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">myDoc</span> <span class="o">=</span> <span class="s">"This is a report about ..."</span><span class="o">;</span>

        <span class="nc">Printable</span> <span class="n">printer731</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Prn731Drv</span><span class="o">();</span>
        <span class="nc">Printable</span> <span class="n">printer909</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Prn909Drv</span><span class="o">();</span>

        
        <span class="n">printer731</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>

        <span class="n">printer909</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>
        <span class="n">printer909</span><span class="o">.</span><span class="na">printCMYK</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이러한 default 메소드의 특징은 다음과 같다.</p>
<ol>
  <li>자체로 완전한 메소드이다.</li>
  <li>따라서 이를 구현하는 클래스가 필수적으로 오버라이딩 하지 않아도 된다.
<br />
<br /></li>
</ol>

<p>디폴트 메소드의 존재 의미는 다음과 같다.</p>
<blockquote>
  <p>인터페이스에 추상 메소드를 추가해야 하는 상황에서<br />
이전에 개발해놓은 코드에 영향을 미치지 않기 위해 등장한 문법이다.</p>
</blockquote>

<p>따라서, 처음 인터페이스를 설계하는 과정에서 디폴트 메소드를 정의해 넣는다는 것은<br />
완전히 잘못 이해하고 잘못 사용하고 있는 것이라 할 수 있다.</p>

<h3 id="--인터페이스의-static-메소드클래스-메소드">- <u>인터페이스의 static 메소드(클래스 메소드)</u></h3>
<p>인터페이스의 static 메소드 또한 클래스의 그것과 유사하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printLine</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SimplePrinter</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Printable</span><span class="o">.</span><span class="na">printLine</span><span class="o">(</span><span class="s">"end of line"</span><span class="o">);</span> <span class="c1">// 인터페이스의 static 메소드 직접 호출</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음, 두 가지 정도만 기억해두자.</p>
<ol>
  <li>인터페이스에도 static 메소드를 정의할 수 있다.</li>
  <li>인터페이스의 static 메소드 호출 방법은 클래스의 static 메소드 호출 방법과 같다.</li>
</ol>

<h3 id="--인터페이스-대상의-instanceof-연산">- <u>인터페이스 대상의 instanceof 연산</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">ca</span> <span class="k">instanceof</span> <span class="nc">Cake</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div></div>
<p>클래스를 대상으로 하는 instanceof 연산자는 ca가 참조하는 인스턴스가<br />
‘Cake의 인스턴스’ 이거나 ‘Cake를 상속하는 클래스의 인스턴스’인 경우 true가 반환된다.<br />
<br /></p>

<p>이와 유사하게 인터페이스의 경우,<br />
‘Cake를 직접 혹은 간접적으로 구현한 클래스의 인스턴스인 경우’ true를 반환한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">printLine</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SimplePrinter</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printLine</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">MultiPrinter</span> <span class="kd">extends</span> <span class="nc">SimplePrinter</span> <span class="o">{</span>  <span class="c1">// Printable을 간접 구현함</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printLine</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">InstanceofInterface</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Printable</span> <span class="n">prn1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SimplePrinter</span><span class="o">();</span>
    <span class="nc">Printable</span> <span class="n">prn2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MultiPrinter</span><span class="o">();</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">prn1</span> <span class="k">instanceof</span> <span class="nc">Printable</span><span class="o">)</span> <span class="o">{...}</span>  <span class="c1">// true</span>
    
    <span class="k">if</span> <span class="o">(</span><span class="n">prn2</span> <span class="k">instanceof</span> <span class="nc">Printable</span><span class="o">)</span> <span class="o">{...}</span> <span class="c1">// true</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인터페이스의-또-다른-사용-용도-marker-interface">- <u>인터페이스의 또 다른 사용 용도: Marker Interface</u></h3>
<blockquote>
  <p>마커 인터페이스(Marker Interface): 클래스에 특별한 표식을 다는 용도</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Upper</span> <span class="o">{</span> <span class="o">}</span> <span class="c1">// 마커 인터페이스</span>
<span class="kd">interface</span> <span class="nc">Lower</span> <span class="o">{</span> <span class="o">}</span> <span class="c1">// 마커 인터페이스</span>
</code></pre></div></div>

<h2 id="17-3-추상-클래스-abstract-class">17-3. 추상 클래스: Abstract Class</h2>
<blockquote>
  <p>상위 클래스로 Design한 class</p>
</blockquote>

<blockquote>
  <p>이 class를 상속하는 하위 class가 추상메소드를 자기가 필요한대로 채워서 썼으면 좋겠어..</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">House</span> <span class="o">{</span> <span class="c1">// 추상 클래스</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodOne</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"method one"</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">methodTwo</span><span class="o">();</span> <span class="c1">// 추상 메소드</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyHouse</span> <span class="kd">extends</span> <span class="nc">House</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodTwo</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"method two"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>추상 클래스의 성격(인터페이스와 유사)</p>
<ul>
  <li>추상 클래스를 대상으로 인스턴스 생성이 불가능하다.</li>
  <li>다른 클래스에 의해서 추상 메소드가 구현되어야 한다.</li>
</ul>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 16 - 클래스의 상속 3: 상속의 목적</title><link href="http://localhost:4000/java%20lang/Chap16/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 16 - 클래스의 상속 3: 상속의 목적" /><published>2022-10-21T00:00:00+09:00</published><updated>2022-10-21T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap16</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap16/"><![CDATA[<h2 id="16-1-상속이-도움이-되는-상황의-소개">16-1. 상속이 도움이 되는 상황의 소개</h2>
<blockquote>
  <p>상속을 하는 이유: 연관된 일련의 클래스들에 대해 공통적인 규약을 정의할 수 있다.</p>
</blockquote>

<h3 id="--단순한-인맥-관리-프로그램">- <u>단순한 인맥 관리 프로그램</u></h3>
<p>다음과 같은 두 부류의 인맥을 관리하는 프로그램이 있다고 가정하자.<br />
1) 대학 동창: 이름, 전공, 전화번호<br />
2) 직장 동료: 이름, 부서, 전화번호</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">UniFriend</span> <span class="kd">extends</span> <span class="nc">Friend</span><span class="o">{</span> <span class="c1">// 대학 동창</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">major</span><span class="o">;</span>   <span class="c1">// 전공</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UniFriend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">major</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">major</span> <span class="o">=</span> <span class="n">major</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phone</span> <span class="o">=</span> <span class="n">phone</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이름: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전공: "</span> <span class="o">+</span> <span class="n">major</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전화: "</span> <span class="o">+</span> <span class="n">phone</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CompFriend</span> <span class="kd">extends</span> <span class="nc">Friend</span><span class="o">{</span>    <span class="c1">// 직장 동료</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">department</span><span class="o">;</span>  <span class="c1">// 부서</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CompFriend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">department</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">department</span> <span class="o">=</span> <span class="n">department</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phone</span> <span class="o">=</span> <span class="n">phone</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이름: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"부서: "</span> <span class="o">+</span> <span class="n">department</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전화: "</span> <span class="o">+</span> <span class="n">phone</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFriends</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">UnivFriend</span><span class="o">[]</span> <span class="n">ufrns</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UnivFriend</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span> <span class="c1">// 대학 친구</span>
        <span class="nc">CompFriend</span><span class="o">[]</span> <span class="n">cfrns</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span> <span class="c1">// 직장 친구</span>

        <span class="n">ufrns</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UniFriend</span><span class="o">(</span><span class="s">"LEE"</span><span class="o">,</span> <span class="s">"Computer"</span><span class="o">,</span> <span class="s">"010-999-9999"</span><span class="o">);</span>
        <span class="n">ufrns</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UniFriend</span><span class="o">(</span><span class="s">"KIM"</span><span class="o">,</span> <span class="s">"Social"</span><span class="o">,</span> <span class="s">"010-888-8888"</span><span class="o">);</span>
        
        <span class="n">cfrns</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">(</span><span class="s">"LEE"</span><span class="o">,</span> <span class="s">"Dev"</span><span class="o">,</span> <span class="s">"010-777-7777"</span><span class="o">);</span>
        <span class="n">cfrns</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">(</span><span class="s">"KIM"</span><span class="o">,</span> <span class="s">"Market"</span><span class="o">,</span> <span class="s">"010-666-6666"</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">UnivFriend</span> <span class="nl">u:</span> <span class="n">ufrns</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ufrns</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">UnivFriend</span> <span class="nl">u:</span> <span class="n">ufrns</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">cfrns</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>코드를 잘 관찰해보면 다음을 알 수 있다.</p>
<ol>
  <li>인스턴스를 저장하는 배열이 두 개이다.</li>
  <li>친구의 부류에 따라 정보를 저장하는 과정이 나뉜다. -&gt; 저장에 필요한 배열과 변수가 다르기 때문</li>
  <li>저장된 정보를 출력할 때 두 개의 for문을 작성해야 한다. -&gt; 출력에 사용되는 배열과 변수가 다르기 때문</li>
</ol>

<p>이렇게 배열이 두 개이므로 무엇을 하건 그 과정이 둘로 나뉜다.<br />
대상마다 배열이 필요하게 되면 늘어나는 배열의 수만큼 프로그램은 더 복잡해진다.</p>

<h3 id="--인맥-관리-프로그램의-문제를-상속으로-해결하자">- <u>인맥 관리 프로그램의 문제를 상속으로 해결하자.</u></h3>
<p>그렇다면, UnivFriend 클래스와 CompFriend 클래스에 공통적인 규약을 적용하여 코드를 개선해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Friend</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Friend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phone</span> <span class="o">=</span> <span class="n">phone</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이름: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전화: "</span> <span class="o">+</span> <span class="n">phone</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">UniFriend</span> <span class="kd">extends</span> <span class="nc">Friend</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">major</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UniFriend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">major</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">phone</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">major</span> <span class="o">=</span> <span class="n">major</span><span class="o">;</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전공: "</span> <span class="o">+</span> <span class="n">major</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CompFriend</span> <span class="kd">extends</span> <span class="nc">Friend</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">department</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CompFriend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">department</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">phone</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">department</span> <span class="o">=</span> <span class="n">department</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"부서: "</span> <span class="o">+</span> <span class="n">department</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFriends</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Friend</span><span class="o">[]</span> <span class="n">friends</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Friend</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>

        <span class="n">friends</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UniFriend</span><span class="o">(</span><span class="s">"LEE"</span><span class="o">,</span> <span class="s">"Computer"</span><span class="o">,</span> <span class="s">"010-999-9999"</span><span class="o">);</span>
        <span class="n">friends</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UniFriend</span><span class="o">(</span><span class="s">"KIM"</span><span class="o">,</span> <span class="s">"Social"</span><span class="o">,</span> <span class="s">"010-888-8888"</span><span class="o">);</span>
        <span class="n">friends</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">(</span><span class="s">"LEE"</span><span class="o">,</span> <span class="s">"Dev"</span><span class="o">,</span> <span class="s">"010-777-7777"</span><span class="o">);</span>
        <span class="n">friends</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">(</span><span class="s">"KIM"</span><span class="o">,</span> <span class="s">"Market"</span><span class="o">,</span> <span class="s">"010-666-6666"</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Friend</span> <span class="nl">f:</span> <span class="n">friends</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">f</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Friend 클래스를 만듦으로써 다음과 같은 효과를 얻었다.</p>
<ol>
  <li>인스턴스를 저장하는 배열이 하나이다.</li>
  <li>정보를 저장하는 과정이 나뉘지 않는다.</li>
  <li>저장된 정보를 모두 출력할 때 하나의 for문으로 충분하다.</li>
</ol>

<blockquote>
  <p>Friend 클래스는 코드의 재활용 같은 목적으로 추가한 클래스가 아니다.<br />
UnivFriend 클래스와 CompFriend 클래스에 공통 규약을 적용하기 위해 정의된 클래스이다.</p>
</blockquote>

<h2 id="16-2-object-클래스와-final-선언-그리고-override">16-2. Object 클래스와 final 선언 그리고 @Override</h2>
<h3 id="--모든-클래스는-object-클래스를-상속한다">- <u>모든 클래스는 Object 클래스를 상속한다.</u></h3>
<p>자바의 모든 클래스는 직접 혹은 간접적으로 java.lang 패키지에 묶여 있는 Object 클래스를 상속하게 된다.<br />
이는 자바의 모든 인스턴스에 공통된 기준 및 규약을 적용하기 위함이다.</p>

<h3 id="--클래스와-메소드의-final-선언">- <u>클래스와 메소드의 final 선언</u></h3>
<p>클래스를 정의할 때 해당 클래스를 다른 클래스가 상속하는 것을 원치 않는다면, 앞에 final 선언을 붙여주면 된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">MyLastCLS</span> <span class="o">{...}</span>
</code></pre></div></div>

<p>메소드의 정의에 final 선언을 추가하여 해당 메소드의 오버라이딩을 허용하지 않을 수도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Simple</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">func</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){...}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--override">- <u>@Override</u></h3>
<p>개발자의 실수로 인한 오류는 컴파일단계에서 발견되는 것이 가장 좋다.<br />
하지만 다음의 예시처럼 컴파일 시 오류가 발생하지 않는 상황도 존재한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ParentAdder</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ChildAdder</span> <span class="kd">extends</span> <span class="nc">ParentAdder</span> <span class="o">{</span>
    <span class="c1">// 상위 클래스의 add를 오버라이딩 하려는 의도 -&gt; 오버로딩이 되어버렸다..</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">add</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OverrideMistake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ParentAdder</span> <span class="n">adder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChildAdder</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">adder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>어노테이션은 ‘자바 컴파일러에게 메시지를 전달하는 목적의 메모’이다.<br />
다음과 같이 어노테이션을 달아주면 된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ChildAdder</span> <span class="kd">extends</span> <span class="nc">ParentAdder</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">add</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 달아놓으면 컴파일러는 오버라이딩이 제대로 되었는지 확인을 하고, 개발자의 의도대로 되지 않았다면 컴파일 단계에서 검증해준다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 15 - 클래스의 상속 2: 오버라이딩</title><link href="http://localhost:4000/java%20lang/Chap15/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 15 - 클래스의 상속 2: 오버라이딩" /><published>2022-10-18T00:00:00+09:00</published><updated>2022-10-18T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap15</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap15/"><![CDATA[<h2 id="15-1-상속을-위한-두-클래스의-관계">15-1. 상속을 위한 두 클래스의 관계</h2>
<h3 id="--상속의-기본-조건인-is-a-관계">- <u>상속의 기본 조건인 'IS-A 관계'</u></h3>
<p>상위 클래스와 하위 클래스간의 다음 관계가 성립한다.</p>

<blockquote>
  <p>하위 클래스는 상위 클래스의 모든 특성을 지닌다.<br />
하위 클래스는 자신만의 추가적인 특성을 더하게 된다.</p>
</blockquote>

<p>예시를 통해서 상속 관계를 이해해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MobilePhone</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">number</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MobilePhone</span><span class="o">(</span><span class="nc">String</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">answer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hi~ from "</span> <span class="o">+</span> <span class="n">number</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SmartPhone</span> <span class="kd">extends</span> <span class="nc">MobilePhone</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">androidVer</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SmartPhone</span><span class="o">(</span><span class="nc">String</span> <span class="n">number</span><span class="o">,</span> <span class="nc">String</span> <span class="n">androidVer</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">androidVer</span> <span class="o">=</span> <span class="n">androidVer</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">playApp</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"App is running in "</span> <span class="o">+</span> <span class="n">androidVer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MobileSmartPhone</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SmartPhone</span> <span class="n">phone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SmartPhone</span><span class="o">(</span><span class="s">"010-777-7777"</span><span class="o">,</span> <span class="s">"JellyBean"</span><span class="o">);</span>

        <span class="n">phone</span><span class="o">.</span><span class="na">answer</span><span class="o">();</span>
        <span class="n">phone</span><span class="o">.</span><span class="na">playApp</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>‘모바일폰’과 ‘스마트폰’의 관계를 예시로 들어 상속의 특징을 설명하고 있다.<br />
위의 예시를 객체지향적으로 본다면 다음과 같이 얘기할 수 있다.</p>

<blockquote>
  <p>모바일폰을 스마트폰이 상속한다.</p>
</blockquote>

<p>이를 코드를 통해 나타낸 부분은 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SmartPhone</span> <span class="kd">extends</span> <span class="nc">MobilePhone</span> <span class="o">{...}</span>
</code></pre></div></div>

<p>그런데, 우리는 ‘스마트폰도 모바일폰의 한 종류’라고 말하기도 한다.<br />
따라서 다음과 같이 말하는 것도 가능하다.</p>

<blockquote>
  <p>스마트폰도 모바일폰이다.<br />
스마트폰은 일종의 모바일폰이다.</p>
</blockquote>

<p>그리고 위의 문장들이 나타내는 관계를 가리켜 ‘IS-A 관계’라고 하고,<br />
이것이 상속의 관계를 맺기 위한 두 클래스의 기본 조건이 된다.</p>

<ul>
  <li>IS-A 관계 정리
    <ul>
      <li>IS-A 관계는 ‘~은 ~이다.’로 표현되는 관계이다.</li>
      <li>상속이 갖는 문법적 특성은 IS-A 관계의 표현에 적합하다.</li>
      <li>따라서 상속 관계를 형성하기 위한 두 클래스는 IS-A 관계에 있어야한다.</li>
    </ul>
  </li>
</ul>

<h2 id="15-2-메소드-오버라이딩">15-2. 메소드 오버라이딩</h2>
<p>메소드 오버라이딩: 상위 클래스에 정의된 메소드를 하위 클래스에서 다시 정의하는 것<br />
문법적으로는 단순하지만 이것이 가져다주는 이점은 가볍지 않다.</p>

<blockquote>
  <p>인스턴스를 생성 후, 무엇으로 참조하느냐에 따라 인스턴스의 활용능력이 달라진다!</p>
</blockquote>

<h3 id="--상위-클래스의-참조변수가-참조할-수-있는-대상의-범위">- <u>상위 클래스의 참조변수가 참조할 수 있는 대상의 범위</u></h3>
<p>위에서 만들었던 예시를 다시 보자..</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MobilePhone</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">number</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MobilePhone</span><span class="o">(</span><span class="nc">String</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">answer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hi~ from "</span> <span class="o">+</span> <span class="n">number</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SmartPhone</span> <span class="kd">extends</span> <span class="nc">MobilePhone</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">androidVer</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SmartPhone</span><span class="o">(</span><span class="nc">String</span> <span class="n">number</span><span class="o">,</span> <span class="nc">String</span> <span class="n">androidVer</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">androidVer</span> <span class="o">=</span> <span class="n">androidVer</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">playApp</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"App is running in "</span> <span class="o">+</span> <span class="n">androidVer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MobileSmartPhone</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// SmartPhone 인스턴스를 각각 SmartPhone과 MobilePhone 타입의 변수로 참조함</span>
        <span class="nc">SmartPhone</span> <span class="n">phone1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SmartPhone</span><span class="o">(</span><span class="s">"010-777-7777"</span><span class="o">,</span> <span class="s">"JellyBean"</span><span class="o">);</span>
        <span class="nc">MobilePhone</span> <span class="n">phone2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SmartPhone</span><span class="o">(</span><span class="s">"010-999-9999"</span><span class="o">,</span> <span class="s">"Cookie"</span><span class="o">);</span>

        <span class="n">phone1</span><span class="o">.</span><span class="na">answer</span><span class="o">();</span>
        <span class="n">phone1</span><span class="o">.</span><span class="na">playApp</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="n">phone2</span><span class="o">.</span><span class="na">answer</span><span class="o">();</span>
        <span class="c1">// phone2.playApp();    // phone2가 부모클래스형 참조변수라서 컴파일 에러가 남</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이처럼 상위 클래스의 참조변수는 하위 클래스의 인스턴스를 참조할 수 있다. 다음과 같이 정리하자.</p>

<ul>
  <li>모바일폰을 상속하는 스마트폰도 일종의 모바일폰이다.
    <ul>
      <li>MobilePhone을 상속하는 SmartPhone 인스턴스는 MobilePhone 인스턴스이기도 하다.</li>
    </ul>
  </li>
  <li>따라서 MobilePhone형 참조변수는 SmartPhone 인스턴스를 참조할 수 있다.</li>
</ul>

<p>여기서 집중해야할 부분은 이 부분이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MobilePhone</span> <span class="n">phone2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SmartPhone</span><span class="o">(</span><span class="s">"010-999-9999"</span><span class="o">,</span> <span class="s">"Cookie"</span><span class="o">);</span>

<span class="n">phone2</span><span class="o">.</span><span class="na">playApp</span><span class="o">();</span>   <span class="c1">// compile Error!</span>
</code></pre></div></div>

<p>참조변수 phone2는 MobilePhone 타입의 참조변수이다.<br />
이런 경우 <u>'phone2가 참조하는 인스턴스와는 상관없이'</u><br />
MobilePhone 클래스에 정의되었거나, 이 클래스가 상속하는 클래스의 멤버로 제한된다.</p>

<p>이처럼 자바는 메소드 호출 시 참조하는 인스턴스와는 관계없이 ‘참조변수의 형(type)을 참조’하여 그 메소드 호출이 옳은 것인지 판단한다.<br />
이에는 2가지 이유가 있는데,</p>

<blockquote>
  <p>1) 실행 시간을 늦추는 결과로 이어질 수 있다.</p>
</blockquote>

<p>실제 참조하는 인스턴스를 대상으로 메소드의 호출 가능성을 판단하는 것은 간단하지 않다.<br />
참조하는 인스턴스의 종류는 코드의 흐름에 따라 얼마든지 달라질 수 있기 때문이다.</p>

<blockquote>
  <p>2) 참조변수의 형을 기준으로 접근 가능한 멤버를 제한하는 것은 코드를 단순하게 한다.</p>
</blockquote>

<p>단점이 많은 일부 기능을 제한함으로써 단순하고 명료한 코드의 작성을 유도했다.</p>

<h3 id="--클래스의-상속과-참조변수의-참조-가능성에-대한-정리">- <u>클래스의 상속과 참조변수의 참조 가능성에 대한 정리</u></h3>
<p>위의 내용을 정리해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sweet</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CheeseCake</span> <span class="kd">extends</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">milky</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">StrawberryCheeseCake</span> <span class="kd">extends</span> <span class="nc">CheeseCake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sour</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/15-1.png" alt="image" /><br /></p>

<p>Cake형의 참조변수 cake1은<br />
    -&gt; Cake에 정의된 sweet() 메소드를 호출할 수 있다.</p>

<p>하위 클래스인 CheeseCake형 참조변수 cake2는<br />
    -&gt; Cake에 정의된 sweet() 메소드와<br />
    -&gt; CheeseCake에 정의된 milky() 메소드를 호출할 수 있다.</p>

<h3 id="--참조변수-간-대입과-형-변환">- <u>참조변수 간 대입과 형 변환</u></h3>
<p>Cake 예시를 다시 살펴보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sweet</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CheeseCake</span> <span class="kd">extends</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">milky</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>컴파일러는 ‘참조변수의 형’만을 가지고 대입의 가능성을 판단한다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CheeseCake</span> <span class="n">ca1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>
<span class="nc">Cake</span> <span class="n">ca2</span> <span class="o">=</span> <span class="n">c1</span><span class="o">;</span>  <span class="c1">// 가능!</span>
</code></pre></div></div>
<p>‘CheeseCake’ is a ‘Cake’ 이기 때문에 cake형 참조변수로 CheeseCake의 인스턴스를 참조하는 것은 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Cake</span> <span class="n">ca3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>
<span class="nc">CheeseCake</span> <span class="n">ca4</span> <span class="o">=</span> <span class="n">ca3</span><span class="o">;</span>   <span class="c1">// 불가능!</span>
</code></pre></div></div>
<p>위의 문장을 자바 컴파일러는 다음과 같은 수준으로 보고 대입의 가능성을 판단한다.<br />
Cake ca3 = …<br />
CheeseCake ca4 = ca3;</p>

<p>이렇게 ca3가 참조하는 인스턴스가 cheeseCake의 인스턴스임을 보장할 수 없다.<br />
(Cake를 상속하는 다른 클래스의 인스턴스일 수도 있다..)</p>

<p>다만, 개발자가 명시적으로 형 변환을 해주면 대입이 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Cake</span> <span class="n">ca3</span> <span class="o">=</span> <span class="o">...</span>
<span class="nc">CheeseCake</span> <span class="n">ca4</span> <span class="o">=</span> <span class="o">(</span><span class="nc">CheeseCake</span><span class="o">)</span><span class="n">ca3</span><span class="o">;</span>   <span class="c1">// 가능함. 주의 요망!</span>
</code></pre></div></div>

<p>ca3가 참조하는 인스턴스가 CheeseCake 인스턴스임을 개발자가 보장한다는 의미이다.<br />
이렇게하면 컴파일러는 그냥 허용하기 때문에 치명적인 실수가 발생하지 않도록 주의하여 사용해야한다.</p>

<h3 id="--메소드-오버라이딩method-overriding">- <u>메소드 오버라이딩(Method Overriding)</u></h3>
<p>상위 클래스에 정의된 메소드를 하위 클래스에서 다시 정의하는 행위를 메소드 오버라이딩이라고 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">yummy</span><span class="o">()</span> <span class="o">{</span>   <span class="c1">// 오버라이딩 '된' 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy Cake"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CheeseCake</span> <span class="kd">extends</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">yummy</span><span class="o">()</span> <span class="o">{</span>   <span class="c1">// 오버라이딩 '한' 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy CheeseCake"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">YummyCakeOverriding</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Cake</span> <span class="n">cake1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>
        <span class="nc">CheeseCake</span> <span class="n">cake2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>

        <span class="n">cake1</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>
        <span class="n">cake2</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/15-2.png" alt="image" width="50%" height="50%" /><br /></p>

<p>다음 세 가지가 같아야 메소드 오버라이딩이 성립한다.</p>
<ol>
  <li>메소드의 이름</li>
  <li>메소드의 반환형</li>
  <li>메소드의 매개변수 선언</li>
</ol>

<p>실행결과를 보면 알 수 있듯이, 오버라이딩을 하면 참조변수의 형에 상관없이<br />
오버라이딩 한 메소드(CheeseCake의 yummy)가<br />
오버라이딩 된 메소드(Cake의 yummy)를 대신하게 된다.</p>

<h3 id="--오버라이딩-된-메소드를-호출하는-방법">- <u>오버라이딩 된 메소드를 호출하는 방법</u></h3>
<p>클래스 외부에서 인스턴스를 통해 오버라이딩 된 메소드를 호출하는 방법은 없다.<br />
다만, 클래스 외부가 아닌 내부에서 메소드를 호출하는 방법은 있다. 다음을 참고하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">yummy</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy Cake"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CheeseCake</span> <span class="kd">extends</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">yummy</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>  <span class="c1">// 하위 클래스의 메소드 안에서는 오버라이딩 된 메소드의 호출이 가능하다.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy CheeseCake"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tasty</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>  <span class="c1">// Cake의 yummy 메소드 호출</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy Tasty Cake"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">YummyCakeSuper</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">CheeseCake</span> <span class="n">cake</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>

        <span class="n">cake</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="n">cake</span><span class="o">.</span><span class="na">tasty</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="15-3-instanceof-연산자">15-3. instanceof 연산자</h2>
<p>연산자 instanceof는 참조변수가 참조하는 인스턴스의 ‘클래스’나 참조하는 인스턴스가 ‘상속하는 클래스’를 묻는 연산자이다.</p>

<h3 id="--instanceof-연산자의-기본">- <u>instanceof 연산자의 기본</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">ca</span> <span class="k">instanceof</span> <span class="nc">Cake</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div></div>

<p>ca가 참조하는 인스턴스가</p>
<ol>
  <li>Cake의 인스턴스이거나</li>
  <li>Cake를 상속하는 클래스의 인스턴스이면<br />
true를, 그렇지 않으면 false를 반환한다.</li>
</ol>

<h3 id="--instanceof-연산자의-활용">- <u>instanceof 연산자의 활용</u></h3>
<p>다음과 같은 메소드를 정의하고 싶다고 가정하자!<br />
<img src="/assets/images/java-lang/15-3.png" alt="image" width="80%" height="80%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpleWrap</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Simple Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">PaperBox</span> <span class="kd">extends</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paperWrap</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Paper Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">GoldPaperBox</span> <span class="kd">extends</span> <span class="nc">PaperBox</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">goldWrap</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Gold Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Wrapping</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span> <span class="n">box1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">();</span>
        <span class="nc">PaperBox</span> <span class="n">box2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaperBox</span><span class="o">();</span>
        <span class="nc">GoldPaperBox</span> <span class="n">box3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GoldPaperBox</span><span class="o">();</span>

        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box1</span><span class="o">);</span>
        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box2</span><span class="o">);</span>
        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box3</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">wrapBox</span><span class="o">(</span><span class="nc">Box</span> <span class="n">box</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">box</span> <span class="k">instanceof</span> <span class="nc">Box</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">box</span><span class="o">.</span><span class="na">simpleWrap</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">box</span> <span class="k">instanceof</span> <span class="nc">PaperBox</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">((</span><span class="nc">PaperBox</span><span class="o">)</span><span class="n">box</span><span class="o">).</span><span class="na">paperWrap</span><span class="o">();</span>    <span class="c1">// 형 변환 후 메소드 호출</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="o">((</span><span class="nc">GoldPaperBox</span><span class="o">)</span><span class="n">box</span><span class="o">).</span><span class="na">goldWrap</span><span class="o">();</span> <span class="c1">// 형 변환 후 메소드 호출</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="추가-상속의-의미를-생각하며-refactor">(추가) 상속의 의미를 생각하며 refactor</h2>
<p>위의 wrapping 예제는 상속의 장점을 전혀 살리지 못한 예시라고 할 수 있다.<br />
상속은 연관된 일련의 클래스들에 대해 ‘공통적인 규약’을 정의할 수 있다.<br />
이를 상기하며 코드를 리펙토링 해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">wrap</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 오버라이딩</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Simple Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">PaperBox</span> <span class="kd">extends</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">wrap</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 오버라이딩</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Paper Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">GoldPaperBox</span> <span class="kd">extends</span> <span class="nc">PaperBox</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">wrap</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 오버라이딩</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Gold Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Wrapping</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span> <span class="n">box1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">();</span>
        <span class="nc">PaperBox</span> <span class="n">box2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaperBox</span><span class="o">();</span>
        <span class="nc">GoldPaperBox</span> <span class="n">box3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GoldPaperBox</span><span class="o">();</span>

        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box1</span><span class="o">);</span>  <span class="c1">// Simple Wrapping</span>
        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box2</span><span class="o">);</span>  <span class="c1">// Paper Wrapping</span>
        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box3</span><span class="o">);</span>  <span class="c1">// Gold Wrapping</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">wrapBox</span><span class="o">(</span><span class="nc">Box</span> <span class="n">box</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">box</span><span class="o">.</span><span class="na">wrap</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>wrapBox 메소드를 보면<br />
기존의 instanceof를 활용하여 실제 참조하고 있는 인스턴스가 무엇인지 구분하는 복잡한 코드를<br />
메소드 오버라이딩을 활용하여 간단하게 줄였다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 14 - 클래스의 상속 1: 상속의 기본</title><link href="http://localhost:4000/java%20lang/Chap14/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 14 - 클래스의 상속 1: 상속의 기본" /><published>2022-10-17T00:00:00+09:00</published><updated>2022-10-17T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap14</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap14/"><![CDATA[<h2 id="14-1-상속의-기본-문법-이해">14-1. 상속의 기본 문법 이해</h2>
<h3 id="--상속에-대한-매우-치명적인-오해">- <u>상속에 대한 매우 치명적인 오해</u></h3>
<p>상속의 이유와 목적에 대해 설명할 때, 단순히 이렇게 답하는 경우가 있다.</p>
<blockquote>
  <p>상속은 코드의 재활용을 위한 문법이다..?</p>
</blockquote>

<p>하지만 객체지향 기반의 개발을 공부하다보면 상속을 단순히 코드의 재활용을 위한 문법이라기보단 다음과 같은 설명이 더 적합하다.</p>
<blockquote>
  <p>연관된 일련의 클래스들에 대해 공통적인 규약(규칙)을 정의할 수 있다.</p>
</blockquote>

<h3 id="--상속의-가장-기본적인-특성">- <u>상속의 가장 기본적인 특성</u></h3>
<p>상속을 단순하게 설명하면,</p>
<blockquote>
  <p>기존에 정의된 클래스에 메소드와 변수를 추가하여 새로운 클래스를 정의하는 것이다.</p>
</blockquote>

<p>Man 클래스를 상속하여 새로운 클래스 BusinessMan 클래스를 만들어보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Man</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourName</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My name is "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BusinessMan</span> <span class="kd">extends</span> <span class="nc">Man</span> <span class="o">{</span> <span class="c1">// Man을 상속하는 BusinessMan</span>
    <span class="nc">String</span> <span class="n">company</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">position</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourInfo</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My company is "</span> <span class="o">+</span> <span class="n">company</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My position is "</span> <span class="o">+</span> <span class="n">position</span><span class="o">);</span>
        <span class="n">tellYourName</span><span class="o">();</span> <span class="c1">// Man 클래스를 상속했기 때문에 호출 가능!</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-1.png" alt="image" width="50%" height="50%" />
<img src="/assets/images/java-lang/14-2.png" alt="image" width="49%" height="50%" /><br /></p>

<h3 id="--상속과-생성자">- <u>상속과 생성자</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SuperCLS</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Super Class!!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SubCLS</span> <span class="kd">extends</span> <span class="nc">SuperCLS</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sub Class!!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperSubCon</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-3.png" alt="image" width="40%" height="40%" /><br /></p>

<ol>
  <li>하위 클래스의 인스턴스 생성 시 상위 클래스, 하위 클래스의 생성자 ‘모두’ 호출된다.</li>
  <li>하위 클래스의 인스턴스 생성 시 상위 클래스의 생성자가 ‘먼저’ 호출된다.</li>
</ol>

<p><br />그렇다면, 상위 클래스의 생성자가 여러 개 있을 시 어떻게 명시적으로 호출할 수 있을까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SuperCLS</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// 1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SuperCLS()"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">// 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SuperCLS(int i)"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 3</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SuperCLS(int i, int j)"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SubCLS</span> <span class="kd">extends</span> <span class="nc">SuperCLS</span> <span class="o">{</span> <span class="c1">// super(); // 상위 클래스의 생성자를 명시적으로 호출하지 않으면 자동으로 호출됨</span>
    <span class="c1">// super를 이용한 상위 클래스의 생성자 호출문은 생성자의 첫 문장에 들어가야 함</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SubCLS()"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>   <span class="c1">// 상위 클래스의 2번 메소드 호출</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SubCLS(int i)"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>    <span class="c1">// 상위 클래스의 3번 메소드 호출</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SubCLS(int i, int j)"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperSubCon2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1. "</span><span class="o">);</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2. "</span><span class="o">);</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3. "</span><span class="o">);</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-4.png" alt="image" width="60%" height="60%" /><br /></p>

<h3 id="--상속-관계에-있는-두-클래스의-적절한-생성자-정의">- <u>상속 관계에 있는 두 클래스의 적절한 생성자 정의</u></h3>
<blockquote>
  <p>모든 멤버는 자신이 속한 클래스에서 초기화되는 것이 좋다.</p>
</blockquote>

<p>따라서, 상속에서도 마찬가지로 상위 클래스의 멤버는 상위 클래스의 생성자를 통해서 초기화해야한다.<br />
앞서 만든 BusinessMan 클래스를 리펙토링해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Man</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Man</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourName</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My name is "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">BusinessMan</span> <span class="kd">extends</span> <span class="nc">Man</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">company</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">position</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BusinessMan</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">company</span><span class="o">,</span> <span class="nc">String</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">company</span> <span class="o">=</span> <span class="n">company</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">position</span> <span class="o">=</span> <span class="n">position</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My company is "</span> <span class="o">+</span> <span class="n">company</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My position is "</span> <span class="o">+</span> <span class="n">position</span><span class="o">);</span>
        <span class="n">tellYourName</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBusinessMan</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">BusinessMan</span> <span class="n">man</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BusinessMan</span><span class="o">(</span><span class="s">"Hi-June"</span><span class="o">,</span> <span class="s">"TUK"</span><span class="o">,</span> <span class="s">"Developer"</span><span class="o">);</span>
        <span class="n">man</span><span class="o">.</span><span class="na">tellYourInfo</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-5.png" alt="image" width="40%" height="40%" /><br /></p>

<h3 id="--단일-상속만을-지원하는-자바">- <u>단일 상속만을 지원하는 자바</u></h3>
<p>자바는 프로그램이 과도하게 복잡해지는 것을 방지하기 위해 단일 상속만을 지원한다.<br />
하나의 클래스가 상속할 수 있는 클래스의 수가 최대 하나라는 것을 의미한다.</p>

<p>(참고) 다중 상속을 하게 되면 어떤 문제가 생길까?</p>
<ol>
  <li>
    <p>애매한 상황이 발생한다.<br />
<img src="/assets/images/java-lang/14-6.png" alt="image" width="40%" height="40%" /><br />
동일한 이름을 가진 print()를 상속받을 때 문제가 생긴다.</p>
  </li>
  <li>
    <p>다이아몬드 문제<br />
<img src="/assets/images/java-lang/14-7.png" alt="image" width="40%" height="40%" /><br />
show() 메소드의 경로에 대해서 애매한 문제가 발생한다.</p>
  </li>
</ol>

<h2 id="14-2-클래스-변수-클래스-메소드와-상속">14-2. 클래스 변수, 클래스 메소드와 상속</h2>
<h3 id="--static-선언이-붙는-클래스-변수와-클래스-메소드의-상속">- <u>static 선언이 붙는 '클래스 변수'와 '클래스 메소드'의 상속</u></h3>
<p>클래스 변수와 클래스 메소드의 특징은 다음과 같다.</p>

<ol>
  <li>인스턴스의 생성과 상관 없이 접근이 가능하다.</li>
  <li>클래스 내부와 외부에서(접근 수준 지시자가 허용하면) 접근이 가능하다.</li>
  <li>클래스 변수와 클래스 메소드가 위치한 클래스 내에서는 직접 접근이 가능하다.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SuperCLS</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>   <span class="c1">// 클래스 변수</span>

    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">count</span><span class="o">++;</span>    <span class="c1">// 클래스 내에서는 직접 접근이 가능</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>클래스 변수는 인스턴스의 멤버로써 존재하지 않는다.<br />
따라서, 이를 상속하는 하위 클래스의 멤버로도 존재할 수 없다.<br />
일반적으로 static 변수에 접근하듯이 접근하면 된다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 13 - 배열(Array)</title><link href="http://localhost:4000/java%20lang/Chap13/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 13 - 배열(Array)" /><published>2022-10-15T00:00:00+09:00</published><updated>2022-10-15T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap13</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap13/"><![CDATA[<h2 id="13-1-1차원-배열의-이해와-활용">13-1. 1차원 배열의 이해와 활용</h2>
<blockquote>
  <p>배열: 자료형이 같은 둘 이상의 값을 저장할 수 있는 메모리 공간</p>
</blockquote>

<h3 id="--1차원-배열의-생성방법">- <u>1차원 배열의 생성방법</u></h3>
<p>자바는 배열도 ‘인스턴스’로 처리한다.<br />
<img src="/assets/images/java-lang/13-1.png" alt="image" width="40%" height="40%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayIsInstance</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 길이가 5인 int형 1차원 배열의 생성</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ar1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>

        <span class="c1">// 배열의 참조변수와 인스턴스 생성 분리</span>
        <span class="kt">double</span><span class="o">[]</span> <span class="n">ar2</span><span class="o">;</span>
        <span class="n">ar2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>

        <span class="c1">// 배열 '인스턴스 변수(length)' 접근</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배열 ar1의 길이: "</span> <span class="o">+</span> <span class="n">ar1</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배열 ar2의 길이: "</span> <span class="o">+</span> <span class="n">ar2</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<p>다음 예시처럼 인스턴스를 저장할 수 있는 배열을 선언하는 방법도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">conts</span><span class="o">;</span>

    <span class="nc">Box</span><span class="o">(</span><span class="nc">String</span> <span class="n">conts</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">conts</span> <span class="o">=</span> <span class="n">conts</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">conts</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayIsInstance2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span><span class="o">[]</span> <span class="n">boxes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>   <span class="c1">// 길이가 5인 Box형 1차원 배열의 생성</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"length : "</span> <span class="o">+</span> <span class="n">boxes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>주의해야할 점은<br />
이는 Box 인스턴스 5개를 저장할 수 있는 ‘참조변수의 배열’ 이라는 점이다.<br />
즉, Box 인스턴스의 생성과는 관계가 없고, 위 문장을 통해 5개의 Box 인스턴스를 저장할 수 있는 배열이 생성될 뿐이다.</p>

<h3 id="--배열을-대상으로-한-값의-저장과-참조">- <u>배열을 대상으로 한 값의 저장과 참조</u></h3>
<p>위의 Box 예시로 배열 대상의 값 저장 및 참조 방법을 알아보자.<br />
<img src="/assets/images/java-lang/13-2.png" alt="image" width="40%" height="40%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">conts</span><span class="o">;</span>

    <span class="nc">Box</span><span class="o">(</span><span class="nc">String</span> <span class="n">conts</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">conts</span> <span class="o">=</span> <span class="n">conts</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">conts</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BoxArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span><span class="o">[]</span> <span class="n">boxes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>

        <span class="c1">// 배열에 인스턴스 저장</span>
        <span class="n">boxes</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">(</span><span class="s">"One"</span><span class="o">);</span>
        <span class="n">boxes</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">(</span><span class="s">"Two"</span><span class="o">);</span>
        <span class="n">boxes</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">(</span><span class="s">"Three"</span><span class="o">);</span>

        <span class="c1">// 저장된 인스턴스의 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">boxes</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--배열을-생성과-동시에-초기화하기">- <u>배열을 생성과 동시에 초기화하기</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>    <span class="c1">// 첫 번째 방법</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>  <span class="c1">// 두 번째 방법</span>
</code></pre></div></div>

<h3 id="--참조변수-선언의-두-가지-방법">- <u>참조변수 선언의 두 가지 방법</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
<span class="kt">int</span> <span class="n">ar</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</code></pre></div></div>

<h3 id="--배열의-참조-값과-메소드">- <u>배열의 참조 값과 메소드</u></h3>
<p>배열도 인스턴스이므로 메소드 호출 시 참조 값의 전달 및 반환이 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">int</span> <span class="nf">sumOfAry</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 배열의 참조 값 전달</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    
    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">makeNewIntAry</span><span class="o">(</span><span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>
    <span class="k">return</span> <span class="n">ar</span><span class="o">;</span>  <span class="c1">// 배열의 참조 값 반환</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--배열의-초기화와-배열의-복사">- <u>배열의 초기화와 배열의 복사</u></h3>
<p>배열이 생성되면 모든 요소는 0 또는 null로 초기화된다.<br />
따라서 특정 값으로 초기화하고 싶다면 java.util.Arrays에 정의되어있는 다음 메소드를 사용한다.<br />
<img src="/assets/images/java-lang/13-3.png" alt="image" width="70%" height="70%" /><br /></p>

<p><br />
또, 배열을 복사해야 하는 상황도 종종 생기는데, 이 때는 java.lang.System에 있는 다음 메소드를 사용한다.<br />
<img src="/assets/images/java-lang/13-4.png" alt="image" width="70%" height="70%" /><br /></p>

<p><br />
코드를 통해 확인해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayUtils</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ar1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ar2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>

        <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">ar1</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>    <span class="c1">// 배열 ar1을 7로 초기화</span>

        <span class="c1">// 배열 ar1을 ar2로 부분 복사</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">ar1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">ar2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>    <span class="c1">// ar1의 0번 인덱스부터 5개의 요소를 ar2의 2번 인덱스로 부분 복사</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ar1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ar2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/13-5.png" alt="image" width="70%" height="70%" /><br /></p>

<h2 id="13-2-enhanced-for문">13-2. enhanced for문</h2>
<p>enhanced for문은 자바5에서 추가되었다.<br />
for loop의 구조가 파이썬과 유사하게 돌아가니 참고하자.</p>

<h3 id="--enhanced-for문의-이해와-활용">- <u>enhanced for문의 이해와 활용</u></h3>
<p>배열을 사용하다보면 ‘배열에 저장된 모든 요소들’을 대상으로 연산, 참조 또는 탐색을 진행해야하는 경우를 자주 보게 된다.<br />
이러한 상황의 문장 구성을 돕기 위해 등장한 것이 enhanced for문(for-each문)이다.</p>

<p><img src="/assets/images/java-lang/13-6.png" alt="image" width="30%" height="30%" />
<img src="/assets/images/java-lang/13-7.png" alt="image" width="30%" height="30%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>

<span class="c1">// 일반 for문</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>

<span class="c1">// enhanced for문</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">e</span> <span class="o">:</span> <span class="n">ar</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인스턴스-배열을-대상으로-하는-enhanced-for문">- <u>인스턴스 배열을 대상으로 하는 enhanced for문</u></h3>
<p>배열에 저장된 내용이 ‘기본 자료형의 값’이 아닌 ‘인스턴스의 참조 값’인 경우에도 달라지는 것은 없다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Bucket</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">contents</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">bucketNum</span><span class="o">;</span>

    <span class="nc">Bucket</span><span class="o">(</span><span class="kt">int</span> <span class="n">bucketNum</span><span class="o">,</span> <span class="nc">String</span> <span class="n">contents</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">bucketNum</span> <span class="o">=</span> <span class="n">bucketNum</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">contents</span> <span class="o">=</span> <span class="n">contents</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getBucketNum</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">bucketNum</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">contents</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EnhancedForInst</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Bucket</span><span class="o">[]</span> <span class="n">buckets</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bucket</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>

        <span class="n">buckets</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bucket</span><span class="o">(</span><span class="mi">101</span><span class="o">,</span> <span class="s">"Coffee"</span><span class="o">);</span>
        <span class="n">buckets</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bucket</span><span class="o">(</span><span class="mi">202</span><span class="o">,</span> <span class="s">"Computer"</span><span class="o">);</span>
        <span class="n">buckets</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bucket</span><span class="o">(</span><span class="mi">303</span><span class="o">,</span> <span class="s">"Apple"</span><span class="o">);</span>

        <span class="c1">// 배열에서 번호가 202인 Bucket을 찾아 그 내용물을 출력하는 반복문</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">Bucket</span> <span class="n">b</span> <span class="o">:</span> <span class="n">buckets</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">getBucketNum</span><span class="o">()</span> <span class="o">==</span> <span class="mi">202</span><span class="o">){</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="13-3-다차원-배열의-이해와-활용">13-3. 다차원 배열의 이해와 활용</h2>
<h3 id="--2차원-배열의-생성과-접근">- <u>2차원 배열의 생성과 접근</u></h3>
<p><img src="/assets/images/java-lang/13-8.png" alt="image" width="90%" height="90%" /><br />
<br /></p>

<p>이해를 위해 2차원 배열을 선언해보고, 값을 순차적으로 저장해보자!</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TwoDimenArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">][</span><span class="mi">4</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// 배열에 값을 저장 및 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">// 행의 수: 3</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">// 열의 수: 4</span>
                <span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
                <span class="n">num</span><span class="o">++;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/13-9.png" alt="image" width="40%" height="40%" /><br /></p>

<h3 id="--2차원-배열의-구조">- <u>2차원 배열의 구조</u></h3>
<p><img src="/assets/images/java-lang/13-10.png" alt="image" width="70%" height="70%" /><br /></p>

<p>2차원 배열의 실제 구조를 보면 각 행을 담당하는 변수인 arr[0], arr[1], arr[2]들은<br />
각각의 ‘1차원 배열을 참조하는 참조변수’임을 알 수 있다.</p>

<p>따라서, 위의 코드를 다음과 같이 수정할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TwoDimenArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">][</span><span class="mi">4</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// 배열에 값을 저장 및 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">// 행의 수: 3 -&gt; ar.length</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">// 열의 수: 4 -&gt; ar[i].length</span>
                <span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
                <span class="n">num</span><span class="o">++;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--2차원-배열의-초기화">- <u>2차원 배열의 초기화</u></h3>
<p>1차원 배열과 마찬가지로 다음 방법을 통해 간단히 초기화가 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PartiallyFilledArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">11</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">22</span><span class="o">,</span> <span class="mi">33</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">44</span><span class="o">,</span> <span class="mi">55</span><span class="o">,</span> <span class="mi">66</span><span class="o">}</span>
        <span class="o">};</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/13-11.png" alt="image" width="40%" height="40%" /><br /></p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 12 - 콘솔 입력과 출력</title><link href="http://localhost:4000/java%20lang/Chap12/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 12 - 콘솔 입력과 출력" /><published>2022-10-13T00:00:00+09:00</published><updated>2022-10-13T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap12</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap12/"><![CDATA[<h2 id="12-1-콘솔-출력console-output">12-1. 콘솔 출력(Console Output)</h2>
<h3 id="--systemoutprintln--systmeoutprint">- <u>System.out.println &amp; Systme.out.print</u></h3>
<blockquote>
  <p>System.out.println은 참조 값이 전달되면, 이 값의 인스턴스를 대상으로 toString 메소드를 호출한다. 그리고 이때 반환되는 문자열을 출력한다.</p>
</blockquote>

<h3 id="--systemoutprintf">- <u>System.out.printf</u></h3>
<p><img src="/assets/images/java-lang/12-2.png" alt="image" width="50%" height="50%" /><br />
<br />
<img src="/assets/images/java-lang/12-1.png" alt="image" width="70%" height="70%" /><br /></p>

<h2 id="12-2-콘솔-입력console-input">12-2. 콘솔 입력(Console Input)</h2>
<h3 id="--scanner-클래스">- <u>Scanner 클래스</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Scanner</span><span class="o">(</span><span class="nc">File</span> <span class="n">source</span><span class="o">)</span>
<span class="nc">Scanner</span><span class="o">(</span><span class="nc">String</span> <span class="n">source</span><span class="o">)</span>
<span class="nc">Scanner</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">source</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="--scanner-클래스의-키보드-적용">- <u>Scanner 클래스의 키보드 적용</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="--scanner-클래스의-주요-메소드들">- <u>Scanner 클래스의 주요 메소드들</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">nextInt</span><span class="o">()</span>
<span class="kt">byte</span> <span class="nf">nextLine</span><span class="o">()</span>
<span class="nc">String</span> <span class="nf">nextLine</span><span class="o">()</span>
<span class="kt">double</span> <span class="nf">nextDouble</span><span class="o">()</span>
<span class="kt">boolean</span> <span class="nf">nextBoolean</span><span class="o">()</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 11 - 메소드 오버로딩과 String 클래스</title><link href="http://localhost:4000/java%20lang/Chap11/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 11 - 메소드 오버로딩과 String 클래스" /><published>2022-10-10T00:00:00+09:00</published><updated>2022-10-10T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap11</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap11/"><![CDATA[<h2 id="11-1-메소드-오버로딩method-overloading">11-1. 메소드 오버로딩(Method overloading)</h2>
<h3 id="--메소드-오버로딩의-조건">- <u>메소드 오버로딩의 조건</u></h3>
<p>호출할 메소드를 찾을 때 다음 두 가지 정보를 참조하여 메소드를 찾게 된다.</p>
<ol>
  <li>메소드의 이름</li>
  <li>메소드의 매개변수 정보(타입, 갯수)</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHome</span> <span class="o">{</span>  <span class="c1">// 매개변수의 선언이 다르면 호출된 메소드의 구분이 가능하다.</span>
    <span class="kt">void</span> <span class="nf">mySimpleRoom</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span> <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">mySimpleRoom</span><span class="o">(</span><span class="kt">int</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n2</span><span class="o">){</span> <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">mySimpleRoom</span><span class="o">(</span><span class="kt">double</span> <span class="n">d1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">d2</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>

    <span class="cm">/* 반환형은 호출할 메소드를 선택하는데 있어서의 판단 기준이 아니다.
    int simpleMethod(){ }
    double simpleMethod(){ }
    */</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--생성자도-오버로딩의-대상이-된다">- <u>생성자도 오버로딩의 대상이 된다.</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">regiNum</span><span class="o">;</span>    <span class="c1">// 주민등록 번호</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">passNum</span><span class="o">;</span>    <span class="c1">// 여권 번호</span>

    <span class="nc">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">rnum</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pnum</span><span class="o">){</span> <span class="c1">// 매개변수의 갯수가 다름</span>
        <span class="n">regiNum</span> <span class="o">=</span> <span class="n">rnum</span><span class="o">;</span>
        <span class="n">passNum</span> <span class="o">=</span> <span class="n">pnum</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nc">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">rnum</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">regiNum</span> <span class="o">=</span> <span class="n">rnum</span><span class="o">;</span>
        <span class="n">passNum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ConOverloading</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Person</span> <span class="n">choi</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">335577</span><span class="o">,</span> <span class="mi">112233</span><span class="o">);</span>    <span class="c1">// 여권이 있는 경우</span>
        <span class="nc">Person</span> <span class="n">park</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">335577</span><span class="o">);</span>   <span class="c1">// 여권이 없는 경우</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--키워드-this를-이용한-다른-생성자의-호출">- <u>키워드 this를 이용한 다른 생성자의 호출</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">regiNum</span><span class="o">;</span>    <span class="c1">// 주민등록 번호</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">passNum</span><span class="o">;</span>    <span class="c1">// 여권 번호</span>

    <span class="nc">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">rnum</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pnum</span><span class="o">){</span> <span class="c1">// 매개변수의 갯수가 다름</span>
        <span class="n">regiNum</span> <span class="o">=</span> <span class="n">rnum</span><span class="o">;</span>
        <span class="n">passNum</span> <span class="o">=</span> <span class="n">pnum</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nc">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">rnum</span><span class="o">){</span>
        <span class="k">this</span><span class="o">(</span><span class="n">rnum</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="c1">//    Person(int rnum) {</span>
<span class="c1">//        regiNum = rnum;</span>
<span class="c1">//        passNum = 0;</span>
<span class="c1">//    }</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ConOverloading</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Person</span> <span class="n">choi</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">335577</span><span class="o">,</span> <span class="mi">112233</span><span class="o">);</span>    <span class="c1">// 여권이 있는 경우</span>
        <span class="nc">Person</span> <span class="n">park</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">335577</span><span class="o">);</span>   <span class="c1">// 여권이 없는 경우</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>this는 오버로딩 된 다른 생성자를 의미한다. 이 생성자는 단순히 초기화할 값을 전달받는 역할만 하고,<br />
실제 초기화는 첫 번째로 정의된 생성자를 통해서 진행하는 형태가 된다.</p>

<h3 id="--키워드-this를-이용한-인스턴스-변수의-접근">- <u>키워드 this를 이용한 인스턴스 변수의 접근</u></h3>
<p><img src="/assets/images/java-lang/11-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
여기서 this가 의미하는 것은 ‘이 문장이 속한 인스턴스’이다.</p>

<h2 id="11-2-string-클래스">11-2. String 클래스</h2>
<h3 id="--string-클래스의-인스턴스-생성">- <u>String 클래스의 인스턴스 생성</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Simple String"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">"Best String"</span><span class="o">;</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>  <span class="c1">// println은 다양한 인자를 전달받을 수 있도록 오버로딩이 되어있다. </span>
</code></pre></div></div>

<h3 id="--문자열-생성을-위한-두-가지-방법의-차이점은">- <u>문자열 생성을 위한 두 가지 방법의 차이점은?</u></h3>
<p>앞서 보인 두 가지 문자열 생성 방법의 차이점을 알아보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ImmutableString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="c1">// 문자열 생성 방법 1</span>
        <span class="nc">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">"Simple String"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">"Simple String"</span><span class="o">;</span>

        <span class="c1">// 문자열 생성 방법 2</span>
        <span class="nc">String</span> <span class="n">str3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Simple String"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">str4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Simple String"</span><span class="o">);</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">str1</span> <span class="o">==</span> <span class="n">str2</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"str1과 str2는 동일 인스턴스 참조"</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"str1과 str2는 다른 인스턴스 참조"</span><span class="o">);</span>

        <span class="k">if</span><span class="o">(</span><span class="n">str3</span> <span class="o">==</span> <span class="n">str4</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"str3과 str4는 동일 인스턴스 참조"</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"str3과 str4는 다른 인스턴스 참조"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/11-2.png" alt="image" width="90%" height="90%" class="align-center" /><br />
참조변수를 대상으로 한 == 연산은 ‘참조변수의 참조 값’에 대한 비교 연산을 진행한다.</p>

<p>이러한 차이를 보이는 이유는..</p>
<blockquote>
  <p>String 인스턴스는 Immutable 인스턴스이다.</p>
</blockquote>

<p>Immutable하다는 것은 값을 변경할 수 없다는 뜻이다.<br />
즉, 문자열 인스턴스를 생성한 후에는 인스턴스가 소멸할 때까지 바꿀 수 없다.</p>

<p>이처럼 문자열 인스턴스는 데이터를 수정할 수 없는, 참조만 가능한 인스턴스이기 때문에<br />
그 내용이 같을 경우 굳이 새로운 인스턴스를 생성할 필요가 없어진다.</p>

<p>앞의 str1과 str2처럼 하나의 인스턴스를 생성해서 이를 공유하는 방식으로 코드를 처리하면<br />
이로 인해 생성되는 인스턴스의 수는 줄고 성능은 향상된다.</p>

<h2 id="11-3-string-클래스의-메소드">11-3. String 클래스의 메소드</h2>
<h3 id="--문자열-연결시키기-concatenating">- <u>문자열 연결시키기: Concatenating</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringConcat</span> <span class="o">{</span> <span class="c1">// 두 문자열을 연결시킨 문자열을 결과로 얻는다.</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">st1</span> <span class="o">=</span> <span class="s">"Coffee"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">st2</span> <span class="o">=</span> <span class="s">"Bread"</span><span class="o">;</span>

        <span class="nc">String</span> <span class="n">st3</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">st2</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">st3</span><span class="o">);</span>    <span class="c1">// CoffeBread</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--문자열의-일부를-추출하기-substring">- <u>문자열의 일부를 추출하기: Substring</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubString</span> <span class="o">{</span>    <span class="c1">// 문자열의 뒷부분을 별도의 문자열로 추출할 수 있다.</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">st1</span> <span class="o">=</span> <span class="s">"abcdefg"</span><span class="o">;</span>

        <span class="nc">String</span> <span class="n">st2</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>  <span class="c1">// beginIndex ~ 끝까지 추출</span>
        <span class="nc">String</span> <span class="n">st3</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">);</span>    <span class="c1">// beginIndex ~ endIndex 사이 추출</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">st2</span><span class="o">);</span>    <span class="c1">// cdefg</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">st3</span><span class="o">);</span>    <span class="c1">// cd</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--문자열의-내용-비교-comparing">- <u>문자열의 내용 비교: comparing</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CompString</span> <span class="o">{</span>
    <span class="cm">/**
     1. equals
     2. compareTo
     3. compareToIgnoreCase
     */</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">st1</span> <span class="o">=</span> <span class="s">"Lexicographically"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">st2</span> <span class="o">=</span> <span class="s">"lexicographically"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">cmp1</span><span class="o">,</span> <span class="n">cmp2</span><span class="o">;</span>

        <span class="k">if</span><span class="o">(</span><span class="n">st1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">st2</span><span class="o">))</span> <span class="c1">// 두 인스턴스가 지니는 문자열이 같으면 true, 다르면 false를 반환함</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 같음"</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 다름"</span><span class="o">);</span>


        <span class="cm">/*
        두 문자열의 내용이 일치하면 0
        호출된 인스턴스의 문자열(st1)이 인자로 전달된 문자열(st2)보다 앞서면 0보다 작은 값 반환
        호출된 인스턴스의 문자열(st1)이 인자로 전달된 문자열(st2)보다 뒤서면 0보다 큰 값 반환
         */</span>
        <span class="n">cmp1</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">st2</span><span class="o">);</span>   <span class="c1">// 두 문자열의 사전 편찬 상 순서를 비교함.</span>

        <span class="k">if</span><span class="o">(</span><span class="n">cmp1</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 일치합니다."</span><span class="o">);</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">cmp1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"사전의 앞에 위치하는 문자: "</span> <span class="o">+</span> <span class="n">st1</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"사전의 앞에 위치하는 문자: "</span> <span class="o">+</span> <span class="n">st2</span><span class="o">);</span>


        <span class="cm">/*
        사전 편찬 순서상 대문자는 소문자보다 앞에 위치한다.
        하지만 compareToIgnoreCase는 이름 그대로, 문자열 비교에 있어서 대소문자 구분을 하지 않는다.
        그 외에 부분에 대해서는 compareTo와 동일하다.
         */</span>
        <span class="n">cmp2</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">compareToIgnoreCase</span><span class="o">(</span><span class="n">st2</span><span class="o">);</span>

        <span class="k">if</span><span class="o">(</span><span class="n">cmp2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 같습니다."</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 다릅니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--기본-자료형의-값을-문자열로-바꾸기">- <u>기본 자료형의 값을 문자열로 바꾸기</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">b</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">double</span> <span class="n">d</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">float</span> <span class="n">f</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">long</span> <span class="n">l</span><span class="o">)</span>
</code></pre></div></div>
<p>String 클래스에 정의되어 있는 위의 메소드들을 호출하면 기본 자료형의 값을 문자열로 바꿀 수 있다.<br />
클래스 메소드이므로 다음과 같이 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">e</span> <span class="o">=</span> <span class="mf">2.718281</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">se</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>  <span class="c1">// "2.718281"</span>
</code></pre></div></div>

<h3 id="--stringbuilder-클래스">- <u>StringBuilder 클래스</u></h3>
<p>String의 반복적인 인스턴스 생성은 프로그램의 성능을 저하시킨다.<br />
문자열끼리의 연산은 빈번한 인스턴스의 생성을 야기시킬 수 있으므로 이를 방지하기 위해 StringBuilder 클래스를 사용한다.</p>

<p>StringBuilder 클래스는 내부적으로 문자열을 저장하기 위한 메모리 공간을 지닌다.<br />
이 메모리공간은 String 클래스의 메모리 공간과는 다르게 문자를 ‘추가’하거나 ‘삭제’하는 것이 가능하다.<br />
따라서, ‘수정하면서 유지해야 할 문자열’이 있다면 이 클래스에 그 내용을 담아서 관리하는 것이 효율적이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// StringBuilder 클래스의 메소드</span>

<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">append</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>  <span class="c1">// 기본 자료형 데이터를 문자열 내용에 추가</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="c1">// index start부터 end 이전까지 내용 삭제</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="c1">// 인덱스 offset의 위치에 str에 전달된 문자열 추가</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">replace</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="nc">String</span> <span class="n">str</span><span class="o">)</span>    <span class="c1">// index start부터 end 이전까지 내용을 str으로 대체</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">reverse</span><span class="o">()</span>  <span class="c1">// 저장된 문자열의 내용을 뒤집는다.</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">substring</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="n">in</span> <span class="n">end</span><span class="o">)</span>  <span class="c1">// 메모리 공간 안의 일부 내용만 가져다 String으로 반환</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">toString</span><span class="o">()</span> <span class="c1">// 메모리 공간 안의 모든 내용을 string으로 반환</span>
</code></pre></div></div>

<p>위의 매소드들은 무엇을 반환하는 것인가?</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReturnStringBuilder</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">stb1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
        <span class="nc">StringBuilder</span> <span class="n">stb2</span> <span class="o">=</span> <span class="n">stb1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="mi">45678</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stb1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stb2</span><span class="o">);</span>


        <span class="c1">// 인덱스 0~4까지의 문자 삭제</span>
        <span class="n">stb2</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stb1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stb2</span><span class="o">);</span>

        <span class="c1">// 참조 값의 비교</span>
        <span class="k">if</span><span class="o">(</span><span class="n">stb1</span> <span class="o">==</span> <span class="n">stb2</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"same instance"</span><span class="o">);</span>    <span class="c1">// true</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"diff instance"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음 코드의 결과는 same instance가 출력된다.<br />
즉, stb1과 stb2가 같은 인스턴스를 참조하게 된다.</p>

<p><img src="/assets/images/java-lang/11-3.png" alt="image" width="90%" height="90%" class="align-center" /><br />
따라서, 자바 컴파일러가 변환해 놓은 문장이 어떻게 처리되는지 알 수 있다.</p>

<h3 id="--stringbuilder-클래스-이전에-사용되던-stringbuffer-클래스">- <u>StringBuilder 클래스 이전에 사용되던 StringBuffer 클래스</u></h3>
<p>StringBuffer 클래스는 자바 5에서 등장한 클래스이다.</p>

<p>StringBuffer와 StringBuilder는</p>
<ol>
  <li>생성자를 포함한 메소드의 수</li>
  <li>메소드의 기능</li>
  <li>메소드의 이름과 매개변수의 선언
위 세 가지가 일치한다. 이는 사실상 같은 클래스임을 의미한다.</li>
</ol>

<p>그러나 차이점이 하나 있는데,</p>
<blockquote>
  <p>StringBuffer는 쓰레드에 안전하지만, StringBuilder는 쓰레드에 안전하지 않다.</p>
</blockquote>

<p>StringBuffer    -&gt; 멀티 쓰레드 환경에서 안전, 속도 느림<br />
StringBuilder   -&gt; 멀티 쓰레드 환경에서 안전하지 않음, 속도 빠름</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 10 - 클래스 변수와 클래스 메소드</title><link href="http://localhost:4000/java%20lang/Chap10/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 10 - 클래스 변수와 클래스 메소드" /><published>2022-10-09T00:00:00+09:00</published><updated>2022-10-09T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap10</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap10/"><![CDATA[<h2 id="10-1-static-선언을-붙여서-하는-클래스-변수">10-1. static 선언을 붙여서 하는 클래스 변수</h2>
<ul>
  <li>인스턴스 변수: 인스턴스가 생성되었을 때, 생성된 인스턴스 안에 존재하는 변수</li>
  <li>클래스 변수: 인스턴스의 생성과 상관없이 존재하는 변수</li>
</ul>

<h3 id="--선언된-클래스의-모든-인스턴스가-공유하는-클래스-변수static-변수">- <u>선언된 클래스의 모든 인스턴스가 공유하는 클래스 변수(static 변수)</u></h3>
<blockquote>
  <p>static으로 선언된 변수는 변수가 선언된 클래스의 모든 인스턴스가 공유하는 변수이다.</p>
</blockquote>

<p>클래스 변수는 ‘어떠한 인스턴스에도 속하지 않는 상태로 메모리 공간에 딱 하나만 존재하는 변수’이다.<br />
다만 이 변수가 선언된 클래스의 인스턴스들은 이 변수에 바로 접근할 수 있는 권한이 있을 뿐이다.</p>

<h3 id="--클래스-변수의-접근-방법">- <u>클래스 변수의 접근 방법</u></h3>
<p>클래스 변수에 접근하는 방법은 접근 영역을 기준으로 크게 두 가지로 나뉜다.</p>
<ul>
  <li>클래스 내부 접근: 변수의 이름을 통해 직접 접근</li>
  <li>클래스 외부 접근: 클래스 또는 인스턴스의 이름을 통해 접근</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">AccessWay</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nc">AccessWay</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">incrCnt</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">incrCnt</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 클래스 내부에서 이름을 통한 접근</span>
        <span class="n">num</span><span class="o">++;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassVarAccess</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">AccessWay</span> <span class="n">way</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AccessWay</span><span class="o">();</span>
        <span class="n">way</span><span class="o">.</span><span class="na">num</span><span class="o">++;</span>  <span class="c1">// 외부에서 '인스턴스'의 이름을 통한 접근(num 변수가 인스턴스 변수인지 클래스 변수인지 분간이 안 됨!)</span>
        <span class="nc">AccessWay</span><span class="o">.</span><span class="na">num</span><span class="o">++;</span>    <span class="c1">// 외부에서 '클래스'의 이름을 통한 접근(따라서 이 접근법이 추천된다!)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"num + "</span> <span class="o">+</span> <span class="nc">AccessWay</span><span class="o">.</span><span class="na">num</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--클래스-변수의-초기화-시점과-초기화-방법">- <u>클래스 변수의 초기화 시점과 초기화 방법</u></h3>
<blockquote>
  <p>클래스 변수는 인스턴스 생성 이전에 메모리 공간에 존재한다.</p>
</blockquote>

<p>클래스 변수는 해당 클래스 정보가 가상머신에 의해 읽히는 순간 메모리 공간에 할당되고 초기화된다.<br />
따라서 다음과 같이 생성자를 통한 클래스 변수의 초기화를 진행하지 않도록 주의해야한다.(인스턴스 생성시마다 값이 리셋되기 때문)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">InstCnt</span><span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">instNum</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>   <span class="c1">// 정상적인 초기화 방법</span>
    
    <span class="nc">InstCnt</span><span class="o">(){</span>
        <span class="n">instNum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>    <span class="c1">// 인스턴스를 생성할 때마다 값이 초기화되므로 주의</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>(참고)<br />
클래스 로딩(Class Loading)이란?<br />
가상머신이 특정 클래스 정보를 읽는 행위를 말한다.<br />
특정 클래스의 인스턴스 생성을 위해서는 해당 클래스가 반드시 가상머신에 의해 로딩되어야 한다.<br />
즉, 인스턴스 생성보다 클래스 로딩이 먼저이다.</p>

<h3 id="--클래스-변수를-언제-유용하게-활용할-것인가">- <u>클래스 변수를 언제 유용하게 활용할 것인가?</u></h3>
<blockquote>
  <p>인스턴스 간에 데이터 공유가 필요한 상황에서 클래스 변수를 선언한다.</p>
</blockquote>

<p>예시를 통해서 한 번 알아보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Circle</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.1415</span><span class="o">;</span>    <span class="c1">// 변하지 않는, 참조가 목적인 값</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">radius</span><span class="o">;</span>

    <span class="nc">Circle</span><span class="o">(</span><span class="kt">double</span> <span class="n">radius</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">radius</span> <span class="o">=</span> <span class="n">radius</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">showPerimeter</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">double</span> <span class="n">peri</span> <span class="o">=</span> <span class="o">(</span><span class="n">radius</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span> <span class="o">*</span> <span class="no">PI</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"둘레: "</span> <span class="o">+</span> <span class="n">peri</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">showArea</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">double</span> <span class="n">area</span> <span class="o">=</span> <span class="o">(</span><span class="n">radius</span> <span class="o">*</span> <span class="n">radius</span><span class="o">)</span> <span class="o">*</span> <span class="no">PI</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"넓이: "</span> <span class="o">+</span> <span class="n">area</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CircleConstPI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Circle</span> <span class="n">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Circle</span><span class="o">(</span><span class="mf">1.2</span><span class="o">);</span>
        <span class="n">circle</span><span class="o">.</span><span class="na">showArea</span><span class="o">();</span> <span class="n">circle</span><span class="o">.</span><span class="na">showPerimeter</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>포인트는 이거다. PI(원주율)처럼</p>
<ol>
  <li>모든 Circle 인스턴스가 참조해야 하는 값이지만,</li>
  <li>인스턴스가 각각 지녀야 하는 값은 아니라면
클래스 변수로 선언되는 것이 적당하다.</li>
</ol>

<blockquote>
  <p>참조를 목적으로만 존재하는 값은 final 선언이 된 클래스 변수에 담는다.</p>
</blockquote>

<h2 id="10-2-static-선언을-붙여서-하는-클래스-메소드">10-2. static 선언을 붙여서 하는 클래스 메소드</h2>
<p>클래스 메소드는 그 성격이 클래스 변수와 유사하다.<br />
접근 방법, 인스턴스 생성 이전부터 호출이 가능한 점, 어느 인스턴스에도 속하지 않는다는 점들 모두 클래스 변수와 동일하다.</p>

<h3 id="--클래스-메소드의static-메소드의-정의와-호출">- <u>클래스 메소드의(static 메소드의) 정의와 호출</u></h3>
<p>클래스 변수와 동일한 특성을 가진다.</p>
<ul>
  <li>인스턴스 생성 이전부터 접근이 가능하다.</li>
  <li>어느 인스턴스에도 속하지 않는다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">NumberPrinter</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span> <span class="c1">// 클래스 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showDouble</span><span class="o">(</span><span class="kt">double</span> <span class="n">n</span><span class="o">){</span>   <span class="c1">// 클래스 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">pritnln</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ClassMethod</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">NumberPrinter</span><span class="o">.</span><span class="na">showInt</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>  <span class="c1">// 클래스 이름을 통한 클래스 메소드 호출</span>

        <span class="nc">NumberPrinter</span> <span class="n">np</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NumberPrinter</span><span class="o">();</span> 
        <span class="n">np</span><span class="o">.</span><span class="na">showDouble</span><span class="o">(</span><span class="mf">3.15</span><span class="o">);</span>    <span class="c1">// 인스턴스 이름을 통한 클래스 메소드 호출</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--클래스-메소드로-정의하는-것이-더-나은-경우">- <u>클래스 메소드로 정의하는 것이 더 나은 경우</u></h3>
<p>다음의 예시를 보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SimpleCalculator</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.1415</span><span class="o">;</span>

    <span class="kt">double</span> <span class="nf">add</span><span class="o">(</span><span class="kt">double</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">double</span> <span class="nf">min</span><span class="o">(</span><span class="kt">double</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">n1</span> <span class="o">-</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">double</span> <span class="nf">calCircleArea</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">PI</span> <span class="o">*</span> <span class="n">r</span> <span class="o">*</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">double</span> <span class="nf">calCirclePeri</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">PI</span> <span class="o">*</span> <span class="o">(</span><span class="n">r</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>SimpleCalculator에 정의된 메소드가 갖는 특징 두 가지는 다음과 같다.</p>
<ul>
  <li>모두 외부에 기능을 제공하기 위한 메소드들이다.</li>
  <li>모두 인스턴스 변수의 값을 참조하거나 수정하지 않는다.</li>
</ul>

<p>따라서, 굳이 저 메소드들은 인스턴스에 속할 이유가 없다. 그럼 적절하게 클래스를 수정해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SimpleBetterCalculator</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.1415</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kt">double</span> <span class="nf">add</span><span class="o">(</span><span class="kt">double</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">double</span> <span class="nf">min</span><span class="o">(</span><span class="kt">double</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">n1</span> <span class="o">-</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">double</span> <span class="nf">calCircleArea</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">PI</span> <span class="o">*</span> <span class="n">r</span> <span class="o">*</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">double</span> <span class="nf">calCirclePeri</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">PI</span> <span class="o">*</span> <span class="o">(</span><span class="n">r</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>메소드에 static 선언을 추가함으로 인해 불필요한 인스턴스의 생성 과정을 생략할 수 있게 되었다.<br />
실제로 ‘클래스 메소드’로 구성된, 인스턴스의 생성을 목적으로 설계되지 않은 클래스들도 존재한다.</p>

<h3 id="--클래스-메소드에서-인스턴스-변수에-접근이-가능할까">- <u>클래스 메소드에서 인스턴스 변수에 접근이 가능할까?</u></h3>
<blockquote>
  <p>클래스 메소드에서 같은 클래스에 선언된 인스턴스 변수에 접근이 가능한가?</p>
</blockquote>

<p><img src="/assets/images/java-lang/10-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
클래스 메소드는 인스턴스에 속하지 않으므로 인스턴스 변수에 접근이 불가능하다.<br />
같은 이유로 클래스 메소드는 인스턴스 메소드의 호출도 불가능하다.</p>

<h2 id="10-3-systemoutprintln-그리고-public-static-void-main">10-3. System.out.println() 그리고 public static void main()</h2>
<h3 id="--systemoutprintlndptj-out과-println의-정체는">- <u>System.out.println()dptj out과 println의 정체는?</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">System</span> <span class="kd">extends</span> <span class="nc">Object</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">PrintStream</span> <span class="n">out</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>System에 위치한 클래스 변수 out이 참조하는 인스턴스의 println 메소드를 호출하는 문장</p>
</blockquote>

<h3 id="--main-메소드는-어디에-위치시켜야하는가">- <u>main 메소드는 어디에 위치시켜야하는가?</u></h3>
<p>일반적으로는 main 메소드를 담을 목적으로 별도의 클래스를 정의한다.<br />
하지만 main 메소드는 static 메소드이기 때문에, 즉 특정 인스턴스의 멤버로 존재하는 메소드가 아니기 때문에 위치가 상관이 없다.</p>

<h2 id="10-4-또-다른-용도의-static-선언">10-4. 또 다른 용도의 static 선언</h2>
<h3 id="--static-초기화-블록static-initialization-block">- <u>static 초기화 블록(Static Initialization Block)</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.time.LocalDate</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DateOfExecution</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="nc">String</span> <span class="n">date</span><span class="o">;</span> <span class="c1">// 클래스 변수 선언</span>

    <span class="kd">static</span> <span class="o">{</span>
        <span class="nc">LocalDate</span> <span class="n">nDate</span> <span class="o">=</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
        <span class="n">date</span> <span class="o">=</span> <span class="n">nDate</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">date</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>date는 클래스 변수이므로 인스턴스 생성 시가 아닌 클래스가 로드될 때 초기화되어야 한다.<br />
따라서, 생성자에 넣는 것이 아닌 static 초기화 블록을 사용해야한다.</p>

<h3 id="--static-import-선언">- <u>static import 선언</u></h3>
<p>java.lang.Math에는 여러 클래스 변수와 클래스 메소드들이 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.lang.*</span><span class="o">;</span> <span class="c1">// 컴파일러가 자동으로 삽입하는 import 선언</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">PI</span><span class="o">);</span>    <span class="c1">// 따라서 다음과 같은 접근이 허용된다.</span>
</code></pre></div></div>

<p>하지만, 그냥 클래스 변수의 이름만으로 접근하고 싶은 경우가 있다.<br />
이런 경우 static import를 사용하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.*;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StaticImport</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">E</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">PI</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">abs</span><span class="o">(-</span><span class="mi">55</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">(</span><span class="mi">77</span><span class="o">,</span> <span class="mi">88</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span><span class="o">(</span><span class="mi">33</span><span class="o">,</span> <span class="mi">55</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>적절히, 최소한으로 사용하면 도음이 되지만 무분별하게 사용한다면 해당 메소드 또는 변수가 어디에 저장되고 선언된 것인지 구분이 힘들어져 오히려 방해가 될 수 있다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry></feed>