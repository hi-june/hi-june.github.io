<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-10-18T01:06:56+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 14 - 클래스의 상속 1: 상속의 기본</title><link href="http://localhost:4000/java%20lang/Chap14/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 14 - 클래스의 상속 1: 상속의 기본" /><published>2022-10-17T00:00:00+09:00</published><updated>2022-10-17T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap14</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap14/"><![CDATA[<h2 id="14-1-상속의-기본-문법-이해">14-1. 상속의 기본 문법 이해</h2>
<h3 id="--상속에-대한-매우-치명적인-오해">- <u>상속에 대한 매우 치명적인 오해</u></h3>
<p>상속의 이유와 목적에 대해 설명할 때, 단순히 이렇게 답하는 경우가 있다.</p>
<blockquote>
  <p>상속은 코드의 재활용을 위한 문법이다..?</p>
</blockquote>

<p>하지만 객체지향 기반의 개발을 공부하다보면 상속을 단순히 코드의 재활용을 위한 문법이라기보단 다음과 같은 설명이 더 적합하다.</p>
<blockquote>
  <p>연관된 일련의 클래스들에 대해 공통적인 규약(규칙)을 정의할 수 있다.</p>
</blockquote>

<h3 id="--상속의-가장-기본적인-특성">- <u>상속의 가장 기본적인 특성</u></h3>
<p>상속을 단순하게 설명하면,</p>
<blockquote>
  <p>기존에 정의된 클래스에 메소드와 변수를 추가하여 새로운 클래스를 정의하는 것이다.</p>
</blockquote>

<p>Man 클래스를 상속하여 새로운 클래스 BusinessMan 클래스를 만들어보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Man</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourName</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My name is "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BusinessMan</span> <span class="kd">extends</span> <span class="nc">Man</span> <span class="o">{</span> <span class="c1">// Man을 상속하는 BusinessMan</span>
    <span class="nc">String</span> <span class="n">company</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">position</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourInfo</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My company is "</span> <span class="o">+</span> <span class="n">company</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My position is "</span> <span class="o">+</span> <span class="n">position</span><span class="o">);</span>
        <span class="n">tellYourName</span><span class="o">();</span> <span class="c1">// Man 클래스를 상속했기 때문에 호출 가능!</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-1.png" alt="image" width="50%" height="50%" />
<img src="/assets/images/java-lang/14-2.png" alt="image" width="49%" height="50%" /><br /></p>

<h3 id="--상속과-생성자">- <u>상속과 생성자</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SuperCLS</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Super Class!!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SubCLS</span> <span class="kd">extends</span> <span class="nc">SuperCLS</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sub Class!!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperSubCon</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-3.png" alt="image" width="40%" height="40%" /><br /></p>

<ol>
  <li>하위 클래스의 인스턴스 생성 시 상위 클래스, 하위 클래스의 생성자 ‘모두’ 호출된다.</li>
  <li>하위 클래스의 인스턴스 생성 시 상위 클래스의 생성자가 ‘먼저’ 호출된다.</li>
</ol>

<p><br />그렇다면, 상위 클래스의 생성자가 여러 개 있을 시 어떻게 명시적으로 호출할 수 있을까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SuperCLS</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// 1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SuperCLS()"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">// 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SuperCLS(int i)"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 3</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SuperCLS(int i, int j)"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SubCLS</span> <span class="kd">extends</span> <span class="nc">SuperCLS</span> <span class="o">{</span> <span class="c1">// super(); // 상위 클래스의 생성자를 명시적으로 호출하지 않으면 자동으로 호출됨</span>
    <span class="c1">// super를 이용한 상위 클래스의 생성자 호출문은 생성자의 첫 문장에 들어가야 함</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SubCLS()"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>   <span class="c1">// 상위 클래스의 2번 메소드 호출</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SubCLS(int i)"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>    <span class="c1">// 상위 클래스의 3번 메소드 호출</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SubCLS(int i, int j)"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperSubCon2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1. "</span><span class="o">);</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2. "</span><span class="o">);</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3. "</span><span class="o">);</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-4.png" alt="image" width="60%" height="60%" /><br /></p>

<h3 id="--상속-관계에-있는-두-클래스의-적절한-생성자-정의">- <u>상속 관계에 있는 두 클래스의 적절한 생성자 정의</u></h3>
<blockquote>
  <p>모든 멤버는 자신이 속한 클래스에서 초기화되는 것이 좋다.</p>
</blockquote>

<p>따라서, 상속에서도 마찬가지로 상위 클래스의 멤버는 상위 클래스의 생성자를 통해서 초기화해야한다.<br />
앞서 만든 BusinessMan 클래스를 리펙토링해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Man</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Man</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourName</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My name is "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">BusinessMan</span> <span class="kd">extends</span> <span class="nc">Man</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">company</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">position</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BusinessMan</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">company</span><span class="o">,</span> <span class="nc">String</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">company</span> <span class="o">=</span> <span class="n">company</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">position</span> <span class="o">=</span> <span class="n">position</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My company is "</span> <span class="o">+</span> <span class="n">company</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My position is "</span> <span class="o">+</span> <span class="n">position</span><span class="o">);</span>
        <span class="n">tellYourName</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBusinessMan</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">BusinessMan</span> <span class="n">man</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BusinessMan</span><span class="o">(</span><span class="s">"Hi-June"</span><span class="o">,</span> <span class="s">"TUK"</span><span class="o">,</span> <span class="s">"Developer"</span><span class="o">);</span>
        <span class="n">man</span><span class="o">.</span><span class="na">tellYourInfo</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-5.png" alt="image" width="40%" height="40%" /><br /></p>

<h3 id="--단일-상속만을-지원하는-자바">- <u>단일 상속만을 지원하는 자바</u></h3>
<p>자바는 프로그램이 과도하게 복잡해지는 것을 방지하기 위해 단일 상속만을 지원한다.<br />
하나의 클래스가 상속할 수 있는 클래스의 수가 최대 하나라는 것을 의미한다.</p>

<p>(참고) 다중 상속을 하게 되면 어떤 문제가 생길까?</p>
<ol>
  <li>
    <p>애매한 상황이 발생한다.<br />
<img src="/assets/images/java-lang/14-6.png" alt="image" width="40%" height="40%" /><br />
동일한 이름을 가진 print()를 상속받을 때 문제가 생긴다.</p>
  </li>
  <li>
    <p>다이아몬드 문제<br />
<img src="/assets/images/java-lang/14-7.png" alt="image" width="40%" height="40%" /><br />
show() 메소드의 경로에 대해서 애매한 문제가 발생한다.</p>
  </li>
</ol>

<h2 id="14-2-클래스-변수-클래스-메소드와-상속">14-2. 클래스 변수, 클래스 메소드와 상속</h2>
<h3 id="--static-선언이-붙는-클래스-변수와-클래스-메소드의-상속">- <u>static 선언이 붙는 '클래스 변수'와 '클래스 메소드'의 상속</u></h3>
<p>클래스 변수와 클래스 메소드의 특징은 다음과 같다.</p>

<ol>
  <li>인스턴스의 생성과 상관 없이 접근이 가능하다.</li>
  <li>클래스 내부와 외부에서(접근 수준 지시자가 허용하면) 접근이 가능하다.</li>
  <li>클래스 변수와 클래스 메소드가 위치한 클래스 내에서는 직접 접근이 가능하다.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SuperCLS</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>   <span class="c1">// 클래스 변수</span>

    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">count</span><span class="o">++;</span>    <span class="c1">// 클래스 내에서는 직접 접근이 가능</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>클래스 변수는 인스턴스의 멤버로써 존재하지 않는다.<br />
따라서, 이를 상속하는 하위 클래스의 멤버로도 존재할 수 없다.<br />
일반적으로 static 변수에 접근하듯이 접근하면 된다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 13 - 배열(Array)</title><link href="http://localhost:4000/java%20lang/Chap13/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 13 - 배열(Array)" /><published>2022-10-15T00:00:00+09:00</published><updated>2022-10-15T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap13</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap13/"><![CDATA[<h2 id="13-1-1차원-배열의-이해와-활용">13-1. 1차원 배열의 이해와 활용</h2>
<blockquote>
  <p>배열: 자료형이 같은 둘 이상의 값을 저장할 수 있는 메모리 공간</p>
</blockquote>

<h3 id="--1차원-배열의-생성방법">- <u>1차원 배열의 생성방법</u></h3>
<p>자바는 배열도 ‘인스턴스’로 처리한다.<br />
<img src="/assets/images/java-lang/13-1.png" alt="image" width="40%" height="40%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayIsInstance</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 길이가 5인 int형 1차원 배열의 생성</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ar1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>

        <span class="c1">// 배열의 참조변수와 인스턴스 생성 분리</span>
        <span class="kt">double</span><span class="o">[]</span> <span class="n">ar2</span><span class="o">;</span>
        <span class="n">ar2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>

        <span class="c1">// 배열 '인스턴스 변수(length)' 접근</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배열 ar1의 길이: "</span> <span class="o">+</span> <span class="n">ar1</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"배열 ar2의 길이: "</span> <span class="o">+</span> <span class="n">ar2</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<p>다음 예시처럼 인스턴스를 저장할 수 있는 배열을 선언하는 방법도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">conts</span><span class="o">;</span>

    <span class="nc">Box</span><span class="o">(</span><span class="nc">String</span> <span class="n">conts</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">conts</span> <span class="o">=</span> <span class="n">conts</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">conts</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayIsInstance2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span><span class="o">[]</span> <span class="n">boxes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>   <span class="c1">// 길이가 5인 Box형 1차원 배열의 생성</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"length : "</span> <span class="o">+</span> <span class="n">boxes</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>주의해야할 점은<br />
이는 Box 인스턴스 5개를 저장할 수 있는 ‘참조변수의 배열’ 이라는 점이다.<br />
즉, Box 인스턴스의 생성과는 관계가 없고, 위 문장을 통해 5개의 Box 인스턴스를 저장할 수 있는 배열이 생성될 뿐이다.</p>

<h3 id="--배열을-대상으로-한-값의-저장과-참조">- <u>배열을 대상으로 한 값의 저장과 참조</u></h3>
<p>위의 Box 예시로 배열 대상의 값 저장 및 참조 방법을 알아보자.<br />
<img src="/assets/images/java-lang/13-2.png" alt="image" width="40%" height="40%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">conts</span><span class="o">;</span>

    <span class="nc">Box</span><span class="o">(</span><span class="nc">String</span> <span class="n">conts</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">conts</span> <span class="o">=</span> <span class="n">conts</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">conts</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BoxArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span><span class="o">[]</span> <span class="n">boxes</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>

        <span class="c1">// 배열에 인스턴스 저장</span>
        <span class="n">boxes</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">(</span><span class="s">"One"</span><span class="o">);</span>
        <span class="n">boxes</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">(</span><span class="s">"Two"</span><span class="o">);</span>
        <span class="n">boxes</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">(</span><span class="s">"Three"</span><span class="o">);</span>

        <span class="c1">// 저장된 인스턴스의 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">boxes</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--배열을-생성과-동시에-초기화하기">- <u>배열을 생성과 동시에 초기화하기</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[]</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>    <span class="c1">// 첫 번째 방법</span>
<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">};</span>  <span class="c1">// 두 번째 방법</span>
</code></pre></div></div>

<h3 id="--참조변수-선언의-두-가지-방법">- <u>참조변수 선언의 두 가지 방법</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
<span class="kt">int</span> <span class="n">ar</span><span class="o">[]</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
</code></pre></div></div>

<h3 id="--배열의-참조-값과-메소드">- <u>배열의 참조 값과 메소드</u></h3>
<p>배열도 인스턴스이므로 메소드 호출 시 참조 값의 전달 및 반환이 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="kt">int</span> <span class="nf">sumOfAry</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 배열의 참조 값 전달</span>
    <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
        <span class="n">sum</span> <span class="o">+=</span> <span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
    
    <span class="k">return</span> <span class="n">sum</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="nf">makeNewIntAry</span><span class="o">(</span><span class="kt">int</span> <span class="n">len</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">len</span><span class="o">];</span>
    <span class="k">return</span> <span class="n">ar</span><span class="o">;</span>  <span class="c1">// 배열의 참조 값 반환</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--배열의-초기화와-배열의-복사">- <u>배열의 초기화와 배열의 복사</u></h3>
<p>배열이 생성되면 모든 요소는 0 또는 null로 초기화된다.<br />
따라서 특정 값으로 초기화하고 싶다면 java.util.Arrays에 정의되어있는 다음 메소드를 사용한다.<br />
<img src="/assets/images/java-lang/13-3.png" alt="image" width="70%" height="70%" /><br /></p>

<p><br />
또, 배열을 복사해야 하는 상황도 종종 생기는데, 이 때는 java.lang.System에 있는 다음 메소드를 사용한다.<br />
<img src="/assets/images/java-lang/13-4.png" alt="image" width="70%" height="70%" /><br /></p>

<p><br />
코드를 통해 확인해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayUtils</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ar1</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ar2</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">10</span><span class="o">];</span>

        <span class="nc">Arrays</span><span class="o">.</span><span class="na">fill</span><span class="o">(</span><span class="n">ar1</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>    <span class="c1">// 배열 ar1을 7로 초기화</span>

        <span class="c1">// 배열 ar1을 ar2로 부분 복사</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">ar1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="n">ar2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>    <span class="c1">// ar1의 0번 인덱스부터 5개의 요소를 ar2의 2번 인덱스로 부분 복사</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar1</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ar1</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar2</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ar2</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/13-5.png" alt="image" width="70%" height="70%" /><br /></p>

<h2 id="13-2-enhanced-for문">13-2. enhanced for문</h2>
<p>enhanced for문은 자바5에서 추가되었다.<br />
for loop의 구조가 파이썬과 유사하게 돌아가니 참고하자.</p>

<h3 id="--enhanced-for문의-이해와-활용">- <u>enhanced for문의 이해와 활용</u></h3>
<p>배열을 사용하다보면 ‘배열에 저장된 모든 요소들’을 대상으로 연산, 참조 또는 탐색을 진행해야하는 경우를 자주 보게 된다.<br />
이러한 상황의 문장 구성을 돕기 위해 등장한 것이 enhanced for문(for-each문)이다.</p>

<p><img src="/assets/images/java-lang/13-6.png" alt="image" width="30%" height="30%" />
<img src="/assets/images/java-lang/13-7.png" alt="image" width="30%" height="30%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>

<span class="c1">// 일반 for문</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
<span class="o">}</span>

<span class="c1">// enhanced for문</span>
<span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">e</span> <span class="o">:</span> <span class="n">ar</span><span class="o">){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인스턴스-배열을-대상으로-하는-enhanced-for문">- <u>인스턴스 배열을 대상으로 하는 enhanced for문</u></h3>
<p>배열에 저장된 내용이 ‘기본 자료형의 값’이 아닌 ‘인스턴스의 참조 값’인 경우에도 달라지는 것은 없다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Bucket</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">contents</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">bucketNum</span><span class="o">;</span>

    <span class="nc">Bucket</span><span class="o">(</span><span class="kt">int</span> <span class="n">bucketNum</span><span class="o">,</span> <span class="nc">String</span> <span class="n">contents</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">bucketNum</span> <span class="o">=</span> <span class="n">bucketNum</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">contents</span> <span class="o">=</span> <span class="n">contents</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getBucketNum</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">bucketNum</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">contents</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EnhancedForInst</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Bucket</span><span class="o">[]</span> <span class="n">buckets</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bucket</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>

        <span class="n">buckets</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bucket</span><span class="o">(</span><span class="mi">101</span><span class="o">,</span> <span class="s">"Coffee"</span><span class="o">);</span>
        <span class="n">buckets</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bucket</span><span class="o">(</span><span class="mi">202</span><span class="o">,</span> <span class="s">"Computer"</span><span class="o">);</span>
        <span class="n">buckets</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Bucket</span><span class="o">(</span><span class="mi">303</span><span class="o">,</span> <span class="s">"Apple"</span><span class="o">);</span>

        <span class="c1">// 배열에서 번호가 202인 Bucket을 찾아 그 내용물을 출력하는 반복문</span>
        <span class="k">for</span><span class="o">(</span><span class="nc">Bucket</span> <span class="n">b</span> <span class="o">:</span> <span class="n">buckets</span><span class="o">){</span>
            <span class="k">if</span><span class="o">(</span><span class="n">b</span><span class="o">.</span><span class="na">getBucketNum</span><span class="o">()</span> <span class="o">==</span> <span class="mi">202</span><span class="o">){</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">b</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="13-3-다차원-배열의-이해와-활용">13-3. 다차원 배열의 이해와 활용</h2>
<h3 id="--2차원-배열의-생성과-접근">- <u>2차원 배열의 생성과 접근</u></h3>
<p><img src="/assets/images/java-lang/13-8.png" alt="image" width="90%" height="90%" /><br />
<br /></p>

<p>이해를 위해 2차원 배열을 선언해보고, 값을 순차적으로 저장해보자!</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TwoDimenArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">][</span><span class="mi">4</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// 배열에 값을 저장 및 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">// 행의 수: 3</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">// 열의 수: 4</span>
                <span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
                <span class="n">num</span><span class="o">++;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/13-9.png" alt="image" width="40%" height="40%" /><br /></p>

<h3 id="--2차원-배열의-구조">- <u>2차원 배열의 구조</u></h3>
<p><img src="/assets/images/java-lang/13-10.png" alt="image" width="70%" height="70%" /><br /></p>

<p>2차원 배열의 실제 구조를 보면 각 행을 담당하는 변수인 arr[0], arr[1], arr[2]들은<br />
각각의 ‘1차원 배열을 참조하는 참조변수’임을 알 수 있다.</p>

<p>따라서, 위의 코드를 다음과 같이 수정할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TwoDimenArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">3</span><span class="o">][</span><span class="mi">4</span><span class="o">];</span>
        <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="c1">// 배열에 값을 저장 및 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">// 행의 수: 3 -&gt; ar.length</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">// 열의 수: 4 -&gt; ar[i].length</span>
                <span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
                <span class="n">num</span><span class="o">++;</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--2차원-배열의-초기화">- <u>2차원 배열의 초기화</u></h3>
<p>1차원 배열과 마찬가지로 다음 방법을 통해 간단히 초기화가 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PartiallyFilledArray</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">arr</span> <span class="o">=</span> <span class="o">{</span>
                <span class="o">{</span><span class="mi">11</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">22</span><span class="o">,</span> <span class="mi">33</span><span class="o">},</span>
                <span class="o">{</span><span class="mi">44</span><span class="o">,</span> <span class="mi">55</span><span class="o">,</span> <span class="mi">66</span><span class="o">}</span>
        <span class="o">};</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">]</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/13-11.png" alt="image" width="40%" height="40%" /><br /></p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 12 - 콘솔 입력과 출력</title><link href="http://localhost:4000/java%20lang/Chap12/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 12 - 콘솔 입력과 출력" /><published>2022-10-13T00:00:00+09:00</published><updated>2022-10-13T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap12</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap12/"><![CDATA[<h2 id="12-1-콘솔-출력console-output">12-1. 콘솔 출력(Console Output)</h2>
<h3 id="--systemoutprintln--systmeoutprint">- <u>System.out.println &amp; Systme.out.print</u></h3>
<blockquote>
  <p>System.out.println은 참조 값이 전달되면, 이 값의 인스턴스를 대상으로 toString 메소드를 호출한다. 그리고 이때 반환되는 문자열을 출력한다.</p>
</blockquote>

<h3 id="--systemoutprintf">- <u>System.out.printf</u></h3>
<p><img src="/assets/images/java-lang/12-2.png" alt="image" width="50%" height="50%" /><br />
<br />
<img src="/assets/images/java-lang/12-1.png" alt="image" width="70%" height="70%" /><br /></p>

<h2 id="12-2-콘솔-입력console-input">12-2. 콘솔 입력(Console Input)</h2>
<h3 id="--scanner-클래스">- <u>Scanner 클래스</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Scanner</span><span class="o">(</span><span class="nc">File</span> <span class="n">source</span><span class="o">)</span>
<span class="nc">Scanner</span><span class="o">(</span><span class="nc">String</span> <span class="n">source</span><span class="o">)</span>
<span class="nc">Scanner</span><span class="o">(</span><span class="nc">InputStream</span> <span class="n">source</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="--scanner-클래스의-키보드-적용">- <u>Scanner 클래스의 키보드 적용</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="--scanner-클래스의-주요-메소드들">- <u>Scanner 클래스의 주요 메소드들</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">nextInt</span><span class="o">()</span>
<span class="kt">byte</span> <span class="nf">nextLine</span><span class="o">()</span>
<span class="nc">String</span> <span class="nf">nextLine</span><span class="o">()</span>
<span class="kt">double</span> <span class="nf">nextDouble</span><span class="o">()</span>
<span class="kt">boolean</span> <span class="nf">nextBoolean</span><span class="o">()</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 11 - 메소드 오버로딩과 String 클래스</title><link href="http://localhost:4000/java%20lang/Chap11/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 11 - 메소드 오버로딩과 String 클래스" /><published>2022-10-10T00:00:00+09:00</published><updated>2022-10-10T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap11</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap11/"><![CDATA[<h2 id="11-1-메소드-오버로딩method-overloading">11-1. 메소드 오버로딩(Method overloading)</h2>
<h3 id="--메소드-오버로딩의-조건">- <u>메소드 오버로딩의 조건</u></h3>
<p>호출할 메소드를 찾을 때 다음 두 가지 정보를 참조하여 메소드를 찾게 된다.</p>
<ol>
  <li>메소드의 이름</li>
  <li>메소드의 매개변수 정보(타입, 갯수)</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MyHome</span> <span class="o">{</span>  <span class="c1">// 매개변수의 선언이 다르면 호출된 메소드의 구분이 가능하다.</span>
    <span class="kt">void</span> <span class="nf">mySimpleRoom</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span> <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">mySimpleRoom</span><span class="o">(</span><span class="kt">int</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n2</span><span class="o">){</span> <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">mySimpleRoom</span><span class="o">(</span><span class="kt">double</span> <span class="n">d1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">d2</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>

    <span class="cm">/* 반환형은 호출할 메소드를 선택하는데 있어서의 판단 기준이 아니다.
    int simpleMethod(){ }
    double simpleMethod(){ }
    */</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--생성자도-오버로딩의-대상이-된다">- <u>생성자도 오버로딩의 대상이 된다.</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">regiNum</span><span class="o">;</span>    <span class="c1">// 주민등록 번호</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">passNum</span><span class="o">;</span>    <span class="c1">// 여권 번호</span>

    <span class="nc">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">rnum</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pnum</span><span class="o">){</span> <span class="c1">// 매개변수의 갯수가 다름</span>
        <span class="n">regiNum</span> <span class="o">=</span> <span class="n">rnum</span><span class="o">;</span>
        <span class="n">passNum</span> <span class="o">=</span> <span class="n">pnum</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nc">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">rnum</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">regiNum</span> <span class="o">=</span> <span class="n">rnum</span><span class="o">;</span>
        <span class="n">passNum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ConOverloading</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Person</span> <span class="n">choi</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">335577</span><span class="o">,</span> <span class="mi">112233</span><span class="o">);</span>    <span class="c1">// 여권이 있는 경우</span>
        <span class="nc">Person</span> <span class="n">park</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">335577</span><span class="o">);</span>   <span class="c1">// 여권이 없는 경우</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--키워드-this를-이용한-다른-생성자의-호출">- <u>키워드 this를 이용한 다른 생성자의 호출</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">regiNum</span><span class="o">;</span>    <span class="c1">// 주민등록 번호</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">passNum</span><span class="o">;</span>    <span class="c1">// 여권 번호</span>

    <span class="nc">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">rnum</span><span class="o">,</span> <span class="kt">int</span> <span class="n">pnum</span><span class="o">){</span> <span class="c1">// 매개변수의 갯수가 다름</span>
        <span class="n">regiNum</span> <span class="o">=</span> <span class="n">rnum</span><span class="o">;</span>
        <span class="n">passNum</span> <span class="o">=</span> <span class="n">pnum</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="nc">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">rnum</span><span class="o">){</span>
        <span class="k">this</span><span class="o">(</span><span class="n">rnum</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
<span class="c1">//    Person(int rnum) {</span>
<span class="c1">//        regiNum = rnum;</span>
<span class="c1">//        passNum = 0;</span>
<span class="c1">//    }</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ConOverloading</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">Person</span> <span class="n">choi</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">335577</span><span class="o">,</span> <span class="mi">112233</span><span class="o">);</span>    <span class="c1">// 여권이 있는 경우</span>
        <span class="nc">Person</span> <span class="n">park</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="mi">335577</span><span class="o">);</span>   <span class="c1">// 여권이 없는 경우</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>this는 오버로딩 된 다른 생성자를 의미한다. 이 생성자는 단순히 초기화할 값을 전달받는 역할만 하고,<br />
실제 초기화는 첫 번째로 정의된 생성자를 통해서 진행하는 형태가 된다.</p>

<h3 id="--키워드-this를-이용한-인스턴스-변수의-접근">- <u>키워드 this를 이용한 인스턴스 변수의 접근</u></h3>
<p><img src="/assets/images/java-lang/11-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
여기서 this가 의미하는 것은 ‘이 문장이 속한 인스턴스’이다.</p>

<h2 id="11-2-string-클래스">11-2. String 클래스</h2>
<h3 id="--string-클래스의-인스턴스-생성">- <u>String 클래스의 인스턴스 생성</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Simple String"</span><span class="o">);</span>
<span class="nc">String</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">"Best String"</span><span class="o">;</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str1</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>  <span class="c1">// println은 다양한 인자를 전달받을 수 있도록 오버로딩이 되어있다. </span>
</code></pre></div></div>

<h3 id="--문자열-생성을-위한-두-가지-방법의-차이점은">- <u>문자열 생성을 위한 두 가지 방법의 차이점은?</u></h3>
<p>앞서 보인 두 가지 문자열 생성 방법의 차이점을 알아보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ImmutableString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="c1">// 문자열 생성 방법 1</span>
        <span class="nc">String</span> <span class="n">str1</span> <span class="o">=</span> <span class="s">"Simple String"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">str2</span> <span class="o">=</span> <span class="s">"Simple String"</span><span class="o">;</span>

        <span class="c1">// 문자열 생성 방법 2</span>
        <span class="nc">String</span> <span class="n">str3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Simple String"</span><span class="o">);</span>
        <span class="nc">String</span> <span class="n">str4</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Simple String"</span><span class="o">);</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">str1</span> <span class="o">==</span> <span class="n">str2</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"str1과 str2는 동일 인스턴스 참조"</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"str1과 str2는 다른 인스턴스 참조"</span><span class="o">);</span>

        <span class="k">if</span><span class="o">(</span><span class="n">str3</span> <span class="o">==</span> <span class="n">str4</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"str3과 str4는 동일 인스턴스 참조"</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"str3과 str4는 다른 인스턴스 참조"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/11-2.png" alt="image" width="90%" height="90%" class="align-center" /><br />
참조변수를 대상으로 한 == 연산은 ‘참조변수의 참조 값’에 대한 비교 연산을 진행한다.</p>

<p>이러한 차이를 보이는 이유는..</p>
<blockquote>
  <p>String 인스턴스는 Immutable 인스턴스이다.</p>
</blockquote>

<p>Immutable하다는 것은 값을 변경할 수 없다는 뜻이다.<br />
즉, 문자열 인스턴스를 생성한 후에는 인스턴스가 소멸할 때까지 바꿀 수 없다.</p>

<p>이처럼 문자열 인스턴스는 데이터를 수정할 수 없는, 참조만 가능한 인스턴스이기 때문에<br />
그 내용이 같을 경우 굳이 새로운 인스턴스를 생성할 필요가 없어진다.</p>

<p>앞의 str1과 str2처럼 하나의 인스턴스를 생성해서 이를 공유하는 방식으로 코드를 처리하면<br />
이로 인해 생성되는 인스턴스의 수는 줄고 성능은 향상된다.</p>

<h2 id="11-3-string-클래스의-메소드">11-3. String 클래스의 메소드</h2>
<h3 id="--문자열-연결시키기-concatenating">- <u>문자열 연결시키기: Concatenating</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringConcat</span> <span class="o">{</span> <span class="c1">// 두 문자열을 연결시킨 문자열을 결과로 얻는다.</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">st1</span> <span class="o">=</span> <span class="s">"Coffee"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">st2</span> <span class="o">=</span> <span class="s">"Bread"</span><span class="o">;</span>

        <span class="nc">String</span> <span class="n">st3</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">st2</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">st3</span><span class="o">);</span>    <span class="c1">// CoffeBread</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--문자열의-일부를-추출하기-substring">- <u>문자열의 일부를 추출하기: Substring</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SubString</span> <span class="o">{</span>    <span class="c1">// 문자열의 뒷부분을 별도의 문자열로 추출할 수 있다.</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">st1</span> <span class="o">=</span> <span class="s">"abcdefg"</span><span class="o">;</span>

        <span class="nc">String</span> <span class="n">st2</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>  <span class="c1">// beginIndex ~ 끝까지 추출</span>
        <span class="nc">String</span> <span class="n">st3</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span><span class="mi">4</span><span class="o">);</span>    <span class="c1">// beginIndex ~ endIndex 사이 추출</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">st2</span><span class="o">);</span>    <span class="c1">// cdefg</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">st3</span><span class="o">);</span>    <span class="c1">// cd</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--문자열의-내용-비교-comparing">- <u>문자열의 내용 비교: comparing</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CompString</span> <span class="o">{</span>
    <span class="cm">/**
     1. equals
     2. compareTo
     3. compareToIgnoreCase
     */</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">st1</span> <span class="o">=</span> <span class="s">"Lexicographically"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">st2</span> <span class="o">=</span> <span class="s">"lexicographically"</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">cmp1</span><span class="o">,</span> <span class="n">cmp2</span><span class="o">;</span>

        <span class="k">if</span><span class="o">(</span><span class="n">st1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">st2</span><span class="o">))</span> <span class="c1">// 두 인스턴스가 지니는 문자열이 같이면 true, 다르면 false를 반환함</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 같음"</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 다름"</span><span class="o">);</span>


        <span class="cm">/*
        두 문자열의 내용이 일치하면 0
        호출된 인스턴스의 문자열(st1)이 인자로 전달된 문자열(st2)보다 앞서면 0보다 작은 값 반환
        호출된 인스턴스의 문자열(st1)이 인자로 전달된 문자열(st2)보다 뒤서면 0보다 큰 값 반환
         */</span>
        <span class="n">cmp1</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">st2</span><span class="o">);</span>   <span class="c1">// 두 문자열의 사전 편찬 상 순서를 비교함.</span>

        <span class="k">if</span><span class="o">(</span><span class="n">cmp1</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 일치합니다."</span><span class="o">);</span>
        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">cmp1</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"사전의 앞에 위치하는 문자: "</span> <span class="o">+</span> <span class="n">st1</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"사전의 앞에 위치하는 문자: "</span> <span class="o">+</span> <span class="n">st2</span><span class="o">);</span>


        <span class="cm">/*
        사전 편찬 순서상 대문자는 소문자보다 앞에 위치한다.
        하지만 compareToIgnoreCase는 이름 그대로, 문자열 비교에 있어서 대소문자 구분을 하지 않는다.
        그 외에 부분에 대해서는 compareTo와 동일하다.
         */</span>
        <span class="n">cmp2</span> <span class="o">=</span> <span class="n">st1</span><span class="o">.</span><span class="na">compareToIgnoreCase</span><span class="o">(</span><span class="n">st2</span><span class="o">);</span>

        <span class="k">if</span><span class="o">(</span><span class="n">cmp2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 같습니다."</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"두 문자열은 다릅니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--기본-자료형의-값을-문자열로-바꾸기">- <u>기본 자료형의 값을 문자열로 바꾸기</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">b</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">char</span> <span class="n">c</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">double</span> <span class="n">d</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">float</span> <span class="n">f</span><span class="o">)</span>
<span class="kd">static</span> <span class="nc">String</span> <span class="nf">valueOf</span><span class="o">(</span><span class="kt">long</span> <span class="n">l</span><span class="o">)</span>
</code></pre></div></div>
<p>String 클래스에 정의되어 있는 위의 메소드들을 호출하면 기본 자료형의 값을 문자열로 바꿀 수 있다.<br />
클래스 메소드이므로 다음과 같이 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">e</span> <span class="o">=</span> <span class="mf">2.718281</span><span class="o">;</span>
<span class="nc">String</span> <span class="n">se</span> <span class="o">=</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>  <span class="c1">// "2.718281"</span>
</code></pre></div></div>

<h3 id="--stringbuilder-클래스">- <u>StringBuilder 클래스</u></h3>
<p>String의 반복적인 인스턴스 생성은 프로그램의 성능을 저하시킨다.<br />
문자열끼리의 연산은 빈번한 인스턴스의 생성을 야기시킬 수 있으므로 이를 방지하기 위해 StringBuilder 클래스를 사용한다.</p>

<p>StringBuilder 클래스는 내부적으로 문자열을 저장하기 위한 메모리 공간을 지닌다.<br />
이 메모리공간은 String 클래스의 메모리 공간과는 다르게 문자를 ‘추가’하거나 ‘삭제’하는 것이 가능하다.<br />
따라서, ‘수정하면서 유지해야 할 문자열’이 있다면 이 클래스에 그 내용을 담아서 관리하는 것이 효율적이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// StringBuilder 클래스의 메소드</span>

<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">append</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span>  <span class="c1">// 기본 자료형 데이터를 문자열 내용에 추가</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">)</span> <span class="c1">// index start부터 end 이전까지 내용 삭제</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">offset</span><span class="o">,</span> <span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="c1">// 인덱스 offset의 위치에 str에 전달된 문자열 추가</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">replace</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="nc">String</span> <span class="n">str</span><span class="o">)</span>    <span class="c1">// index start부터 end 이전까지 내용을 str으로 대체</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">reverse</span><span class="o">()</span>  <span class="c1">// 저장된 문자열의 내용을 뒤집는다.</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">substring</span><span class="o">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span> <span class="n">in</span> <span class="n">end</span><span class="o">)</span>  <span class="c1">// 메모리 공간 안의 일부 내용만 가져다 String으로 반환</span>
<span class="kd">public</span> <span class="nc">StringBuilder</span> <span class="nf">toString</span><span class="o">()</span> <span class="c1">// 메모리 공간 안의 모든 내용을 string으로 반환</span>
</code></pre></div></div>

<p>위의 매소드들은 무엇을 반환하는 것인가?</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReturnStringBuilder</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">stb1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">(</span><span class="s">"123"</span><span class="o">);</span>
        <span class="nc">StringBuilder</span> <span class="n">stb2</span> <span class="o">=</span> <span class="n">stb1</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="mi">45678</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stb1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stb2</span><span class="o">);</span>


        <span class="c1">// 인덱스 0~4까지의 문자 삭제</span>
        <span class="n">stb2</span><span class="o">.</span><span class="na">delete</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stb1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">stb2</span><span class="o">);</span>

        <span class="c1">// 참조 값의 비교</span>
        <span class="k">if</span><span class="o">(</span><span class="n">stb1</span> <span class="o">==</span> <span class="n">stb2</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"same instance"</span><span class="o">);</span>    <span class="c1">// true</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"diff instance"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음 코드의 결과는 same instance가 출력된다.<br />
즉, stb1과 stb2가 같은 인스턴스를 참조하게 된다.</p>

<p><img src="/assets/images/java-lang/11-3.png" alt="image" width="90%" height="90%" class="align-center" /><br />
따라서, 자바 컴파일러가 변환해 놓은 문장이 어떻게 처리되는지 알 수 있다.</p>

<h3 id="--stringbuilder-클래스-이전에-사용되던-stringbuffer-클래스">- <u>StringBuilder 클래스 이전에 사용되던 StringBuffer 클래스</u></h3>
<p>StringBuffer 클래스는 자바 5에서 등장한 클래스이다.</p>

<p>StringBuffer와 StringBuilder는</p>
<ol>
  <li>생성자를 포함한 메소드의 수</li>
  <li>메소드의 기능</li>
  <li>메소드의 이름과 매개변수의 선언
위 세 가지가 일치한다. 이는 사실상 같은 클래스임을 의미한다.</li>
</ol>

<p>그러나 차이점이 하나 있는데,</p>
<blockquote>
  <p>StringBuffer는 쓰레드에 안전하지만, StringBuilder는 쓰레드에 안전하지 않다.</p>
</blockquote>

<p>StringBuffer    -&gt; 멀티 쓰레드 환경에서 안전, 속도 느림<br />
StringBuilder   -&gt; 멀티 쓰레드 환경에서 안전하지 않음, 속도 빠름</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 10 - 클래스 변수와 클래스 메소드</title><link href="http://localhost:4000/java%20lang/Chap10/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 10 - 클래스 변수와 클래스 메소드" /><published>2022-10-09T00:00:00+09:00</published><updated>2022-10-09T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap10</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap10/"><![CDATA[<h2 id="10-1-static-선언을-붙여서-하는-클래스-변수">10-1. static 선언을 붙여서 하는 클래스 변수</h2>
<ul>
  <li>인스턴스 변수: 인스턴스가 생성되었을 때, 생성된 인스턴스 안에 존재하는 변수</li>
  <li>클래스 변수: 인스턴스의 생성과 상관없이 존재하는 변수</li>
</ul>

<h3 id="--선언된-클래스의-모든-인스턴스가-공유하는-클래스-변수static-변수">- <u>선언된 클래스의 모든 인스턴스가 공유하는 클래스 변수(static 변수)</u></h3>
<blockquote>
  <p>static으로 선언된 변수는 변수가 선언된 클래스의 모든 인스턴스가 공유하는 변수이다.</p>
</blockquote>

<p>클래스 변수는 ‘어떠한 인스턴스에도 속하지 않는 상태로 메모리 공간에 딱 하나만 존재하는 변수’이다.<br />
다만 이 변수가 선언된 클래스의 인스턴스들은 이 변수에 바로 접근할 수 있는 권한이 있을 뿐이다.</p>

<h3 id="--클래스-변수의-접근-방법">- <u>클래스 변수의 접근 방법</u></h3>
<p>클래스 변수에 접근하는 방법은 접근 영역을 기준으로 크게 두 가지로 나뉜다.</p>
<ul>
  <li>클래스 내부 접근: 변수의 이름을 통해 직접 접근</li>
  <li>클래스 외부 접근: 클래스 또는 인스턴스의 이름을 통해 접근</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">AccessWay</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="nc">AccessWay</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">incrCnt</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">incrCnt</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 클래스 내부에서 이름을 통한 접근</span>
        <span class="n">num</span><span class="o">++;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ClassVarAccess</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">AccessWay</span> <span class="n">way</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">AccessWay</span><span class="o">();</span>
        <span class="n">way</span><span class="o">.</span><span class="na">num</span><span class="o">++;</span>  <span class="c1">// 외부에서 '인스턴스'의 이름을 통한 접근(num 변수가 인스턴스 변수인지 클래스 변수인지 분간이 안 됨!)</span>
        <span class="nc">AccessWay</span><span class="o">.</span><span class="na">num</span><span class="o">++;</span>    <span class="c1">// 외부에서 '클래스'의 이름을 통한 접근(따라서 이 접근법이 추천된다!)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"num + "</span> <span class="o">+</span> <span class="nc">AccessWay</span><span class="o">.</span><span class="na">num</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--클래스-변수의-초기화-시점과-초기화-방법">- <u>클래스 변수의 초기화 시점과 초기화 방법</u></h3>
<blockquote>
  <p>클래스 변수는 인스턴스 생성 이전에 메모리 공간에 존재한다.</p>
</blockquote>

<p>클래스 변수는 해당 클래스 정보가 가상머신에 의해 읽히는 순간 메모리 공간에 할당되고 초기화된다.<br />
따라서 다음과 같이 생성자를 통한 클래스 변수의 초기화를 진행하지 않도록 주의해야한다.(인스턴스 생성시마다 값이 리셋되기 때문)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">InstCnt</span><span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">instNum</span> <span class="o">=</span> <span class="mi">100</span><span class="o">;</span>   <span class="c1">// 정상적인 초기화 방법</span>
    
    <span class="nc">InstCnt</span><span class="o">(){</span>
        <span class="n">instNum</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>    <span class="c1">// 인스턴스를 생성할 때마다 값이 초기화되므로 주의</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>(참고)<br />
클래스 로딩(Class Loading)이란?<br />
가상머신이 특정 클래스 정보를 읽는 행위를 말한다.<br />
특정 클래스의 인스턴스 생성을 위해서는 해당 클래스가 반드시 가상머신에 의해 로딩되어야 한다.<br />
즉, 인스턴스 생성보다 클래스 로딩이 먼저이다.</p>

<h3 id="--클래스-변수를-언제-유용하게-활용할-것인가">- <u>클래스 변수를 언제 유용하게 활용할 것인가?</u></h3>
<blockquote>
  <p>인스턴스 간에 데이터 공유가 필요한 상황에서 클래스 변수를 선언한다.</p>
</blockquote>

<p>예시를 통해서 한 번 알아보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Circle</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.1415</span><span class="o">;</span>    <span class="c1">// 변하지 않는, 참조가 목적인 값</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">radius</span><span class="o">;</span>

    <span class="nc">Circle</span><span class="o">(</span><span class="kt">double</span> <span class="n">radius</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">radius</span> <span class="o">=</span> <span class="n">radius</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">showPerimeter</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">double</span> <span class="n">peri</span> <span class="o">=</span> <span class="o">(</span><span class="n">radius</span> <span class="o">*</span> <span class="mi">2</span><span class="o">)</span> <span class="o">*</span> <span class="no">PI</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"둘레: "</span> <span class="o">+</span> <span class="n">peri</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">showArea</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">double</span> <span class="n">area</span> <span class="o">=</span> <span class="o">(</span><span class="n">radius</span> <span class="o">*</span> <span class="n">radius</span><span class="o">)</span> <span class="o">*</span> <span class="no">PI</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"넓이: "</span> <span class="o">+</span> <span class="n">area</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CircleConstPI</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Circle</span> <span class="n">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Circle</span><span class="o">(</span><span class="mf">1.2</span><span class="o">);</span>
        <span class="n">circle</span><span class="o">.</span><span class="na">showArea</span><span class="o">();</span> <span class="n">circle</span><span class="o">.</span><span class="na">showPerimeter</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>포인트는 이거다. PI(원주율)처럼</p>
<ol>
  <li>모든 Circle 인스턴스가 참조해야 하는 값이지만,</li>
  <li>인스턴스가 각각 지녀야 하는 값은 아니라면
클래스 변수로 선언되는 것이 적당하다.</li>
</ol>

<blockquote>
  <p>참조를 목적으로만 존재하는 값은 final 선언이 된 클래스 변수에 담는다.</p>
</blockquote>

<h2 id="10-2-static-선언을-붙여서-하는-클래스-메소드">10-2. static 선언을 붙여서 하는 클래스 메소드</h2>
<p>클래스 메소드는 그 성격이 클래스 변수와 유사하다.<br />
접근 방법, 인스턴스 생성 이전부터 호출이 가능한 점, 어느 인스턴스에도 속하지 않는다는 점들 모두 클래스 변수와 동일하다.</p>

<h3 id="--클래스-메소드의static-메소드의-정의와-호출">- <u>클래스 메소드의(static 메소드의) 정의와 호출</u></h3>
<p>클래스 변수와 동일한 특성을 가진다.</p>
<ul>
  <li>인스턴스 생성 이전부터 접근이 가능하다.</li>
  <li>어느 인스턴스에도 속하지 않는다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">NumberPrinter</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showInt</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span> <span class="c1">// 클래스 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showDouble</span><span class="o">(</span><span class="kt">double</span> <span class="n">n</span><span class="o">){</span>   <span class="c1">// 클래스 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">pritnln</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ClassMethod</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">NumberPrinter</span><span class="o">.</span><span class="na">showInt</span><span class="o">(</span><span class="mi">20</span><span class="o">);</span>  <span class="c1">// 클래스 이름을 통한 클래스 메소드 호출</span>

        <span class="nc">NumberPrinter</span> <span class="n">np</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">NumberPrinter</span><span class="o">();</span> 
        <span class="n">np</span><span class="o">.</span><span class="na">showDouble</span><span class="o">(</span><span class="mf">3.15</span><span class="o">);</span>    <span class="c1">// 인스턴스 이름을 통한 클래스 메소드 호출</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--클래스-메소드로-정의하는-것이-더-나은-경우">- <u>클래스 메소드로 정의하는 것이 더 나은 경우</u></h3>
<p>다음의 예시를 보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SimpleCalculator</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.1415</span><span class="o">;</span>

    <span class="kt">double</span> <span class="nf">add</span><span class="o">(</span><span class="kt">double</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">double</span> <span class="nf">min</span><span class="o">(</span><span class="kt">double</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">n1</span> <span class="o">-</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">double</span> <span class="nf">calCircleArea</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">PI</span> <span class="o">*</span> <span class="n">r</span> <span class="o">*</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kt">double</span> <span class="nf">calCirclePeri</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">PI</span> <span class="o">*</span> <span class="o">(</span><span class="n">r</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>SimpleCalculator에 정의된 메소드가 갖는 특징 두 가지는 다음과 같다.</p>
<ul>
  <li>모두 외부에 기능을 제공하기 위한 메소드들이다.</li>
  <li>모두 인스턴스 변수의 값을 참조하거나 수정하지 않는다.</li>
</ul>

<p>따라서, 굳이 저 메소드들은 인스턴스에 속할 이유가 없다. 그럼 적절하게 클래스를 수정해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SimpleBetterCalculator</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">final</span> <span class="kt">double</span> <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.1415</span><span class="o">;</span>

    <span class="kd">static</span> <span class="kt">double</span> <span class="nf">add</span><span class="o">(</span><span class="kt">double</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">n1</span> <span class="o">+</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">double</span> <span class="nf">min</span><span class="o">(</span><span class="kt">double</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">double</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">n1</span> <span class="o">-</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">double</span> <span class="nf">calCircleArea</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">PI</span> <span class="o">*</span> <span class="n">r</span> <span class="o">*</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">double</span> <span class="nf">calCirclePeri</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="no">PI</span> <span class="o">*</span> <span class="o">(</span><span class="n">r</span> <span class="o">*</span> <span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>메소드에 static 선언을 추가함으로 인해 불필요한 인스턴스의 생성 과정을 생략할 수 있게 되었다.<br />
실제로 ‘클래스 메소드’로 구성된, 인스턴스의 생성을 목적으로 설계되지 않은 클래스들도 존재한다.</p>

<h3 id="--클래스-메소드에서-인스턴스-변수에-접근이-가능할까">- <u>클래스 메소드에서 인스턴스 변수에 접근이 가능할까?</u></h3>
<blockquote>
  <p>클래스 메소드에서 같은 클래스에 선언된 인스턴스 변수에 접근이 가능한가?</p>
</blockquote>

<p><img src="/assets/images/java-lang/10-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
클래스 메소드는 인스턴스에 속하지 않으므로 인스턴스 변수에 접근이 불가능하다.<br />
같은 이유로 클래스 메소드는 인스턴스 메소드의 호출도 불가능하다.</p>

<h2 id="10-3-systemoutprintln-그리고-public-static-void-main">10-3. System.out.println() 그리고 public static void main()</h2>
<h3 id="--systemoutprintlndptj-out과-println의-정체는">- <u>System.out.println()dptj out과 println의 정체는?</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">System</span> <span class="kd">extends</span> <span class="nc">Object</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">PrintStream</span> <span class="n">out</span><span class="o">;</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>System에 위치한 클래스 변수 out이 참조하는 인스턴스의 println 메소드를 호출하는 문장</p>
</blockquote>

<h3 id="--main-메소드는-어디에-위치시켜야하는가">- <u>main 메소드는 어디에 위치시켜야하는가?</u></h3>
<p>일반적으로는 main 메소드를 담을 목적으로 별도의 클래스를 정의한다.<br />
하지만 main 메소드는 static 메소드이기 때문에, 즉 특정 인스턴스의 멤버로 존재하는 메소드가 아니기 때문에 위치가 상관이 없다.</p>

<h2 id="10-4-또-다른-용도의-static-선언">10-4. 또 다른 용도의 static 선언</h2>
<h3 id="--static-초기화-블록static-initialization-block">- <u>static 초기화 블록(Static Initialization Block)</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.time.LocalDate</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DateOfExecution</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="nc">String</span> <span class="n">date</span><span class="o">;</span> <span class="c1">// 클래스 변수 선언</span>

    <span class="kd">static</span> <span class="o">{</span>
        <span class="nc">LocalDate</span> <span class="n">nDate</span> <span class="o">=</span> <span class="nc">LocalDate</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
        <span class="n">date</span> <span class="o">=</span> <span class="n">nDate</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">date</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>date는 클래스 변수이므로 인스턴스 생성 시가 아닌 클래스가 로드될 때 초기화되어야 한다.<br />
따라서, 생성자에 넣는 것이 아닌 static 초기화 블록을 사용해야한다.</p>

<h3 id="--static-import-선언">- <u>static import 선언</u></h3>
<p>java.lang.Math에는 여러 클래스 변수와 클래스 메소드들이 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.lang.*</span><span class="o">;</span> <span class="c1">// 컴파일러가 자동으로 삽입하는 import 선언</span>

<span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">PI</span><span class="o">);</span>    <span class="c1">// 따라서 다음과 같은 접근이 허용된다.</span>
</code></pre></div></div>

<p>하지만, 그냥 클래스 변수의 이름만으로 접근하고 싶은 경우가 있다.<br />
이런 경우 static import를 사용하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">Math</span><span class="o">.*;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StaticImport</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">E</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="no">PI</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">abs</span><span class="o">(-</span><span class="mi">55</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">max</span><span class="o">(</span><span class="mi">77</span><span class="o">,</span> <span class="mi">88</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">min</span><span class="o">(</span><span class="mi">33</span><span class="o">,</span> <span class="mi">55</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>적절히, 최소한으로 사용하면 도음이 되지만 무분별하게 사용한다면 해당 메소드 또는 변수가 어디에 저장되고 선언된 것인지 구분이 힘들어져 오히려 방해가 될 수 있다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 09 - 정보 은닉 그리고 캡슐화</title><link href="http://localhost:4000/java%20lang/Chap09/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 09 - 정보 은닉 그리고 캡슐화" /><published>2022-10-05T00:00:00+09:00</published><updated>2022-10-17T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap09</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap09/"><![CDATA[<h2 id="09-1-정보-은닉information-hiding">09-1. 정보 은닉(Information Hiding)</h2>
<p>자바에서 말하는 ‘정보’는 클래스의 ‘인스턴스 변수’를 의미한다.</p>

<p>데이터에 대해 클래스나 인스턴스 ‘외부’에서 접근하는 것을 막겠다는 뜻이다.(내부에서만 허용하겠다.)<br />
데이터는 가리고 ‘메소드’를 통해서만 접근 가능하도록 해야한다.</p>

<h3 id="--정보를-은닉해야-하는-이유">- <u>정보를 은닉해야 하는 이유</u></h3>
<p>다음 예시를 보고 문제가 무엇인지 파악해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Circle</span><span class="o">{</span>
  <span class="kt">double</span> <span class="n">rad</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
  <span class="kd">final</span> <span class="kt">double</span> <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">Circle</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">){</span>
    <span class="n">setRad</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>  <span class="c1">// 아래에 정의된 setRad 메소드 호출을 통한 초기화</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRad</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">){</span>
    <span class="k">if</span><span class="o">(</span><span class="n">r</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">){</span>  <span class="c1">// 반지름은 0보다 작을 수 없으므로</span>
      <span class="n">rad</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
      <span class="k">return</span><span class="o">;</span> <span class="c1">// 이 위치에서 메소드 빠져 나감</span>
    <span class="o">}</span>
    <span class="n">rad</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getArea</span><span class="o">(){</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">rad</span> <span class="o">*</span> <span class="n">rad</span><span class="o">)</span> <span class="o">*</span> <span class="no">PI</span><span class="o">;</span>  <span class="c1">// 원의 넓이 반환</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">UnsafeCircle</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span> <span class="n">args</span><span class="o">[]){</span>
    <span class="nc">Circle</span> <span class="n">c</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Circle</span><span class="o">(</span><span class="mf">1.5</span><span class="o">);</span> <span class="c1">// 위에서 정의한 Circle 클래스의 인스턴스를 생성</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getArea</span><span class="o">());</span>

    <span class="n">c</span><span class="o">.</span><span class="na">setRad</span><span class="o">(</span><span class="mf">2.5</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getArea</span><span class="o">());</span>

    <span class="n">c</span><span class="o">.</span><span class="na">setRad</span><span class="o">(</span><span class="mf">2.5</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getArea</span><span class="o">());</span>

    <span class="n">c</span><span class="o">.</span><span class="na">rad</span> <span class="o">=</span> <span class="o">-</span><span class="mf">4.5</span><span class="o">;</span> <span class="c1">// 옳지 않은 접근 방법, 그리고 문제가 되는 부분(멤버에 직접 접근하였다.)</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getArea</span><span class="o">());</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>setRad 메소드를 보면 Circle 클래스를 정의한 ‘개발자의 의도’를 읽을 수 있다.<br />
-&gt; 반지름의 길이 rad에 0보다 작은 값이 저장되는 일이 발생하지 않도록 하겠다.</p>

<blockquote>
  <p>이렇듯 인스턴스 변수에 저장되는 값의 종류와 범위는 해당 클래스를 정의한 사람이 가장 정확히 안다.</p>
</blockquote>

<p>만약 멤버 변수에 직접적인 접근을 허용하면, <u>컴파일 과정에서 드러나지 않는 중대한 실수</u>가 발생할 수 있다.<br />
따라서, ‘정보 은닉’을 적용한 클래스의 설계가 필요하다.</p>

<h3 id="--정보의-은닉을-위한-private-선언">- <u>정보의 은닉을 위한 private 선언</u></h3>
<p>정보 은닉을 적용한 코드를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Circle</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kt">double</span> <span class="n">rad</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// member 변수 rad에 대해 private선언을 넣어줌!</span>
    <span class="kd">final</span> <span class="kt">double</span> <span class="no">PI</span> <span class="o">=</span> <span class="mf">3.14</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Circle</span><span class="o">(</span><span class="kt">double</span> <span class="n">r</span><span class="o">){</span>
        <span class="n">setRad</span><span class="o">(</span><span class="n">r</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setRad</span><span class="o">(</span><span class="kt">double</span> <span class="n">rad</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">rad</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">){</span>    <span class="c1">// 0보다 작은 반지름이 전달되었을 시</span>
            <span class="k">this</span><span class="o">.</span><span class="na">rad</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>   <span class="c1">// 0으로 초기화</span>
        <span class="o">}</span>
        <span class="k">this</span><span class="o">.</span><span class="na">rad</span> <span class="o">=</span> <span class="n">rad</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getRad</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">rad</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">getArea</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">rad</span> <span class="o">*</span> <span class="n">rad</span><span class="o">)</span> <span class="o">*</span> <span class="no">PI</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">InfoHideCircle</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Circle</span> <span class="n">circle</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Circle</span><span class="o">(</span><span class="mf">1.5</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"반지름: "</span> <span class="o">+</span> <span class="n">circle</span><span class="o">.</span><span class="na">getRad</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"반지름: "</span> <span class="o">+</span> <span class="n">circle</span><span class="o">.</span><span class="na">getArea</span><span class="o">()</span> <span class="o">+</span> <span class="sc">'\n'</span><span class="o">);</span>

        <span class="c1">// circle.rad = 3.4;    // 컴파일 오류 발생!</span>
        <span class="n">circle</span><span class="o">.</span><span class="na">setRad</span><span class="o">(</span><span class="mf">3.4</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"반지름: "</span> <span class="o">+</span> <span class="n">circle</span><span class="o">.</span><span class="na">getRad</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"반지름: "</span> <span class="o">+</span> <span class="n">circle</span><span class="o">.</span><span class="na">getArea</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>다음 처럼 private 선언을 통해 클래스 내에 정의된 메소드 내에서의 접근만 허용해주었다.</p>

<p>setRad와 getRad처럼 ‘값의 설정’과 ‘값의 참조’를 위한 메소드를 <code class="language-plaintext highlighter-rouge">Setter</code>와 <code class="language-plaintext highlighter-rouge">Getter</code>라고 부른다.</p>
<ul>
  <li>Getter
    <ul>
      <li>인스턴스 변수의 값을 참조하는 용도로 정의된 메소드</li>
      <li>변수의 이름이 name이라면, 메소드의 이름은 getName으로 짓는 것이 관례이다.</li>
    </ul>
  </li>
  <li>Setter
    <ul>
      <li>인스턴스 변수의 값을 설정하는 용도로 정의된 메소드</li>
      <li>변수의 이름이 name이라면, 메소드의 이름은 setName으로 짓는 것이 관례이다.</li>
    </ul>
  </li>
</ul>

<h2 id="09-2-접근-수준-지시자access-level-modifiers">09-2. 접근 수준 지시자(Access-level Modifiers)</h2>
<p><img src="/assets/images/java-lang/9-1.png" alt="image" width="90%" height="90%" class="align-center" /><br /></p>
<h3 id="--네-가지-종류의-접근-수준-지시자">- <u>네 가지 종류의 '접근 수준 지시자'</u></h3>
<p>접근 수준 지시자(Access-level Modifiers)는 이름 그대로 접근의 허용 수준을 결정할 때 선언하는 키워드이다.</p>

<blockquote>
  <p>public, protected, private, default</p>
</blockquote>

<p>이러한 키워드 선언은 할 수 있는 대상이 정해져있다.</p>
<ul>
  <li>클래스 대상 정의 대상: public, default</li>
  <li>인스턴스 변수와 메소드 대상: public, protected, private, default</li>
</ul>

<h3 id="--클래스-정의-대상의-public과-default-선언이-갖는-의미">- <u>클래스 정의 대상의 public과 default 선언이 갖는 의미</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AAA</span><span class="o">{</span>
  
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ZZZ</span><span class="o">{</span>

<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>public
    <ul>
      <li>어디서든 인스턴스 생성이 가능하다.</li>
      <li>클래스 이름과 소스파일 이름이 같아야 한다. public 자체가 외부에서 공개를 할 필요가 있어서 선언한 것이므로 아예 소스파일명과 같게 만든다.</li>
      <li>하나의 소스파일엔 하나의 public class만 존재해야한다.</li>
    </ul>
  </li>
  <li>default
    <ul>
      <li>동일 패키지로 묶인 클래스 내에서만 인스턴스 생성을 허용한다.</li>
    </ul>
  </li>
</ul>

<p><br />
예시를 보며 이해해보자.<br />
<img src="/assets/images/java-lang/9-2.png" alt="image" width="40%" height="40%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">zoo</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Duck</span><span class="o">{</span> <span class="c1">// default로 선언되었으므로 동일 패키지 내에서만 인스턴스 생성 가능</span>
    <span class="c1">// 빈 클래스</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cat</span> <span class="o">{</span>  <span class="c1">// public으로 선언되었으므로 어디서든 인스턴스 생성 가능</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeCat</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Duck</span> <span class="n">quack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Duck</span><span class="o">();</span>    <span class="c1">// Duck과 같은 패키지로 묶여있기 때문에 인스턴스 생성 가능</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">animal</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeCat</span><span class="o">(){</span>
        <span class="n">zoo</span><span class="o">.</span><span class="na">Cat</span> <span class="n">yaong</span> <span class="o">=</span> <span class="k">new</span> <span class="n">zoo</span><span class="o">.</span><span class="na">Cat</span><span class="o">();</span>  <span class="c1">// Cat은 public으로 선언되었으므로 어디서든 인스턴스 생성 가능</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeDuck</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">zoo</span><span class="o">.</span><span class="na">Duck</span> <span class="n">quack</span> <span class="o">=</span> <span class="k">new</span> <span class="n">zoo</span><span class="o">.</span><span class="na">Duck</span><span class="o">();</span>    <span class="c1">// Duck은 default로 선언되었으므로 이 위치에서 인스턴스 생성 불가</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인스턴스-멤버-대상의-public-protected-private-default-선언">- <u>인스턴스 멤버 대상의 public, protected, private, default 선언</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">AAA</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="n">num1</span><span class="o">;</span>  <span class="c1">// 인스턴스 변수의 public 선언</span>
  <span class="kd">protected</span> <span class="kt">int</span> <span class="n">num2</span><span class="o">;</span> <span class="c1">// 인스턴스 변수의 protected 선언</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">num3</span><span class="o">;</span> <span class="c1">// 인스턴스 변수의 private 선언</span>
  <span class="kt">int</span> <span class="n">num4</span><span class="o">;</span> <span class="c1">// 인스턴스 변수의 default 선언</span>

  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">md1</span><span class="o">(){</span> <span class="o">}</span>  <span class="c1">// 인스턴스 메소드의 public 선언</span>
  <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">md1</span><span class="o">(){</span> <span class="o">}</span> <span class="c1">// 인스턴스 메소드의 protected 선언</span>
  <span class="kd">private</span> <span class="kt">void</span> <span class="nf">md1</span><span class="o">(){</span> <span class="o">}</span> <span class="c1">// 인스턴스 메소드의 private 선언</span>
  <span class="kt">void</span> <span class="nf">md1</span><span class="o">(){</span> <span class="o">}</span> <span class="c1">// 인스턴스 메소드의 deault 선언</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인스턴스-멤버의-public과-default-선언이-갖는-의미">- <u>인스턴스 멤버의 public과 default 선언이 갖는 의미</u></h3>
<ul>
  <li>public: 어디서든 접근이 가능하다.</li>
  <li>default: 동일 패키지로 묶인 클래스 내에서만 접근이 가능하다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">zoo</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cat</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">makeSound</span><span class="o">()</span> <span class="o">{</span>   <span class="c1">// public 메소드, 어디서든 호출 가능</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"yaong(&gt;_&lt;)"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kt">void</span> <span class="nf">makeHappy</span><span class="o">()</span> <span class="o">{</span>  <span class="c1">// default 메소드, 동일 패키지로 묶은 클래스 내에서 호출 가능</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"smile(^_^)"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">animal</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">zoo</span><span class="o">.</span><span class="na">Cat</span> <span class="n">cat</span> <span class="o">=</span> <span class="k">new</span> <span class="n">zoo</span><span class="o">.</span><span class="na">Cat</span><span class="o">();</span>
        <span class="n">welcome</span><span class="o">(</span><span class="n">cat</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">welcome</span><span class="o">(</span><span class="n">zoo</span><span class="o">.</span><span class="na">Cat</span> <span class="n">cat</span><span class="o">){</span>
        <span class="n">cat</span><span class="o">.</span><span class="na">makeSound</span><span class="o">();</span>    <span class="c1">// 호출 가능! 컴파일 성공!</span>
        <span class="c1">// cat.makeHappy(); // 호출 불가! 컴파일 오류!</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인스턴스-멤버의-private-선언이-갖는-의미">- <u>인스턴스 멤버의 private 선언이 갖는 의미</u></h3>
<p><img src="/assets/images/java-lang/9-3.png" alt="image" width="70%" height="70%" /><br /></p>

<p>동일 클래스에 정의된 메소드 내에서만 호출이 가능하다.</p>

<h3 id="--인스턴스-멤버의-protected-선언이-갖는-의미">- <u>인스턴스 멤버의 protected 선언이 갖는 의미</u></h3>
<p>서로 다른 패키지에 위치하는 두 클래스를 보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// AAA.java</span>
<span class="kn">package</span> <span class="nn">alpha</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AAA</span><span class="o">{</span>
  <span class="kd">protected</span> <span class="kt">int</span> <span class="n">num</span><span class="o">;</span>  <span class="c1">// 상속 관계에 있는 클래스에서 접근이 가능하다.</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// ZZZ.java</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ZZZ</span> <span class="kd">extends</span> <span class="n">alpha</span><span class="o">.</span><span class="na">AAA</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">init</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
    <span class="n">num</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>  <span class="c1">// 상속된 변수 num의 접근!</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>protected로 선언된 멤버는 상속 관계에 있는 다른 클래스에서 접근 가능하다.</p>
</blockquote>

<h3 id="--인스턴스-멤버를-대상으로-하는-접근-수준-지시자에-대한-정리">- <u>인스턴스 멤버를 대상으로 하는 접근 수준 지시자에 대한 정리</u></h3>
<p><img src="/assets/images/java-lang/9-4.png" alt="image" width="90%" height="90%" /><br /></p>

<h2 id="09-3-캡슐화encapsulation">09-3. 캡슐화(Encapsulation)</h2>
<p>캡슐화는 ‘정보 은닉’과 더불어 객체지향 기반의 클래스 설계에 있어 가장 기본이면서 중요한 원칙 중 하나이다.<br />
클래스 안에 ‘무엇을 넣을까’에 대한 이론을 제시하는 내용이다.</p>

<blockquote>
  <p>각자의 class가 자기 역할을 잘 하도록 Design하는 것</p>
</blockquote>

<h3 id="--캡슐화의-개념">- <u>캡슐화의 개념</u></h3>
<blockquote>
  <p>하나의 목적을 이루기 위해 관련 있는 모든 것을 하나의 클래스에 담아 두는 것</p>
</blockquote>

<p>무조건 많이 담아서도, 부족해도 캡슐화가 아니다.</p>

<h3 id="--캡슐화가-이뤄지지-않은-예제">- <u>캡슐화가 이뤄지지 않은 예제</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SinivelCap</span><span class="o">{</span>
  <span class="kt">void</span> <span class="nf">take</span><span class="o">(){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"콧물이 싹~ 납니다."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">SneezeCap</span><span class="o">{</span>
  <span class="kt">void</span> <span class="nf">take</span><span class="o">(){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"재치기가 멎습니다."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
<span class="kd">class</span> <span class="nc">SnuffleCap</span><span class="o">{</span>
  <span class="kt">void</span> <span class="nf">take</span><span class="o">(){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"코가 뻥 뚫립니다."</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ColdPatient</span><span class="o">{</span>
  <span class="kt">void</span> <span class="nf">takeSinivelCap</span><span class="o">(</span><span class="nc">SinivelCap</span> <span class="n">cap</span><span class="o">){</span>
    <span class="n">cap</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>    
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">takeSneezeCap</span><span class="o">(</span><span class="nc">SneezeCap</span> <span class="n">cap</span><span class="o">){</span>
    <span class="n">cap</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>    
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">takeSnuffleCap</span><span class="o">(</span><span class="nc">SnuffleCap</span> <span class="n">cap</span><span class="o">){</span>
    <span class="n">cap</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>    
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BadEncapsulation</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="nc">ColdPatient</span> <span class="n">suf</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ColdPatient</span><span class="o">();</span>

    <span class="n">suf</span><span class="o">.</span><span class="na">takeSinivelCap</span><span class="o">(</span><span class="k">new</span> <span class="nc">SnivelCap</span><span class="o">());</span>  <span class="c1">// 콧물 캡슐 구매 후 복용</span>

    <span class="n">suf</span><span class="o">.</span><span class="na">takeSneezeCap</span><span class="o">(</span><span class="k">new</span> <span class="nc">SneezeCap</span><span class="o">());</span> <span class="c1">// 재채기 캡슐 구매 후 복용</span>

    <span class="n">suf</span><span class="o">.</span><span class="na">takeSnuffleCap</span><span class="o">(</span><span class="k">new</span> <span class="nc">SnuffleCap</span><span class="o">());</span> <span class="c1">// 코막힘 캡슐 구매 후 복용</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>코감기 증상 완화를 위해 SinivelCap, SneezeCap, SnuffleCap 인스턴스 생성해야 한다.</p>
</blockquote>

<p>코감기 약 복용이라는 한 가지 목적의 달성을 위해 프로그래머가 알아야 할 것도 많고 코드상에서 약 복용 과정 또한 복잡하다.</p>

<h3 id="--캡슐화가-잘-이뤄진-예제">- <u>캡슐화가 잘 이뤄진 예제</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SinusCap</span><span class="o">{</span>
  <span class="kt">void</span> <span class="nf">sniTake</span><span class="o">(){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"콧물이 싹~ 납니다."</span><span class="o">);</span>
  <span class="o">}</span>
    <span class="kt">void</span> <span class="nf">sneTake</span><span class="o">(){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"재채기가 멎습니다."</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="kt">void</span> <span class="nf">sniTake</span><span class="o">(){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"코가 뻥 뚫립니다."</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kt">void</span> <span class="nf">take</span><span class="o">(){</span>
    <span class="n">sniTake</span><span class="o">();</span>
    <span class="n">sneTake</span><span class="o">();</span>
    <span class="n">snuTake</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ColdPatient</span><span class="o">{</span>
  <span class="kt">void</span> <span class="nf">takeSinus</span><span class="o">(</span><span class="nc">SinusCap</span> <span class="n">cap</span><span class="o">){</span>
    <span class="n">cap</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">OneClassEncapsulation</span><span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
    <span class="nc">ColdPatient</span> <span class="n">suf</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ColdPatient</span><span class="o">();</span>
    <span class="n">suf</span><span class="o">.</span><span class="na">takeSinus</span><span class="o">(</span><span class="k">new</span> <span class="nc">SinusCap</span><span class="o">());</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>인스턴스의 생성이 한 번으로 줄어들었고, 복용에 관한 정보(복용 순서, 약의 효능 등등)가 클래스에 모두 들어가있다.<br />
캡슐화는 이처럼 해당 클래스와 관련있는 내용을 하나의 클래스에 모두 담되 부족하게 담아서도 넘치게 담아서도 안된다!</p>

<h3 id="--포함-관계로-캡슐화-완성하기">- <u>포함 관계로 캡슐화 완성하기</u></h3>
<p>한 클래스가 다른 클래스의 인스턴스를 멤버로 가질 수 있는데, 이런 관계를 가리켜 ‘포함 관계’라 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SinivelCap</span><span class="o">{</span>   <span class="c1">// 콧물 처치용 캡슐</span>
    <span class="kt">void</span> <span class="nf">take</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"콧물이 싹~ 납니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SneezeCap</span><span class="o">{</span>    <span class="c1">// 재채기 처치용 캡슐</span>
    <span class="kt">void</span> <span class="nf">take</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"재채기가 멎습니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SnuffleCap</span><span class="o">{</span>   <span class="c1">// 코막힘 처치용 캡슐</span>
    <span class="kt">void</span> <span class="nf">take</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"코가 뻥 뚫립니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">TotalCap</span><span class="o">{</span> <span class="c1">// 포함 관계가 담긴 캡슐 class</span>
    <span class="nc">SinivelCap</span> <span class="n">siCap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SinivelCap</span><span class="o">();</span>
    <span class="nc">SneezeCap</span> <span class="n">szCap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SneezeCap</span><span class="o">();</span>
    <span class="nc">SnuffleCap</span> <span class="n">sfCap</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SnuffleCap</span><span class="o">();</span>

    <span class="kt">void</span> <span class="nf">take</span><span class="o">(){</span>
        <span class="n">siCap</span><span class="o">.</span><span class="na">take</span><span class="o">();</span> <span class="n">szCap</span><span class="o">.</span><span class="na">take</span><span class="o">();</span> <span class="n">sfCap</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Patient</span><span class="o">{</span>
    <span class="kt">void</span> <span class="nf">takeSinus</span><span class="o">(</span><span class="nc">TotalCap</span> <span class="n">cap</span><span class="o">){</span>
        <span class="n">cap</span><span class="o">.</span><span class="na">take</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CompEncapsulation</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Patient</span> <span class="n">patient</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Patient</span><span class="o">();</span>
        <span class="n">patient</span><span class="o">.</span><span class="na">takeSinus</span><span class="o">(</span><span class="k">new</span> <span class="nc">TotalCap</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 08 - 패키지와 클래스 패스</title><link href="http://localhost:4000/java%20lang/Chap08/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 08 - 패키지와 클래스 패스" /><published>2022-10-03T00:00:00+09:00</published><updated>2022-10-03T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap08</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap08/"><![CDATA[<h2 id="08-1-클래스-패스class-path">08-1. 클래스 패스(Class Path)</h2>
<p><img src="/assets/images/java-lang/8-1.png" alt="image" width="80%" height="80%" /><br /></p>
<blockquote>
  <p>클래스 패스(Class Path): 자바 가상머신이 클래스 파일을 찾는 경로</p>
</blockquote>

<h3 id="--현재-디렉토리current-directory를-기준으로-한-실행">- <u>현재 디렉토리(Current Directory)를 기준으로 한 실행</u></h3>
<p><img src="/assets/images/java-lang/8-2.png" alt="image" width="80%" height="80%" /><br />
기본적으로 java 실행파일은 필요한 class 파일을 현재 디렉토리에서 찾는다.<br />
명령 프롬프트 상에서 작업이 진행 중인 디렉토리의 위치에 클래스파일이 없다면 오류를 뱉는다.<br />
따라서 앞선 상황에서 정상적인 실행 결과를 도출하려면 ‘Class Path’를 지정해야한다.</p>

<h3 id="--클래스-패스의-지정">- <u>클래스 패스의 지정</u></h3>
<p>다음에서 설명하는 방식은 ‘일시적인’ 방법이다.<br />
터미널을 열고, 다시 닫기 전까지만 유지되는 것이다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>set classpath=.:/Study/MyClass
</code></pre></div></div>

<p>위의 명령어를 통해 상대경로인 현재 디렉토리(.)와 절대경로인 /Study/Myclass를 지정해주었다.</p>
<blockquote>
  <p>현재 디렉토리가 바뀌면 상대 경로가 지정하는 모든 경로가 그에 맞게 수정된다.</p>
</blockquote>

<p>이러한 장점 때문에 실무에서는 상대 경로를 주로 사용한다.</p>

<h3 id="--클래스-패스를-고정시키는-방법">- <u>클래스 패스를 고정시키는 방법</u></h3>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># .zshrc

export JAVA_HOME=&lt;설치된 폴더 위치&gt;
export CLASSPATH=&lt;설치된 폴더 위치&gt;/lib:.
</code></pre></div></div>
<p>이렇게 환경변수를 이용해 직접 Class Path를 고정시키는 방법도 있다.<br />
명령 프롬프트를 새로 띄워도 Class Path가 그대로 유지되기 때문에 주의해서 사용해야한다.</p>

<h2 id="08-2-패키지package의-이해">08-2. 패키지(Package)의 이해</h2>
<blockquote>
  <p>패키지는 클래스를 묶는 수단이다.</p>
</blockquote>

<h3 id="--패키지-선언의-의미와-목적">- <u>패키지 선언의 의미와 목적</u></h3>
<p>패키지 이름의 예시를 보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">java</span><span class="o">.</span><span class="na">net</span>
</code></pre></div></div>
<p>일단 패키지 이름이 java로 시작한다. 이는 자바에서 제공하는 클래스임을 뜻한다.<br />
그리고 net은 network를 줄인 표현으로 네트워크 관련 기능의 클래스임을 짐작하게 한다.<br />
이렇게, 패키지는 클래스를 구분하고 파악하는데도 도움이 된다.</p>

<h3 id="--패키지-이름을-짓는-관례">- <u>패키지 이름을 짓는 관례</u></h3>
<p>패키지의 이름을 지을 때에는 다음의 관례를 따른다.</p>
<ol>
  <li>클래스의 이름과 구분이 되도록 패키지의 이름은 모두 소문자로 구성한다.</li>
  <li>인터넷 도메인 이름의 역순으로 패키지 이름을 구성한다.</li>
  <li>패키지 이름의 끝에 클래스를 정의한 주체 또는 팀을 구분하는 이름을 추가한다.</li>
</ol>

<p>예를 들어<br />
‘인터넷 도메인이 hi_june.com인 회사’의 ‘개발자 최씨’가 개발한 클래스를 묶을 패키지 이름을 위의 관례에 따라 만들어보자.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>com.hi_june.choi
</code></pre></div></div>

<h3 id="--이름-충돌의-해결을-위한-패키지의-효과">- <u>이름 충돌의 해결을 위한 패키지의 효과</u></h3>
<p>패키지의 선언은 다음과 같은 두 가지 특성을 만들어낸다.</p>

<ul>
  <li>클래스 접근 방법의 구분
    <ul>
      <li>서로 다른 패키지의 두 클래스는 인스턴스 생성 시 사용하는 이름이 다르다.</li>
    </ul>
  </li>
  <li>클래스의 공간적인 구분
    <ul>
      <li>서로 다른 패키지의 두 클래스 파일은 저장되는 위치가 다르다.</li>
    </ul>
  </li>
</ul>

<p>패키지의 이름이 결정되고 -&gt; 각 클래스를 패키지로 묶으면 -&gt; 클래스의 인스턴스 생성 방법도 달라진다.<br />
<img src="/assets/images/java-lang/8-3.png" alt="image" width="80%" height="80%" /><br /></p>

<p>그에 따라 클래스 파일이 저장되는 위치도 다음과 같이 달라진다.<br />
<img src="/assets/images/java-lang/8-4.png" alt="image" width="50%" height="50%" /><br /></p>

<h3 id="--import-선언">- <u>import 선언</u></h3>
<p>클래스가 필요할 때마다 호출을</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">com</span><span class="o">.</span><span class="na">wxfx</span><span class="o">.</span><span class="na">smart</span><span class="o">.</span><span class="na">Circle</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">com</span><span class="o">.</span><span class="na">wxfx</span><span class="o">.</span><span class="na">smart</span><span class="o">.</span><span class="na">Circle</span><span class="o">(</span><span class="mf">3.5</span><span class="o">);</span>
</code></pre></div></div>
<p>이런 식으로 해야한다면 여간 번거로운 일이 아닐 것이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.wxfx.smart.Circle</span><span class="o">;</span>

<span class="nc">Circle</span> <span class="n">c1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Circle</span><span class="o">(</span><span class="mf">3.5</span><span class="o">);</span>
</code></pre></div></div>
<p>이런식으로 import문을 이용해서 코드를 간소화할 수 있다.</p>

<p><br /><br />
(참고)<br />
클래스가 아닌 패키지를 대상으로 다음과 같이 import 선언을 하는 것도 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">com.wxfx.smart.*</span><span class="o">;</span>
</code></pre></div></div>

<p>다만,<br />
패키지 대상의 import 선언은 이름 충돌이 발생할 수 있고,<br />
또 의도하지 않은 클래스의 인스턴스를 생성하는 상황으로 이어질 수 있어서<br />
가급적 사용을 자제하라고 권고하고 있다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 07 - 클래스와 인스턴스</title><link href="http://localhost:4000/java%20lang/Chap07/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 07 - 클래스와 인스턴스" /><published>2022-10-02T00:00:00+09:00</published><updated>2022-10-02T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap07</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap07/"><![CDATA[<h2 id="07-1-클래스의-정의와-인스턴스의-생성">07-1. 클래스의 정의와 인스턴스의 생성</h2>
<h3 id="--클래스class--데이터data--메소드method">- <u>클래스(Class) = 데이터(Data) + 메소드(Method)</u></h3>
<blockquote>
  <p>클래스: 서로 연관되어 있는 데이터와 메소드를 묶어주는 것</p>
</blockquote>

<p>모든 프로그램은 다음 두 가지로 이뤄진다.</p>
<ol>
  <li>데이터: 프로그램상에서 유지하고 관리해야 할 데이터</li>
  <li>기능: 데이터를 처리하고 조작하는 기능</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BankAccount</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>    <span class="c1">// 예금 잔액</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">deposit</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">){</span> <span class="c1">// balance와 연관 있는 메소드</span>
        <span class="n">balance</span> <span class="o">+=</span> <span class="n">amount</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">withdraw</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">){</span>    <span class="c1">// balance와 연관 있는 메소드</span>
        <span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">checkMuyBalance</span><span class="o">(){</span>   <span class="c1">// balance와 연관 있는 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"잔액: "</span> <span class="o">+</span> <span class="n">balance</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--클래스의-구성과-인스턴스화">- <u>클래스의 구성과 인스턴스화</u></h3>
<p><img src="/assets/images/java-lang/7-1.png" alt="image" width="70%" height="70%" /><br /></p>

<p>클래스 내에 위치한 변수와 메소드를 가리켜 각각 다음과 같이 부른다.<br />
<b>인스턴스 변수(멤버 변수, 필드)</b>: 클래스 내에 선언된 변수<br />
<b>인스턴스 메소드</b>: 클래스 내에 정의된 메소드</p>

<blockquote>
  <p>인스턴스 변수는 같은 클래스 내에 위치한 메소드 내에서 접근이 가능하다.</p>
</blockquote>

<h3 id="--클래스-정의의-본질">- <u>클래스 정의의 본질</u></h3>
<blockquote>
  <p>클래스의 정의는 틀(Mold)을 구성하는 것과 같다.</p>
</blockquote>

<p><img src="/assets/images/java-lang/7-2.png" alt="image" width="70%" height="70%" /><br /><br />
붕어빵은 클래스를 설명할 때 단골로 등장하는 소재이다.<br />
붕어빵 틀은 먹을 수 있는 대상은 아니다. 하지만 이 틀이 있으므로 빵을 찍어낼 수 있다.<br />
<b>마찬가지로 클래스 또한 정의되었다고 해서 그 안에 위치한 변수나 메소드를 사용할 수 있는 것은 아니다.</b><br />
틀을 이용해서 ‘인스턴스’(메모리에 올라갈 수 있는 것)라는 것을 찍어 내야 사용이 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BankAccount</span> <span class="n">myAcnt1</span><span class="o">;</span>    <span class="c1">// 참조변수 myAcnt1 선언</span>
<span class="nc">BankAccount</span> <span class="n">myAcnt2</span><span class="o">;</span>    <span class="c1">// 참조변수 myAcnt2 선언</span>

<span class="c1">// 참조변수 myAcnt1이 새로 생성되는 인스턴스를 가리킴</span>
<span class="n">myAcnt1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">();</span>

<span class="c1">// 참조변수 myAcnt2이 새로 생성되는 인스턴스를 가리킴</span>
<span class="n">myAcnt2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">();</span>
</code></pre></div></div>

<p>키워드 new를 통해서 인스턴스를 생성하면 생성된 인스턴스의 주솟값이 반환된다.<br />
즉 참조변수에는 생성된 인스턴스의 주솟값이 저장되는 셈이다.
이것의 보다 일반적인 표현으로는</p>
<blockquote>
  <p>참조변수는 인스턴스를 참조한다.<br />
참조변수는 인스턴스를 가리킨다.</p>
</blockquote>

<p><br />
(참고)<br />
java에서는 ‘주소’라는 말을 안 쓴다.<br />
인스턴스의 주소값을 직접 열어서 확인하는 법을 java에서 제공하지 않는다.</p>

<h3 id="--참조변수reference-variable의-특성">- <u>참조변수(Reference Variable)의 특성</u></h3>
<p>1) 변수는 저장된 값을 바꿀 수 있다. 따라서, 참조변수도 다음과 같이 참조하는 인스턴스를 바꿀 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BankAccount</span> <span class="n">yoon</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">();</span>

<span class="n">yoon</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">();</span>   <span class="c1">// yoon이 새 인스턴스를 참조한다.</span>
</code></pre></div></div>

<p>2) 하나의 인스턴스를 둘 이상의 참조변수가 동시에 참조하는 것도 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BankAccount</span> <span class="n">ref1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">();</span>
<span class="nc">BankAccount</span> <span class="n">ref2</span> <span class="o">=</span> <span class="n">ref1</span><span class="o">;</span>
</code></pre></div></div>

<h3 id="--참조변수reference-variable의-매개변수-선언">- <u>참조변수(Reference Variable)의 매개변수 선언</u></h3>
<p>메소드를 호출할 때 값을 전달할 수 있고, 이 값은 매개변수에 저장된다.<br />
마찬가지로 메소드를 호출하면서 인스턴스의 참조 값을 전달하는 것도 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BankAccount</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">deposit</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">balance</span> <span class="o">+=</span> <span class="n">amount</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">withdraw</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">checkMyBalance</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"잔액: "</span> <span class="o">+</span> <span class="n">balance</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PassingRef</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">BankAccount</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">();</span>
        <span class="n">ref</span><span class="o">.</span><span class="na">deposit</span><span class="o">(</span><span class="mi">3000</span><span class="o">);</span>
        <span class="n">ref</span><span class="o">.</span><span class="na">withdraw</span><span class="o">(</span><span class="mi">300</span><span class="o">);</span>
        <span class="n">check</span><span class="o">(</span><span class="n">ref</span><span class="o">);</span> <span class="c1">// '참조 값'의 전달</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">check</span><span class="o">(</span><span class="nc">BankAccount</span> <span class="n">account</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 이 메소드는 인자로 인스턴스의 참조 값을 전달받는다.</span>
        <span class="n">account</span><span class="o">.</span><span class="na">checkMyBalance</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--참조변수에-null-대입">- <u>참조변수에 null 대입</u></h3>
<p>참조변수가 참조하는(가리키는) 인스턴스와의 관계를 끊고 아무런 인스턴스도 참조하지 않도록 만들 수도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BankAccount</span> <span class="n">ref</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BankAccount</span><span class="o">();</span>
<span class="n">ref</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span> <span class="c1">// ref가 참조하는 인스턴스와의 관계를 끊음</span>
</code></pre></div></div>
<p><br /><br />
(참고)<br />
확장자가 class인 클래스파일은 ‘정의되는 클래스의 수’만큼 생성된다.<br />
즉 ‘정의된 클래스의 수’와 ‘생성되는 클래스 파일의 수’는 동일하다.</p>

<h2 id="07-2-생성자constructor">07-2. 생성자(Constructor)</h2>
<h3 id="--인스턴스를-구분할-수-있는-유일한-정보를-갖게-하자">- <u>인스턴스를 구분할 수 있는 유일한 정보를 갖게 하자.</u></h3>
<p>각각의 인스턴스를 참조하는 참조변수들을 매번 만들 수는 없기 때문에<br />
인스턴스 안에 <b>각각의 인스턴스를 구분할 수 있는 정보</b>를 포함하도록(멤버로 갖도록) class를 디자인해야한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BankAccount</span><span class="o">{</span>
    <span class="cm">/*
    * 인스턴스를 구분할 수 있는 정보를 class에 추가해준다!
    */</span>
    <span class="nc">Stirng</span> <span class="n">accNumber</span><span class="o">;</span>   <span class="c1">// 계좌번호</span>
    <span class="nc">String</span> <span class="n">ssNumber</span><span class="o">;</span>    <span class="c1">// 주민번호</span>
    
    <span class="kt">int</span> <span class="n">balance</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">deposit</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">balance</span> <span class="o">+=</span> <span class="n">amount</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">withdraw</span><span class="o">(</span><span class="kt">int</span> <span class="n">amount</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">balance</span> <span class="o">-=</span> <span class="n">amount</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">checkMyBalance</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"잔액: "</span> <span class="o">+</span> <span class="n">balance</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">balance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--생성자constructor">- <u>생성자(Constructor)</u></h3>
<p>이 메소드는 다른 메소드들과 성격상 구분이 된다.</p>
<ol>
  <li>인스턴스의 초기화를 위한 메소드이다.</li>
  <li>때문에 인스턴스 생성 시 반드시 한 번 호출해서 초기화를 진행해야 한다.</li>
</ol>

<p><br />
생성자가 되기 위해선 몇 가지 조건이 있다.</p>
<ol>
  <li>생성자의 이름은 클래스의 이름과 동일해야 한다.</li>
  <li>생성자는 값을 반환하지 않고 반환형도 표시하지 않는다.</li>
</ol>

<p>위 조건을 만족하면 자바 컴파일러에 의해서 생성자로 인식되고, 인스턴스 생성 시 자동으로 호출되어 인스턴스를 초기화하게 된다.</p>

<blockquote>
  <p>인스턴스 생성의 마지막 단계는 생성자 호출이다.<br />
어떠한 이유로든 생성자 호출이 생략된 인스턴스는 인스턴스가 아니다.</p>
</blockquote>

<h3 id="--디폴트-생성자default-constructor">- <u>디폴트 생성자(Default Constructor)</u></h3>
<p>개발자가 생성자를 생략한 상태의 클래스를 정의하면 자바 컴파일러가 ‘디폴트 생성자’라는 것을 클래스 정의에 넣어준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BankAccount</span><span class="o">{</span>
    <span class="kt">int</span> <span class="n">balance</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BankAccount</span><span class="o">(){</span>   <span class="c1">// 컴파일러에 의해 자동 삽입되는 '디폴트 생성자'</span>
        <span class="c1">// empty</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다만! 컴파일러에 의해서 디폴트 생성자가 삽입이 되더라도 생성자는 직접 정의해 주는 것이 좋다.</p>

<h2 id="07-3-자바의-이름-규칙naming-rule">07-3. 자바의 이름 규칙(Naming Rule)</h2>
<p>자바 프로그램을 작성하면서 일반적으로 적용하는 ‘이름 짓는 규칙’이 있다.</p>

<h3 id="--클래스의-이름-규칙">- <u>클래스의 이름 규칙</u></h3>
<p>‘Camel Case 모델’을 따른다.</p>
<ol>
  <li>클래스 이름의 첫 문자는 대문자로 시작한다.</li>
  <li>둘 이상의 단어가 묶여서 하나의 이름을 이룰 때, 새로 시작하는 단어는 대문자로 한다.</li>
</ol>

<h3 id="--메소드와-변수의-이름-규칙">- <u>메소드와 변수의 이름 규칙</u></h3>
<p>클래스 이름과 구분이 되어야 코드의 가독성을 높일 수 있다.<br />
따라서, ‘변형된 Camel Case’를 적용하는 것이 일반적이다.</p>
<ol>
  <li>메소드와 변수 이름의 첫 문자는 소문자로 시작한다.</li>
  <li>둘 이상의 단어가 묶여서 하나의 이름을 이룰 때, 새로 시작하는 단어는 대문자로 한다.</li>
</ol>

<h3 id="--상수의-이름-규칙">- <u>상수의 이름 규칙</u></h3>
<p>상수의 이름은 변수의 이름과 구분이 되도록 모든 문자를 대문자로 구성하는 것이 관례이다.<br />
둘 이상의 단어를 연결해야 하는 경우에는 언더바로 단어와 단어 사이를 연결한다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 06 - 메소드에 대한 이해와 정의</title><link href="http://localhost:4000/java%20lang/Chap06/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 06 - 메소드에 대한 이해와 정의" /><published>2022-10-01T00:00:00+09:00</published><updated>2022-10-01T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap06</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap06/"><![CDATA[<h2 id="06-1-메소드에-대한-이해와-메소드의-정의">06-1. 메소드에 대한 이해와 메소드의 정의</h2>
<h3 id="--메소드의-동작">- <u>메소드의 동작</u></h3>
<p><img src="/assets/images/java-lang/6-1.png" alt="image" width="70%" height="70%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MethodDef</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"프로그램의 시작"</span><span class="o">);</span>
        <span class="n">hiEveryone</span><span class="o">(</span><span class="mi">26</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"프로그램의 끝"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">hiEveryone</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"좋은 아침입니다."</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"제 나이는 "</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">"입니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--값을-반환하는-메소드">- <u>값을 반환하는 메소드</u></h3>
<p><img src="/assets/images/java-lang/6-2.png" alt="image" width="70%" height="70%" /><br /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MethodReturns</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">result</span><span class="o">;</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">adder</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">square</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">adder</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">addResult</span> <span class="o">=</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">addResult</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">double</span> <span class="nf">square</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">a</span><span class="o">*</span><span class="n">a</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="06-2-변수의-스코프">06-2. 변수의 스코프</h2>
<blockquote>
  <p>지역변수(Local Variable)는 선언된 지역을 벗어나면 메모리 공간에서 소멸된다.</p>
</blockquote>

<p><img src="/assets/images/java-lang/6-3.png" alt="image" width="70%" height="70%" /><br /></p>

<h2 id="06-3-메소드의-재귀-호출">06-3. 메소드의 재귀 호출</h2>
<p><img src="/assets/images/java-lang/6-4.png" alt="image" width="70%" height="70%" /><br /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ReculFactorial</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3 factorial: "</span><span class="o">+</span><span class="n">factorial</span><span class="o">(</span><span class="mi">3</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"12 factorial: "</span><span class="o">+</span><span class="n">factorial</span><span class="o">(</span><span class="mi">12</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">factorial</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="n">n</span><span class="o">*</span><span class="n">factorial</span><span class="o">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/6-5.png" alt="image" width="70%" height="70%" /><br /></p>

<p><br /></p>

<p>(주의) 종료 조건을 꼭 설정해야한다. 안 하면 재귀문을 탈출할 수 없다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">InfRecul</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">showHi</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showHi</span><span class="o">(</span><span class="kt">int</span> <span class="n">cnt</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hi~ "</span><span class="o">);</span>

        <span class="k">if</span><span class="o">(</span><span class="n">cnt</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>
            <span class="k">return</span><span class="o">;</span>

        <span class="n">showHi</span><span class="o">(</span><span class="n">cnt</span><span class="o">--);</span>  <span class="c1">// cnt의 값이 전달된 다음에 cnt의 값이 감소한다. 따라서 재귀문을 탈출할 수 없다.</span>
        <span class="c1">// showHi(--cnt);   // 이렇게 써줘야 함</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 05 - 실행 흐름의 컨트롤</title><link href="http://localhost:4000/java%20lang/Chap05/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 05 - 실행 흐름의 컨트롤" /><published>2022-10-01T00:00:00+09:00</published><updated>2022-10-01T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap05</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap05/"><![CDATA[<h2 id="05-1-if-그리고-else">05-1. if 그리고 else</h2>
<p>기본 골격 정도만 보고 넘어가자..</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span><span class="o">(</span><span class="kc">true</span> <span class="n">or</span> <span class="kc">false</span><span class="o">){</span>
    <span class="c1">// 조건 true 시 실행되는 영역</span>
<span class="o">}</span> <span class="k">else</span><span class="o">{</span>
    <span class="c1">// 조건 false 시 실행되는 영역</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
(참고) if ~ else문과 유사한 성격의 조건 연산자가 있다.<br />
<img src="/assets/images/java-lang/5-1.png" alt="image" width="70%" height="70%" /><br /></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">big</span> <span class="o">=</span> <span class="o">(</span><span class="n">num1</span> <span class="o">&gt;</span> <span class="n">num2</span><span class="o">)</span> <span class="o">?</span> <span class="n">num1</span> <span class="o">:</span> <span class="n">num2</span><span class="o">;</span>
</code></pre></div></div>

<h2 id="05-2-switch와-break">05-2. switch와 break</h2>
<p>if ~ else문을 대체할 수 있는 용도로도 사용된다.<br />
특히 중간에 else if가 많이 들어가는 상황에서는 switch문이 더 좋은 선택이 될 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span><span class="o">(</span><span class="n">n</span><span class="o">){</span>
<span class="c1">// case와 default는 label이기 때문에 들여쓰기 하지 않는 것이 일반적</span>
<span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
    <span class="c1">// n이 1이면 여기부터 실행</span>
<span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
    <span class="c1">// n이 2이면 여기서부터 실행</span>
<span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
    <span class="c1">// n이 3이면 여기서부터 실행</span>
<span class="k">default</span><span class="o">:</span>
    <span class="c1">// 해당하는 case 없으면 여기서부터 실행</span>
<span class="o">}</span>
</code></pre></div></div>

<p>break 문을 활용해서 switch문을 탈출할 수 있다.<br />
또, 이를 이용해서 둘 이상의 label을 이어서 둘 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">switch</span><span class="o">(</span><span class="n">n</span><span class="o">){</span>
<span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
<span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
<span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"case 1,2,3"</span><span class="o">);</span>
    <span class="k">break</span><span class="o">;</span>
<span class="k">default</span><span class="o">:</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"default"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="05-3-for-while-그리고-dowhile">05-3. for, while 그리고 do~while</h2>
<h3 id="--반복문-1-while문">- <u>반복문 1: while문</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span><span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">){</span> <span class="c1">// 반복 조건</span>
    <span class="c1">// 반복 영역</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I like Java"</span> <span class="o">+</span> <span class="n">num</span><span class="o">);</span>
    <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>
<p>while문의 소괄호에는 반복의 조건을 명시한다.<br />
그리고 그 조건이 true를 반환하는 동안에는 횟수에 상관없이 while문의 중괄호가 반복 실행되는데, 다음의 패턴으로 반복이 된다.</p>
<ol>
  <li>먼저! 조건 검사</li>
  <li>그리고 결과가 true이면 중괄호 영역 실행</li>
</ol>

<h3 id="--반복문-2-do--while문">- <u>반복문 2: do ~ while문</u></h3>
<blockquote>
  <p>조건에 따른 반복이 필요하다. 그런데 반드시 한 번은 실행을 해야 한다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

<span class="k">do</span><span class="o">{</span>
    <span class="c1">// 반복 영역</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"I like Java "</span> <span class="o">+</span> <span class="n">num</span><span class="o">);</span>
    <span class="n">num</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
<span class="o">}</span> <span class="k">while</span><span class="o">(</span><span class="n">num</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">);</span>   <span class="c1">// 반복 조건</span>
</code></pre></div></div>
<p>while문과의 차이는 반복 조건을 검사하는 시점에 있다.<br />
while문은 ‘선 검사’방식이고, do ~ while문은 ‘후 검사’방식이다.</p>
<ol>
  <li>먼저! 중괄호 영역 실행</li>
  <li>그리고 조건 검사 후 결과가 true이면 반복 결정</li>
</ol>

<h3 id="--반복문-3-for문">- <u>반복문 3: for문</u></h3>
<p>while문과의 차이점은 ‘반복의 횟수가 정해져 있는 상황’에서 쓰인다는 것이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">num</span><span class="o">++){</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"..."</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>
<ol>
  <li>int num -&gt; 반복의 횟수를 세기 위한 변수</li>
  <li>num &lt; 5 -&gt; 반복의 조건</li>
  <li>num++ -&gt; 반복의 조건을 무너뜨리기 위한 연산</li>
</ol>

<h2 id="05-4-break--continue">05-4. break &amp; continue</h2>
<p><img src="/assets/images/java-lang/5-2.png" alt="image" width="50%" height="50%" /><br /><br />
break는 반복문을 탈출하고, continue는 조건 검사로 이동시킨다.</p>

<h3 id="--무한-루프">- <u>무한 루프</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/* 
무한 루프를 만드는 여러 방법
중간에 
if(조건){
    break;
}
등으로 활용할 수 있다.
*/</span>

<span class="c1">// 1.</span>
<span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">){</span>
    
<span class="o">}</span>

<span class="c1">// 2.</span>
<span class="k">do</span><span class="o">{</span>

<span class="o">}</span> <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>

<span class="c1">// 3. </span>
<span class="k">for</span><span class="o">(;;){</span>

<span class="o">}</span>
</code></pre></div></div>

<h2 id="05-5-반복문의-중첩">05-5. 반복문의 중첩</h2>
<p>반복문의 종류가 세 가지이니, 다음과 같이 총 아홉 가지 형태로 반복문의 중첩이 가능하다.<br />
<img src="/assets/images/java-lang/5-3.png" alt="image" width="70%" height="70%" /><br /></p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry></feed>