<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-02-15T01:26:20+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 23 - 컬렉션 프레임워크 1</title><link href="http://localhost:4000/java%20lang/Chap23/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 23 - 컬렉션 프레임워크 1" /><published>2023-01-08T00:00:00+09:00</published><updated>2023-02-14T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap23</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap23/"><![CDATA[<h2 id="23-1-컬렉션-프레임워크의-이해">23-1. 컬렉션 프레임워크의 이해</h2>
<blockquote>
  <p>인스턴스의 저장과 삭제, 참조에 대한 문법</p>
</blockquote>

<h3 id="--프레임워크라는-표현의-이해">- <u>'프레임워크'라는 표현의 이해</u></h3>
<p>자바에서 말하는 프레임워크는 다음과 같이 이해할 수 있다.</p>
<blockquote>
  <p>잘 정의된 구조의 클래스들</p>
</blockquote>

<p>즉, 프로그래머들이 쓸 수 있도록 잘 정의된 클래스들의 모임이라 할 수 있다.<br />
다만, 컬렉션 관련된 클래스의 정의에 적용되는 설계 원칙 또는 구조가 존재하기 때문에<br />
단순히 ‘컬렉션 라이브러리’라 하지 않고, ‘컬렉션 프레임워크’라고 한다.</p>

<h3 id="--컬렉션의-의미와-자료구조">- <u>컬렉션의 의미와 자료구조</u></h3>
<p>컬렉션 프레임워크는 데이터의 저장 방법, 그리고 이와 관련있는 알고리즘에 대한 프레임워크이다.<br />
즉, 자료구조와 알고리즘을 제네릭 기반의 클래스와 메소드로 미리 구현해 놓은 결과물이라 할 수 있다.<br />
따라서 컬렉션 프레임워크를 이용하면 자료구조를 몰라도 트리 기반으로 데이터를 저장할 수 있고,<br />
알고리즘을 몰라도 이진 탐색을 수행할 수 있는 것이다.</p>

<h3 id="--컬렉션-프레임워크의-기본-골격">- <u>컬렉션 프레임워크의 기본 골격</u></h3>
<p><img src="/assets/images/java-lang/23-5.jpg" alt="image" /><br /></p>

<p>컬렉션 클래스들이 구현하는 인터페이스들의 상속 관계를 보여주고 있다.<br />
인스턴스를 저장하는 컬렉션 클래스들은 위의 인터페이스 중 하나를 구현하게 되어 있으며, 구현한 인터페이스에 따라서 컬렉션 클래스의 데이터 저장 방식이 결정된다.</p>

<h2 id="23-2-list-인터페이스를-구현하는-컬렉션-클래스들">23-2. List<E> 인터페이스를 구현하는 컬렉션 클래스들</E></h2>
<h3 id="--arraylist-linkedlist">- <u>ArrayList, LinkedList</u></h3>
<p><code class="language-plaintext highlighter-rouge">List</code> 인터페이스를 구현하는 대표적인 컬렉션 클래스 둘은 다음과 같다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ArrayList</code>: 배열 기반 자료구조, 배열을 이용하여 인스턴스 저장</li>
  <li><code class="language-plaintext highlighter-rouge">LinkedList</code>: 리스트 기반 자료구조, 리스트를 구성하여 인스턴스 저장</li>
</ul>

<p><br /></p>

<p><code class="language-plaintext highlighter-rouge">List</code> 인터페이스를 구현하는 컬렉션 클래스들은 공통적으로 다음 두 가지 특성을 가진다.</p>
<ol>
  <li>인스턴스의 저장 순서를 유지한다.</li>
  <li>동일하 인스턴스의 중복 저장을 허용한다.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ListCollection</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="c1">//List&lt;String&gt; list = new LinkedList&lt;&gt;();</span>

        <span class="c1">// 컬렉션 인스턴스에 문자열 인스턴스 저장</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Toy"</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Box"</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Robot"</span><span class="o">);</span>

        <span class="c1">// 저장된 문자열 인스턴스의 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="sc">'\t'</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// 첫 번째 인스턴스 삭제</span>

        <span class="c1">// 첫 번째 인스턴스 삭제 후 나머지 인스턴스들을 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">+</span> <span class="sc">'\t'</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>코드에 유연성을 제공하기 위해 위와 같이 List형 참조변수를 사용하는 것이 더 적절하다.<br />
주로 <code class="language-plaintext highlighter-rouge">List</code>에 선언된 메소드를 호출하기 때문에 굳이 <code class="language-plaintext highlighter-rouge">ArrayList</code>형 참조변수를 선언할 필요가 없으며,<br />
다음과 같이 컬렉션 클래스의 교체가 용이해진다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="o">-&gt;</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
</code></pre></div></div>

<h3 id="--arraylist-vs-linkedlist">- <u>ArrayList vs LinkedList</u></h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">ArrayList</code>
    <ul>
      <li>장점
        <ul>
          <li>저장된 인스턴스의 참조가 빠르다.</li>
        </ul>
      </li>
      <li>단점
        <ul>
          <li>저장공간을 늘리는 과정에서 시간이 많이 소요된다.</li>
          <li>인스턴스의 삭제 연산에서 많은 연산이 필요하다. 따라서 속도가 느리다.</li>
        </ul>
      </li>
    </ul>
  </li>
  <li><code class="language-plaintext highlighter-rouge">LinkedList</code>
    <ul>
      <li>장점
        <ul>
          <li>저장공간을 늘리는 과정이 간단하다.</li>
          <li>저장된 인스턴스의 삭제 과정이 단순하다.</li>
        </ul>
      </li>
      <li>단점
        <ul>
          <li>저장된 인스턴스의 참조과정이 배열에 비해 복잡하다. 따라서 속도가 느리다.</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<h3 id="--저장된-인스턴스의-순차적-접근-방법-1-enhanced-for문의-사용">- <u>저장된 인스턴스의 순차적 접근 방법 1: enhanced for문의 사용</u></h3>
<p>다음과 같이 enhanced for문을 사용하여 저장된 인스턴스들에 순차적으로 접근이 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EnhancedForCollection</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="c1">//List&lt;String&gt; list = new LinkedList&lt;&gt;();</span>

        <span class="c1">// 컬렉션 인스턴스에 문자열 인스턴스 저장</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Toy"</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Box"</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Robot"</span><span class="o">);</span>

        <span class="c1">// 저장된 문자열 인스턴스의 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="sc">'\t'</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="n">list</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// 첫 번째 인스턴스 삭제</span>

        <span class="c1">// 첫 번째 인스턴스 삭제 후 나머지 인스턴스들을 참조</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="sc">'\t'</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
for-each문을 통한 순차적 접근의 대상이 되려면, 해당 컬렉션 클래스는 다음 인터페이스를 구현해야 한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Collection</code>이 <code class="language-plaintext highlighter-rouge">Iterable</code>을 상속하기 때문에<br />
<code class="language-plaintext highlighter-rouge">LinkedList</code>와 <code class="language-plaintext highlighter-rouge">ArrayList</code> 클래스는 for-each문 사용이 가능하다.</p>

<h3 id="--저장된-인스턴스의-순차적-접근-방법-2">- <u>저장된 인스턴스의 순차적 접근 방법 2</u></h3>
<p><code class="language-plaintext highlighter-rouge">Iterable</code>에는 다음 추상 메소드가 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Iterable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span>  <span class="c1">// 반복자를 반환하는 메소드</span>
</code></pre></div></div>

<p>반복자란,<br />
저장된 인스턴스들을 순차적으로 참조할 때 사용하는 인스턴스로 일종의 ‘지팡이’에 비유할 수 있다.<br />
그리고 이 반복자를 통해 호출할 수 있는 메소들을은 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">E</span> <span class="nf">next</span><span class="o">()</span>            <span class="c1">// 다음 인스턴스의 참조 값을 반환</span>
<span class="kt">boolean</span> <span class="nf">hasNext</span><span class="o">()</span>   <span class="c1">// next 메소드 호출 시 참조 값 반환 가능 여부 확인</span>
<span class="kt">void</span> <span class="nf">remove</span><span class="o">()</span>       <span class="c1">// next 메소드 호출을 통해 반환했던 인스턴스 삭제</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">IteratorCollection</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>

        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Toy"</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Box"</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Robot"</span><span class="o">);</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"Box"</span><span class="o">);</span>

        <span class="nc">Iterator</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="c1">// 반복자 처음 획득</span>

        <span class="c1">// 반복자를 이용한 순차적 참조</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="n">itr</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>  <span class="c1">// 반복자 다시 획득</span>

        <span class="c1">// 모든 "Box" 삭제</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="s">"Box"</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">itr</span><span class="o">.</span><span class="na">remove</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">itr</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="c1">// 반복자 다시 획득</span>

        <span class="c1">// 삭제 후 결과 확인</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">()</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--배열보다는-컬렉션-인스턴스가-좋다--컬렉션-변환">- <u>배열보다는 컬렉션 인스턴스가 좋다. : 컬렉션 변환</u></h3>
<p>첫 번째로 인스턴스의 저장과 삭제가 편하다.<br />
두 번째로 ‘반복자’를 쓸 수 있다.</p>

<p>단, 배열처럼 ‘선언과 동시에 초기화’를 할 수 없어서 다음과 같은 방법을 써준다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 인자로 전달된 인스턴스들을 저장한 컬렉션 인스턴스의 생성 및 반환</span>
<span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Toy"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">,</span> <span class="s">"Box"</span><span class="o">);</span>
</code></pre></div></div>

<p>하지만 이렇게 생성된 컬렉션 인스턴스는 immutable하다.<br />
따라서 새로운 인스턴스의 추가나 삭제가 필요한 상황이라면 다음 생성자를 기반으로 ArrayList 인스턴스를 생성해야 한다.</p>

<ul>
  <li>public ArrayList(Collection&lt;? extends E&gt; c)<br />
  -&gt; Collection을 구현한 컬렉션 인스턴스를 인자로 전달받는다.<br />
  -&gt; 그리고 E는 인스턴스 생성 과정에서 결정되므로 무엇이든 될 수 있다.<br />
  -&gt; 덧붙여서 매개변수 c로 전달된 컬렉션 인스턴스에서는 참조만(꺼내기만) 가능하다.</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Toy"</span><span class="o">,</span> <span class="s">"Box"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">);</span>
    <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">list</span><span class="o">);</span>   <span class="c1">// 생성자</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="23-3-set-인터페이스를-구현하는-컬렉션-클래스들">23-3. Set<E> 인터페이스를 구현하는 컬렉션 클래스들</E></h2>
<h3 id="--set을-구현하는-클래스의-특성과-hashset-클래스">- <u>Set을 구현하는 클래스의 특성과 HashSet 클래스</u></h3>
<p><code class="language-plaintext highlighter-rouge">Set</code> 인터페이스를 구현하는 제네릭 클래스는 다음 두 가지 특징이 있다.<br />
1) 저장 순서가 유지되지 않는다.<br />
2) 데이터의 중복 저장을 허용하지 않는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Num</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">num</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Num</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span> <span class="n">num</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span> <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashSetEqualityOne</span> <span class="o">{</span>
    <span class="nc">HashSet</span><span class="o">&lt;</span><span class="nc">Num</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

    <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Num</span><span class="o">(</span><span class="mi">7799</span><span class="o">));</span>
    <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Num</span><span class="o">(</span><span class="mi">9955</span><span class="o">));</span>
    <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Num</span><span class="o">(</span><span class="mi">7799</span><span class="o">));</span> <span class="c1">// 같은 인스턴스일 것이라고 기대</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"인스턴스 수: "</span> <span class="o">+</span> <span class="n">set</span><span class="o">.</span><span class="na">size</span><span class="o">());</span>   <span class="c1">// 3 -&gt; 중복 무시가 안 됨</span>

    <span class="k">for</span> <span class="o">(</span><span class="nc">Num</span> <span class="n">n</span> <span class="o">:</span> <span class="n">set</span><span class="o">)</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">n</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<p>같은 인스턴스일 것이라고 기대하고 중복이 제거되어 <code class="language-plaintext highlighter-rouge">Set</code>에 들어갈 것이라 예상했지만, 모든 인스턴스가 들어갔다.<br />
<code class="language-plaintext highlighter-rouge">HashSet</code>이 판단하는 동일 인스턴스의 기준은 <code class="language-plaintext highlighter-rouge">Object</code> 클래스에 정의되어 있는 다음 두 메소드의 호출 결과를 근거로 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span>
</code></pre></div></div>

<p>두 인스턴스가 <code class="language-plaintext highlighter-rouge">hashCode</code> 메소드 호출 결과로 반환하는 값이 동일해야 한다.<br />
그리고 이어서 두 인스턴스를 대상으로 <code class="language-plaintext highlighter-rouge">equals</code> 메소드의 호출 결과 true가 반환되면 동일 인스턴스로 간주한다.</p>

<h3 id="--해쉬-알고리즘과-hashcode-메소드">- <u>해쉬 알고리즘과 hashCode 메소드</u></h3>
<p><code class="language-plaintext highlighter-rouge">Set</code>은 들어오는 데이터가 기존에 있는 데이터인지 검사해야한다.<br />
모든 데이터와 비교연산을 하기엔 데이터가 많아질 수록 성능적으로 좋지 않기 때문에 데이터들을 어느정도 분류해놓으면 탐색 시간을 획기적으로 줄일 수 있다.</p>

<p><img src="/assets/images/java-lang/23-2.png" alt="image" width="50%" height="50%" /><br /></p>

<p>만약 특정 데이터의 존재 여부를 확인하려면 가장 효율적인 방법은 그 데이터가 속하는 부류를 먼저 찾고, 그 안에서만 비교연산을 하는 것이다.<br />
이로써 탐색 대상이 줄어들게 된다.</p>

<p>이처럼 <code class="language-plaintext highlighter-rouge">HashSet</code>에서 동일 인스턴스의 존재 여부를 확인하는 것은 다음 두 단계를 거친다.<br />
1) <code class="language-plaintext highlighter-rouge">Object</code> 클래스에 정의된 <code class="language-plaintext highlighter-rouge">hashCode</code> 메소드의 반환 값을 기반으로 부류 결정<br />
2) 선택된 부류 내에서 <code class="language-plaintext highlighter-rouge">equals</code> 메소드를 호출하여 동등 비교</p>

<p>다시 돌아와서, 사용자가 직접 정의한 클래스의 인스턴스가 동일한지 기준을 정하기 위해 <code class="language-plaintext highlighter-rouge">hashCode</code>와 <code class="language-plaintext highlighter-rouge">equals</code> 메소드를 오버라이딩하여 정의해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Num</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">num</span><span class="o">;</span>
    <span class="kd">public</span> <span class="nf">Num</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">num</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">num</span> <span class="o">%</span> <span class="mi">3</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">num</span> <span class="o">==</span> <span class="o">((</span><span class="nc">Num</span><span class="o">)</span><span class="n">o</span><span class="o">).</span><span class="na">num</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashSetEqualityTwo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Num</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;();</span>

        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Num</span><span class="o">(</span><span class="mi">4444</span><span class="o">));</span>
        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Num</span><span class="o">(</span><span class="mi">5555</span><span class="o">));</span>
        <span class="n">set</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Num</span><span class="o">(</span><span class="mi">4444</span><span class="o">));</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">Num</span><span class="o">&gt;</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">set</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--hashcode-메소드의-다양한-정의">- <u>hashCode 메소드의 다양한 정의</u></h3>
<p><code class="language-plaintext highlighter-rouge">hashCode</code>를 정의할 땐 데이터들의 특성을 모두 반영하여 작성해야한다.<br />
즉, 클래스를 정의할 때마다 <code class="language-plaintext highlighter-rouge">hashCode</code>를 정의하는 것은 꽤 번거로운 일이다.<br />
그래서 자바에서는 다음 메소드를 제공하고 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// java.util.Objects에 정의된 메소드, 전달된 인자 기반의 해쉬 값 반환</span>
<span class="c1">// java.lang.Object가 아니다. 헷갈리니 주의하자.</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">hash</span><span class="o">(</span><span class="nc">Object</span><span class="o">...</span><span class="na">values</span><span class="o">)</span> 
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nc">Objects</span><span class="o">.</span><span class="na">hash</span><span class="o">(</span><span class="n">model</span><span class="o">,</span> <span class="n">color</span><span class="o">);</span>  <span class="c1">// 전달 인자 model, color 기반 해쉬 값 반환</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--treeset-클래스의-이해와-활용">- <u>TreeSet 클래스의 이해와 활용</u></h3>
<p><code class="language-plaintext highlighter-rouge">TreeSet</code> 클래스는 트리(Tree)라는 자료구조를 기반으로 인스턴스를 저장한다.<br />
이는 정렬된 상태가 유지되면서 인스턴스가 저장됨을 의미한다.</p>

<blockquote>
  <p>인스턴스들의 참조 순서는 오름차순을 기준으로 한다.</p>
</blockquote>

<p>그렇다면, 다음과 같이 인스턴스의 크고 작음을 정의하기 애매한 상황에서는 어떻게 할까?</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>  <span class="c1">// 이름과 나이 중 어떤 것을 기준으로 정렬해야할까?</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%s(%d세)"</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>크고 작음에 대한 기준은 개발자가 결정할 일이다.<br />
그래서 위와 같이 클래스를 정의할 때에 다음 인터페이스의 구현을 통해 크로 작음에 대한 기준을 정해주어야 한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span>  <span class="c1">// 이 인터페이스에 위치한 유일한 추상 메소드 int compareTo(T o)</span>
</code></pre></div></div>

<h3 id="--인스턴스의-비교-기준을-정의하는-comparable-인터페이스의-구현-기준">- <u>인스턴스의 비교 기준을 정의하는 Comparable 인터페이스의 구현 기준</u></h3>
<p><code class="language-plaintext highlighter-rouge">Comparable</code> 인터페이스를 구현할 때 정의해야 할 추상 메소드는 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">campareTo</span><span class="o">(</span><span class="no">T</span> <span class="n">o</span><span class="o">)</span>
</code></pre></div></div>

<p>이 메소드는 다음과 같이 정의하면 된다. 이는 일종의 약속이다.</p>
<ul>
  <li>인자로 전달된 o가 작다면 양의 정수 반환</li>
  <li>인자로 전달된 o가 크다면 음의 정수 반환</li>
  <li>인자로 전달된 o가 같다면 0을 반환</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TreeSet</span><span class="o">;</span>

<span class="cm">/**
 나이가 적으면 앞으로 오도록 만들 것!
 */</span>
<span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%s (%d)"</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">-</span> <span class="n">person</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComparablePerson</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">treeSet</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;();</span>

        <span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Yoon"</span><span class="o">,</span> <span class="mi">37</span><span class="o">));</span>
        <span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Hong"</span><span class="o">,</span> <span class="mi">53</span><span class="o">));</span>
        <span class="n">treeSet</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Park"</span><span class="o">,</span> <span class="mi">22</span><span class="o">));</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">treeSet</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--comparator-인터페이스를-기반으로-treeset의-정렬-기준-제시하기">- <u>Comparator 인터페이스를 기반으로 TreeSet의 정렬 기준 제시하기</u></h3>
<p>위의 예제에서 나이가 적은 사람이 앞족에 위치하도록 <code class="language-plaintext highlighter-rouge">compareTo</code> 메소드를 구현해보았다.<br />
만약 나이가 많은 사람이 앞쪽에 위치하도록 기준을 바꿔야한다면 어떻게 해야할까?<br />
물론 메소드의 내용을 수정하면 되지만, 일시적인 기준 변경이라면 메소드를 수정하는 일은 적절치 않다.</p>

<p>그리고 이런 상황을 고려하여 다음 인터페이스가 제공된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span>  <span class="c1">// int compare(T o1, T o2)의 구현을 통해 정렬 기준을 결정할 수 있다.</span>
</code></pre></div></div>

<p>이 인터페이스를 구현한 클래스의 인스턴스는 TreeSet<E>의 생성자를 통해 전달할 수 있다.</E></p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// TreeSet 인스턴스를 만들 때, '정렬'에 대한 기준 정보도 같이 전달해줄 수 있음.</span>
<span class="kd">public</span> <span class="nf">TreeSet</span><span class="o">(</span><span class="nc">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">comparator</span><span class="o">)</span>
</code></pre></div></div>

<p>그리고 <code class="language-plaintext highlighter-rouge">compare</code> 메소드의 정의 기준은 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="no">T</span> <span class="n">o1</span><span class="o">,</span> <span class="no">T</span> <span class="n">o2</span><span class="o">)</span>
</code></pre></div></div>

<ul>
  <li>o1이 o2보다 크면 양의 정수 반환</li>
  <li>o1이 o2보다 작으면 음의 정수 반환</li>
  <li>o1이 o2보다 같다면 0 반환</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TreeSet</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%s (%d)"</span><span class="o">,</span> <span class="n">name</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Person</span> <span class="n">person</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">-</span> <span class="n">person</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">PersonComparator</span> <span class="kd">implements</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">Person</span> <span class="n">p1</span><span class="o">,</span> <span class="nc">Person</span> <span class="n">p2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">p2</span><span class="o">.</span><span class="na">age</span> <span class="o">-</span> <span class="n">p1</span><span class="o">.</span><span class="na">age</span><span class="o">;</span> <span class="c1">// 나이가 많은 사람을 앞에 세우는 연산</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ComparatorPerson</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Person</span><span class="o">&gt;</span> <span class="n">tree</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeSet</span><span class="o">&lt;&gt;(</span><span class="k">new</span> <span class="nc">PersonComparator</span><span class="o">());</span>

        <span class="n">tree</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Yoon"</span><span class="o">,</span> <span class="mi">37</span><span class="o">));</span>
        <span class="n">tree</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Hong"</span><span class="o">,</span> <span class="mi">53</span><span class="o">));</span>
        <span class="n">tree</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Park"</span><span class="o">,</span> <span class="mi">22</span><span class="o">));</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Person</span> <span class="n">person</span> <span class="o">:</span> <span class="n">tree</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">person</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--중복된-인스턴스를-삭제하려면">- <u>중복된 인스턴스를 삭제하려면</u></h3>
<p><code class="language-plaintext highlighter-rouge">List</code>를 구현하는 클래스는 인스턴스의 중복 삽입을 허용한다.<br />
이렇게 중복 삽입된 인스턴스들을 하나만 남기고 모두 지워야 한다고 가정하면 어떻게 처리할 수 있을까?<br />
<code class="language-plaintext highlighter-rouge">Set</code>을 활용해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ConvertCollection</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 중복이 포함된 리스트</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Toy"</span><span class="o">,</span> <span class="s">"Box"</span><span class="o">,</span> <span class="s">"Toy"</span><span class="o">);</span>

        <span class="c1">// 중복을 제거하기위해 Set으로 타입 변환</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">set</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashSet</span><span class="o">&lt;&gt;(</span><span class="n">list</span><span class="o">);</span>

        <span class="c1">// 중복이 제거된 Set으로 List를 만듬</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span> <span class="o">&gt;</span> <span class="n">new_list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">set</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="23-4-queue-인터페이스를-구현하는-컬렉션-클래스들">23-4. Queue<E> 인터페이스를 구현하는 컬렉션 클래스들</E></h2>
<h3 id="--스택stack과-큐queue의-이해">- <u>스택(Stack)과 큐(Queue)의 이해</u></h3>
<p><img src="/assets/images/java-lang/23-3.png" alt="image" width="30%" height="30%" /><br /><br />
<code class="language-plaintext highlighter-rouge">Stack</code>: 가장 먼저 저장된 데이터가 가장 마지막에 나오는 자료구조이다.<br />
LIFO(last-in-first-out) -&gt; 먼저 저장된 데이터가 마지막에 빠져나간다.</p>

<p><br /></p>

<p><img src="/assets/images/java-lang/23-4.png" alt="image" width="40%" height="40%" /><br /><br />
<code class="language-plaintext highlighter-rouge">Queue</code>: 들어간 순으로 빠져나오는 자료구조이다.<br />
FIFO(first-in-first-out) -&gt; 먼저 저장된 데이터가 먼저 빠져나간다.</p>

<h3 id="--queue-인터페이스와-큐queue의-규현">- <u>Queue 인터페이스와 큐(Queue)의 규현</u></h3>
<p>큐 자료구조를 위한 <code class="language-plaintext highlighter-rouge">Queue</code> 인터페이스를 대표하는 세 가지 메소드는 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="nf">add</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>    <span class="c1">// 넣기</span>
<span class="no">E</span> <span class="nf">remove</span><span class="o">()</span>          <span class="c1">// 꺼내기</span>
<span class="no">E</span> <span class="nf">element</span><span class="o">()</span>         <span class="c1">// 확인하기</span>
</code></pre></div></div>

<p>위의 메소드들은 꺼낼 인스턴스가 없거나 저장 공간이 부족할 때 예외를 발생시킨다.<br />
반면, 해당 상황에 특정값(null 또는 false)를 반환하는 메소드도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="nf">offer</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>  <span class="c1">// 넣기, 넣을 공간이 부족하면 false를 반환</span>
<span class="no">E</span> <span class="nf">poll</span><span class="o">()</span>            <span class="c1">// 꺼내기, 꺼낼 대상 없으면 null 반환</span>
<span class="no">E</span> <span class="nf">peek</span><span class="o">()</span>            <span class="c1">// 확인하기, 확인할 대상 없으면 null 반환</span>
</code></pre></div></div>

<p>일반적인 선택은 offer, poll, peek이다.<br />
비어있는 상황까지도 예외가 아닌 프로그램의 정상적인 흐름으로 간주하는 경우가 대부분이기 때문이다.</p>

<h3 id="--스택stack의-구현">- <u>스택(Stack)의 구현</u></h3>
<p>자바도 <code class="language-plaintext highlighter-rouge">Stack</code>을 지원한다.<br />
하지만 자바 초기에 정의된 클래스로써 지금은 이전 코드와의 호환성 유지를 위해 존재하는 클래스일 뿐이라고 한다.<br />
<code class="language-plaintext highlighter-rouge">Stack</code>은 동기화된 클래스로 멀티 쓰레드에 안전하지만, 그만큼 성능의 저하가 발생하기 때문에 대신에 자바 6에서 스택을 대신할 수 있는 <code class="language-plaintext highlighter-rouge">Dequq</code>이라는 자료구조를 살펴보도록하자.</p>

<p><img src="/assets/images/java-lang/23-6.jpeg" alt="image" width="40%" height="40%" /><br />
<br /></p>

<p><code class="language-plaintext highlighter-rouge">Deque</code>의 대표 메소드는 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 앞으로 넣고, 꺼내고, 확인하기</span>
<span class="kt">void</span> <span class="nf">addFirst</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>  <span class="c1">// 넣기</span>
<span class="no">E</span> <span class="nf">removeFirst</span><span class="o">()</span>     <span class="c1">// 꺼내기</span>
<span class="no">E</span> <span class="nf">getFirst</span><span class="o">()</span>        <span class="c1">// 확인하기</span>

<span class="c1">// 뒤로 넣고, 꺼내고, 확인하기</span>
<span class="kt">void</span> <span class="nf">addLast</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>   <span class="c1">// 넣기</span>
<span class="no">E</span> <span class="nf">removeLast</span><span class="o">()</span>      <span class="c1">// 꺼내기</span>
<span class="no">E</span> <span class="nf">getLast</span><span class="o">()</span>         <span class="c1">// 확인하기</span>
</code></pre></div></div>

<p>마찬가지로 예외 대신 특정 값을 반환하는 메소드들도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 앞으로 넣고, 꺼내고, 확인하기</span>
<span class="kt">boolean</span> <span class="nf">offerFirst</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span> <span class="c1">// 넣기, 공간 부족하면 false 반환</span>
<span class="no">E</span> <span class="nf">pollFirst</span><span class="o">()</span>           <span class="c1">// 꺼내기, 꺼낼 대상 없으면 null 반환</span>
<span class="no">E</span> <span class="nf">peekFirst</span><span class="o">()</span>           <span class="c1">// 확인하기, 확인할 대상 없으면 null 반환</span>

<span class="c1">// 뒤로 넣고, 꺼내고, 확인하기</span>
<span class="kt">boolean</span> <span class="nf">offerLast</span><span class="o">(</span><span class="no">E</span> <span class="n">e</span><span class="o">)</span>  <span class="c1">// 넣기, 공간 부족하면 false 반환</span>
<span class="no">E</span> <span class="nf">pollLast</span><span class="o">()</span>            <span class="c1">// 꺼내기, 꺼낼 대상 없으면 null 반환</span>
<span class="no">E</span> <span class="nf">peekLast</span><span class="o">()</span>            <span class="c1">// 확인하기, 확인할 대상 없으면 null 반환</span>
</code></pre></div></div>
<p><br /></p>

<p>따라서 <code class="language-plaintext highlighter-rouge">Deque</code>을 스택처럼 사용하고 싶으면, 넣고 빼낼 방향을 하나로 고정시키면 된다.<br />
offerFirst &amp; pollFirst -&gt; 앞으로 넣고 앞에서 꺼내기<br />
offerLast &amp; pollLast -&gt; 뒤로 넣고 뒤에서 꺼내기</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayDeque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Deque</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayDequeCollection</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>   <span class="c1">// Deque&lt;String&gt; deque = new LinkedList&lt;&gt;();</span>

        <span class="c1">// 앞으로 넣기</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">offerFirst</span><span class="o">(</span><span class="s">"1. Box"</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">offerFirst</span><span class="o">(</span><span class="s">"2. Toy"</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">offerFirst</span><span class="o">(</span><span class="s">"3. Robot"</span><span class="o">);</span>

        <span class="c1">// 앞에서 빼기</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pollFirst</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<p>(참고)<br />
<code class="language-plaintext highlighter-rouge">Deque</code> 인터페이스에는 <code class="language-plaintext highlighter-rouge">push</code>랑 <code class="language-plaintext highlighter-rouge">pop</code> 메소드가 있고, <code class="language-plaintext highlighter-rouge">Deque</code>을 구현하는 <code class="language-plaintext highlighter-rouge">LinkedList</code>랑 <code class="language-plaintext highlighter-rouge">ArrayDeque</code>에는 이 메소드가 이미 구현되어있다.<br />
따라서, <code class="language-plaintext highlighter-rouge">Deque</code>을 <code class="language-plaintext highlighter-rouge">Stack</code>으로 활용하고자 한다면, 그냥 <code class="language-plaintext highlighter-rouge">push</code>랑 <code class="language-plaintext highlighter-rouge">pop</code>을 활용해도 된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayDeque</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Deque</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayDequeCollection</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">deque</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>   <span class="c1">// Deque&lt;String&gt; deque = new LinkedList&lt;&gt;();</span>

        <span class="n">deque</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"1. Box"</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"2. Toy"</span><span class="o">);</span>
        <span class="n">deque</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="s">"3. Robot"</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">deque</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="23-5-mapk-v-인터페이스를-구현하는-컬렉션-클래스들">23-5. Map&lt;K, V&gt; 인터페이스를 구현하는 컬렉션 클래스들</h2>
<h3 id="--key-value-방식의-데이터-저장과-hashmap-클래스">- <u>Key-Value 방식의 데이터 저장과 HashMap 클래스</u></h3>
<p><code class="language-plaintext highlighter-rouge">Collection</code>을 구현하는 클래스가 <code class="language-plaintext highlighter-rouge">Value</code>를 저장하는 구조였다면,<br />
<code class="language-plaintext highlighter-rouge">Map</code>을 구현하는 클래스는 <code class="language-plaintext highlighter-rouge">Value</code>를 저장할 때, 이를 찾을 때 사용하는 <code class="language-plaintext highlighter-rouge">Key</code>를 함께 저장하는 구조이다.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Key</code>는 지표이므로 중복될 수 없다. 반면 <code class="language-plaintext highlighter-rouge">Key</code>만 다르면 <code class="language-plaintext highlighter-rouge">Value</code>는 중복되어도 상관없다.</p>
</blockquote>

<p><code class="language-plaintext highlighter-rouge">Map</code>을 구현하는 대표 클래스로는 <code class="language-plaintext highlighter-rouge">HashMap</code>과 <code class="language-plaintext highlighter-rouge">TreeMap</code>이 있다.<br />
둘의 가장 큰 차이점은 트리 자료구조를 기반으로 구현된 <code class="language-plaintext highlighter-rouge">TreeMap</code>은 정렬 상태(<code class="language-plaintext highlighter-rouge">Key</code>를 기준으로)를 유지한다는데 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashMapCollection</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="c1">// Key-Value 기반 데이터 저장</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">45</span><span class="o">,</span> <span class="s">"Brown"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">37</span><span class="o">,</span> <span class="s">"James"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">23</span><span class="o">,</span> <span class="s">"Martin"</span><span class="o">);</span>

        <span class="c1">// 데이터 탐색</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">45</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">37</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">23</span><span class="o">));</span>

        <span class="c1">// 데이터 삭제</span>
        <span class="n">map</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="mi">37</span><span class="o">);</span>

        <span class="c1">// 데이터 삭제 확인</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"37번: "</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">37</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--hashmap의-순차적-접근-방법">- <u>HashMap의 순차적 접근 방법</u></h3>
<p><code class="language-plaintext highlighter-rouge">HashMap</code> 클래스는 <code class="language-plaintext highlighter-rouge">Iterable</code> 인터페이스를 구현하지 않으니 for-each문이나, 반복자를 얻어서 값에 순차적으로 접근할 수 없다.<br />
다만, <code class="language-plaintext highlighter-rouge">keySet</code> 메소드를 통해 <code class="language-plaintext highlighter-rouge">Key</code>를 담은 <code class="language-plaintext highlighter-rouge">Set</code>을 생성해서 <code class="language-plaintext highlighter-rouge">Value</code>에 접근할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HashMapIteration</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">45</span><span class="o">,</span> <span class="s">"Brown"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">37</span><span class="o">,</span> <span class="s">"James"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">23</span><span class="o">,</span> <span class="s">"Martin"</span><span class="o">);</span>

        <span class="c1">// Key만 담고 있는 컬렉션 인스턴스 생성</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ks</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>

        <span class="c1">// Key와 Value를 출력(for-each문 기반)</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="nl">age:</span> <span class="n">ks</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">age</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">age</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Key와 Value를 출력(반복자 기반)</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Iterator</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">ks</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
            <span class="nc">Integer</span> <span class="n">age</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">age</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">age</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/23-7.png" alt="image" width="40%" height="40%" /><br /></p>

<h3 id="--treemap의-순차적-접근-방법">- <u>TreeMap의 순차적 접근 방법</u></h3>
<p><code class="language-plaintext highlighter-rouge">TreeMap</code>은 트리 자료구조를 기반으로 구현되어 있어서 정렬 상태를 유지한다.<br />
전에 작성한 코드에서 <code class="language-plaintext highlighter-rouge">Map</code>만 <code class="language-plaintext highlighter-rouge">TreeMap</code>으로 바꾸고 결과를 비교해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Iterator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.TreeMap</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TreeMapIteration</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">TreeMap</span><span class="o">&lt;&gt;();</span> <span class="c1">// TreeMap으로 바꿈</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">45</span><span class="o">,</span> <span class="s">"Brown"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">37</span><span class="o">,</span> <span class="s">"James"</span><span class="o">);</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="mi">23</span><span class="o">,</span> <span class="s">"Martin"</span><span class="o">);</span>

        <span class="c1">// Key만 담고 있는 컬렉션 인스턴스 생성</span>
        <span class="nc">Set</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ks</span> <span class="o">=</span> <span class="n">map</span><span class="o">.</span><span class="na">keySet</span><span class="o">();</span>

        <span class="c1">// Key와 Value를 출력(for-each문 기반)</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Integer</span> <span class="nl">age:</span> <span class="n">ks</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">age</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">age</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// Key와 Value를 출력(반복자 기반)</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Iterator</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">ks</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span> <span class="n">itr</span><span class="o">.</span><span class="na">hasNext</span><span class="o">();</span> <span class="o">)</span> <span class="o">{</span>
            <span class="nc">Integer</span> <span class="n">age</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Integer</span><span class="o">)</span> <span class="n">itr</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">age</span> <span class="o">+</span> <span class="s">" -&gt; "</span> <span class="o">+</span> <span class="n">map</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">age</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/23-8.png" alt="image" width="40%" height="40%" /><br /></p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 22 - 제네릭(Generics) 2</title><link href="http://localhost:4000/java%20lang/Chap22/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 22 - 제네릭(Generics) 2" /><published>2023-01-07T00:00:00+09:00</published><updated>2023-02-15T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap22</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap22/"><![CDATA[<h2 id="22-1-제네릭의-심화-문법">22-1. 제네릭의 심화 문법</h2>
<h3 id="--제네릭-클래스와-상속">- <u>제네릭 클래스와 상속</u></h3>
<p>제네릭 클래스도 다음과 같이 상속이 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="no">T</span> <span class="n">object</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObject</span><span class="o">(</span><span class="no">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SteelBox</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="kd">extends</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SteelBox</span><span class="o">(</span><span class="no">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 제네릭 클래스의 생성자</span>
        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GenericInheritance</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">iBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SteelBox</span><span class="o">&lt;&gt;(</span><span class="mi">8000</span><span class="o">);</span>
        <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SteelBox</span><span class="o">&lt;&gt;(</span><span class="s">"Simple"</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iBox</span><span class="o">.</span><span class="na">getObject</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sBox</span><span class="o">.</span><span class="na">getObject</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/22-1.png" alt="image" width="40%" height="40%" /><br /><br />
<img src="/assets/images/java-lang/22-3.png" alt="image" width="60%" height="60%" /><br /></p>
<blockquote>
  <p>SteelBox&lt;Integer&gt; 클래스는 Box&lt;Integer&gt; 클래스를 상속한다.<br />
SteelBox&lt;Integer&gt; 제네릭 타입은 Box&lt;Integer&gt; 제네릭 타입을 상속한다.</p>
</blockquote>

<p>상속 관계 파악을 잘 해야 한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Number</span><span class="o">&gt;</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;();</span>   <span class="c1">// 컴파일 가능할까?</span>
</code></pre></div></div>
<p>뭔가 <code class="language-plaintext highlighter-rouge">Number</code>를 <code class="language-plaintext highlighter-rouge">Integer</code>가 상속하니까 위의 코드도 가능할 것 같지만,<br />
Box&lt;Number&gt;와 Box&lt;Integer&gt;는 상속 관계를 형성하지 않는다.</p>

<h3 id="--타겟-타입target-types">- <u>타겟 타입(Target Types)</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="no">T</span> <span class="n">object</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setObject</span><span class="o">(</span><span class="no">T</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="no">T</span> <span class="nf">getObject</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">EmptyBoxFactory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">makeBox</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;&gt;();</span>
        <span class="k">return</span> <span class="n">box</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TargetTypes</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">iBox7</span> <span class="o">=</span> <span class="nc">EmptyBoxFactory</span><span class="o">.&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span><span class="n">makeBox</span><span class="o">();</span>    <span class="c1">// java 7 이전 문법</span>
        <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">iBox8</span> <span class="o">=</span> <span class="nc">EmptyBoxFactory</span><span class="o">.</span><span class="na">makeBox</span><span class="o">();</span> <span class="c1">// java 7부터 가능해짐</span>

        <span class="n">iBox7</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">7</span><span class="o">);</span>
        <span class="n">iBox8</span><span class="o">.</span><span class="na">setObject</span><span class="o">(</span><span class="mi">8</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iBox7</span><span class="o">.</span><span class="na">getObject</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">iBox8</span><span class="o">.</span><span class="na">getObject</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/22-2.png" alt="image" width="40%" height="40%" /><br /></p>

<p>위의 코드에서 makeBox 메소드는 인자를 전달받지 않는다.<br />
따라서, 원래는 T에 대한 타입 인자를 전달해주어야한다.<br />
하지만 자바 7부터는 컴파일러의 자료형 유추 범위가 넓어졌기 때문에 위와 같이 호출하는 것이 가능해졌다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">iBox8</span> <span class="o">=</span> <span class="nc">EmptyBoxFactory</span><span class="o">.</span><span class="na">makeBox</span><span class="o">();</span> <span class="c1">// java 7부터 가능해짐</span>
</code></pre></div></div>
<p>컴파일러는 위 문장을 보면서 makeBox 메소드는 Box&lt;Integer&gt; 인스턴스의 참조 값을 반환해야 한다고 판단한다.<br />
그리고 이 때, T의 유추에 사용된 정보 Box&lt;Integer&gt;를 가리켜 ‘타겟 타입’이라 한다.</p>

<h3 id="--와일드카드wildcard">- <u>와일드카드(Wildcard)</u></h3>
<h3 id="--와일드카드의-상한과-하한의-제한-bounded-wildcards">- <u>와일드카드의 상한과 하한의 제한: Bounded Wildcards</u></h3>
<h3 id="--언제-와일드-카드에-제한을-걸어야-하는가-도입">- <u>언제 와일드 카드에 제한을 걸어야 하는가?: 도입</u></h3>
<h3 id="--언제-와일드-카드에-제한을-걸어야-하는가-상한-제한의-목적">- <u>언제 와일드 카드에 제한을 걸어야 하는가?: 상한 제한의 목적</u></h3>
<h3 id="--언제-와일드-카드에-제한을-걸어야-하는가-하한-제한의-목적">- <u>언제 와일드 카드에 제한을 걸어야 하는가?: 하한 제한의 목적</u></h3>
<h3 id="--언제-와일드-카드에-제한을-걸어야-하는가-정리하기">- <u>언제 와일드 카드에 제한을 걸어야 하는가?: 정리하기</u></h3>
<h3 id="--제한된-와일드카드-선언을-갖는-제네릭-메소드">- <u>제한된 와일드카드 선언을 갖는 제네릭 메소드</u></h3>
<h3 id="--제네릭-인터페이스의-정의와-구현">- <u>제네릭 인터페이스의 정의와 구현</u></h3>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 21 - 제네릭(Generics) 1</title><link href="http://localhost:4000/java%20lang/Chap21/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 21 - 제네릭(Generics) 1" /><published>2022-12-17T00:00:00+09:00</published><updated>2023-02-14T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap21</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap21/"><![CDATA[<h2 id="21-1-제네릭의-이해">21-1. 제네릭의 이해</h2>
<blockquote>
  <p>클래스를 정의하는데 있어 자료형을 결정짓지 않고 틀만 만들어놓는 형태의 클래스 정의 형태</p>
</blockquote>

<h3 id="--제네릭-이전의-코드">- <u>제네릭 이전의 코드</u></h3>
<p>제네릭 문법이 등장하기 이전에는 일반적인 클래스를 정의할 때 다음과 같이 <code class="language-plaintext highlighter-rouge">Object</code>를 사용했다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Apple</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"I am an apple"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Orange</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"I am an Orange"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">GeneralBox</span> <span class="o">{</span>  <span class="c1">// 무엇이든지 담을 수 있는 박스</span>
    <span class="kd">private</span> <span class="nc">Object</span> <span class="n">object</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="nc">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeforeGeneric</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">GeneralBox</span> <span class="n">appleBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GeneralBox</span><span class="o">();</span>
        <span class="nc">GeneralBox</span> <span class="n">orangeBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GeneralBox</span><span class="o">();</span>

        <span class="n">appleBox</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="nc">Apple</span><span class="o">());</span>
        <span class="n">orangeBox</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="nc">Orange</span><span class="o">());</span>

        <span class="c1">// 명시적 형 변환이 필요함</span>
        <span class="nc">Apple</span> <span class="n">apple</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Apple</span><span class="o">)</span> <span class="n">appleBox</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="nc">Orange</span> <span class="n">orange</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Orange</span><span class="o">)</span> <span class="n">orangeBox</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">apple</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">orange</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
Object로 클래스를 디자인 할 시 인스턴스를 꺼내는 과정에서 필수적으로 명시적 형변환이 필요하다.<br />
그리고 이러한 번거로운 과정으로 인해 다음과 같은 실수가 발생할 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Apple</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"I am an apple"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Orange</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"I am an Orange"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">GeneralBox</span> <span class="o">{</span>  <span class="c1">// 무엇이든지 담을 수 있는 박스</span>
    <span class="kd">private</span> <span class="nc">Object</span> <span class="n">object</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="nc">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">object</span> <span class="o">=</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">object</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">BeforeGenericFault</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">GeneralBox</span> <span class="n">appleBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GeneralBox</span><span class="o">();</span>
        <span class="nc">GeneralBox</span> <span class="n">orangeBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GeneralBox</span><span class="o">();</span>

        <span class="c1">// 아래 두 문장에서는 사과와 오렌지가 아닌 '문자열'을 담았다.(개발자의 실수)</span>
        <span class="n">appleBox</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">);</span>
        <span class="n">orangeBox</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"Orange"</span><span class="o">);</span>

        <span class="c1">// 상자에 과일이 담기지 않았는데 과일을 꺼내려 한다.</span>
        <span class="nc">Apple</span> <span class="n">apple</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Apple</span><span class="o">)</span> <span class="n">appleBox</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="nc">Orange</span> <span class="n">orange</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Orange</span><span class="o">)</span> <span class="n">orangeBox</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">apple</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">orange</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>위 코드에서 가장 큰 문제점은 개발자의 실수가 컴파일 과정에서 발견되지 않았다는데 있다.<br />
즉, 제네릭 등장 이전의 자바코드는</p>
<ol>
  <li>물건을 꺼낼 때, 명시적 형변환이 필요하다는 점과</li>
  <li>이로 인해 프로그래머가 실수를 해도 그 실수가 드러나지 않을 수 있다<br />
는 점이 불편함과 문제점으로 있다.</li>
</ol>

<h3 id="--제네릭-기반의-클래스-정의하기">- <u>제네릭 기반의 클래스 정의하기</u></h3>
<p>제네릭이 등장하면서 <u>자료형에 의존적이지 않은 클래스</u>를 정의할 수 있게 되었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">T</span> <span class="n">ob</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="no">T</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ob</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="no">T</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ob</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>자료형에 의존적이지 않은 형태로 위의 클래스를 정의하였다.<br />
T는 인스턴스를 생성할 때 결정하면 된다.<br />
이렇게 <u>인스턴스 생성 시 T의 자료형을 결정하는 것</u>이 ‘제네릭’이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">aBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;();</span>
</code></pre></div></div>
<ul>
  <li>타입 매개변수 (Type Parameter): Box<T> 에서 T</T></li>
  <li>타입 인자 (Type Argument): Box<Apple> 에서 Apple</Apple></li>
  <li>매개변수화 타입 (Parameterized Type), 제네릭 타입(Generic Type): Box<Apple></Apple></li>
</ul>

<h3 id="--제네릭-이후의-코드">- <u>제네릭 이후의 코드</u></h3>
<p>다음의 예제를 통해 제네릭을 이해해보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Apple</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"I am an apple"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Orange</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"I am an Orange"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">T</span> <span class="n">ob</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="no">T</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ob</span> <span class="o">=</span> <span class="n">o</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="no">T</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">ob</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GenericExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">aBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;&gt;();</span>
        <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Orange</span><span class="o">&gt;</span> <span class="n">oBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;&gt;();</span>

        <span class="n">aBox</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="nc">Apple</span><span class="o">());</span>
        <span class="n">oBox</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="k">new</span> <span class="nc">Orange</span><span class="o">());</span>

        <span class="nc">Apple</span> <span class="n">apple</span> <span class="o">=</span> <span class="n">aBox</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>
        <span class="nc">Orange</span> <span class="n">orange</span> <span class="o">=</span> <span class="n">oBox</span><span class="o">.</span><span class="na">get</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">apple</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">orange</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="21-2-제네릭의-기본-문법">21-2. 제네릭의 기본 문법</h2>
<h3 id="--다중-매개변수-기반-제네릭-클래스의-정의">- <u>다중 매개변수 기반 제네릭 클래스의 정의</u></h3>
<p>다음과 같이 둘 이상의 타입 매개변수에 대한 제네릭 클래스도 정의할 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">DBox</span><span class="o">&lt;</span><span class="no">L</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="no">L</span> <span class="n">left</span><span class="o">;</span>
    <span class="kd">private</span> <span class="no">R</span> <span class="n">right</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">set</span><span class="o">(</span><span class="no">L</span> <span class="n">l</span><span class="o">,</span> <span class="no">R</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">left</span> <span class="o">=</span> <span class="n">l</span><span class="o">;</span>
        <span class="n">right</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">left</span> <span class="o">+</span> <span class="s">" &amp; "</span> <span class="o">+</span> <span class="n">right</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MultiTypeParam</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">DBox</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">DBox</span><span class="o">&lt;&gt;();</span>

        <span class="n">box</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="s">"Apple"</span><span class="o">,</span> <span class="mi">25</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">box</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>타입 매개변수의 이름은 일반적으로 다음 두 가지 규칙을 지켜서 이름을 짓는다.</p>
<ul>
  <li>한 문자로 이름을 짓는다.</li>
  <li>대문자로 이름을 짓는다.</li>
</ul>

<p>보편적으로 자주 사용하는 타입 매개변수의 이름과 그 의미는 다음과 같다.</p>
<ul>
  <li>E  Element</li>
  <li>K  Key</li>
  <li>N  Number</li>
  <li>T  Type</li>
  <li>V  Value</li>
</ul>

<h3 id="--기본-자료형에-대한-제한-그리고-래퍼-클래스">- <u>기본 자료형에 대한 제한 그리고 래퍼 클래스</u></h3>
<p>기본 자료형의 이름은 ‘타입 인자’로 쓸 수 없다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 타입 인자로 기본 자료형이 올 수 없으므로 컴파일 오류 발생</span>
<span class="nc">Box</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;&gt;();</span>
</code></pre></div></div>

<h3 id="--타입-인자의-생략-다이아몬드diamond-기호">- <u>타입 인자의 생략: 다이아몬드(Diamond) 기호</u></h3>
<p>컴파일러는 제네릭 관련 문장에서 자료형의 이름을 추론하는 능력을 갖고 있다.<br />
따라서 다음과 같은 두 가지 방법 모두 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">aBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;();</span>
<span class="nc">Box</span><span class="o">&lt;</span><span class="nc">Apple</span><span class="o">&gt;</span> <span class="n">aBox</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;&gt;();</span>
</code></pre></div></div>

<h3 id="--매개변수화-타입을-타입-인자로-전달하기">- <u>'매개변수화 타입'을 '타입 인자'로 전달하기</u></h3>
<p>‘매개변수화 타입’이 다음과 같이 ‘타입 인자’로 사용이 될 수도 있다.<br />
<img src="/assets/images/java-lang/21-1.png" alt="image" width="80%" height="80%" /><br /></p>

<h3 id="--제네릭-클래스의-타입-인자-제한하기">- <u>제네릭 클래스의 타입 인자 제한하기</u></h3>
<p><code class="language-plaintext highlighter-rouge">extends</code> 키워드를 이용해서 제네릭 클래스의 타입 인자를 제한할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 클래스나 인터페이스로 제한</span>
<span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">Number</span><span class="o">&gt;</span> <span class="o">{...}</span>   <span class="c1">// 클래스</span>
<span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">Eatable</span><span class="o">&gt;</span> <span class="o">{...}</span>  <span class="c1">// 인터페이스</span>

<span class="c1">// 하나의 클래스와 하나 이상의 인터페이스에 대해 동시에 제한을 하는 경우</span>
<span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">Number</span> <span class="o">&amp;</span> <span class="nc">Eatable</span><span class="o">&gt;</span> <span class="o">{...}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/21-2.png" alt="image" width="70%" height="70%" /><br /></p>

<h3 id="--제네릭-메소드의-정의">- <u>제네릭 메소드의 정의</u></h3>
<p>클래스를 대상으로 하는 것이 아닌 메소드에 대해서 제네릭으로 정의하는 것도 가능하다.<br />
제네릭 메소드는 인스턴스 메소드 뿐만 아니라 클래스 메소드에 대해서도 정의가 가능하다.<br />
즉, <code class="language-plaintext highlighter-rouge">static</code> 선언의 유무에 상관없이 제네릭 메소드의 정의가 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BoxFactory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">makeBox</span><span class="o">(</span><span class="no">T</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">&lt;&gt;();</span>   <span class="c1">// 상자를 생성하고</span>
        <span class="n">box</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">o</span><span class="o">);</span> <span class="c1">// 전달된 인스턴스를 상자에 담아서</span>
        <span class="k">return</span> <span class="n">box</span><span class="o">;</span> <span class="c1">// 상자를 반환한다.</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>제네릭 클래스는 ‘인스턴스 생성 시’ 자료형이 결정된다.<br />
반면, 제네릭 메소드는 ‘메소드 호출 시’ 자료형이 결정된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 1. 기본형태</span>
<span class="nc">Box</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sBox</span> <span class="o">=</span> <span class="nc">BoxFactory</span><span class="o">.&lt;</span><span class="nc">String</span><span class="o">&gt;</span><span class="n">makeBox</span><span class="o">(</span><span class="s">"Sweet"</span><span class="o">);</span>
<span class="nc">Box</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">dBox</span> <span class="o">=</span> <span class="nc">BoxFactory</span><span class="o">.&lt;</span><span class="nc">Double</span><span class="o">&gt;</span><span class="n">makeBox</span><span class="o">(</span><span class="mf">7.59</span><span class="o">);</span>

<span class="c1">// 2. 컴파일러는 'makeBox에 전달되는 인자'를 보고 T를 String과 Double로 유추한다.</span>
<span class="nc">Box</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sBox</span> <span class="o">=</span> <span class="nc">BoxFactory</span><span class="o">.</span><span class="na">makeBox</span><span class="o">(</span><span class="s">"Sweet"</span><span class="o">);</span>
<span class="nc">Box</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">dBox</span> <span class="o">=</span> <span class="nc">BoxFactory</span><span class="o">.</span><span class="na">makeBox</span><span class="o">(</span><span class="mf">7.59</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="--제네릭-메소드의-제한된-타입-매개변수-선언">- <u>제네릭 메소드의 제한된 타입 매개변수 선언</u></h3>
<p>제네릭 클래스와 같이 제네릭 메소드도 타입 제한이 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span> <span class="kd">extends</span> <span class="nc">Number</span><span class="o">&gt;</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">makeBox</span><span class="o">(</span><span class="no">T</span> <span class="n">o</span><span class="o">)</span> <span class="o">{...</span> <span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 20 - 자바의 기본 클래스</title><link href="http://localhost:4000/java%20lang/Chap20/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 20 - 자바의 기본 클래스" /><published>2022-11-26T00:00:00+09:00</published><updated>2022-11-26T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap20</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap20/"><![CDATA[<h2 id="20-1-래퍼-클래스-wrapper-클래스">20-1. 래퍼 클래스 (Wrapper 클래스)</h2>
<blockquote>
  <p>래퍼 클래스는 이름이 의미하듯이 ‘기본 자료형의 값들을 감싸는 클래스’이다.</p>
</blockquote>

<h3 id="--기본-자료형의-값을-감싸는-래퍼-클래스">- <u>기본 자료형의 값을 감싸는 래퍼 클래스</u></h3>
<p>래퍼 클래스는 기본 자료형의 값을 감싸는 클래스이다.<br />
모든 기본 자료형을 대상으로 래퍼 클래스가 정의되어 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Boolean</span>
<span class="kd">public</span> <span class="nf">Boolean</span><span class="o">(</span><span class="kt">boolean</span> <span class="n">value</span><span class="o">)</span>

<span class="c1">// Character</span>
<span class="kd">public</span> <span class="nf">Character</span><span class="o">(</span><span class="kt">char</span> <span class="n">value</span><span class="o">)</span>

<span class="c1">// Byte</span>
<span class="kd">public</span> <span class="nf">Byte</span><span class="o">(</span><span class="kt">byte</span> <span class="n">value</span><span class="o">)</span>

<span class="c1">// Short</span>
<span class="kd">public</span> <span class="nf">Short</span><span class="o">(</span><span class="kt">short</span> <span class="n">value</span><span class="o">)</span>

<span class="c1">// Integer</span>
<span class="kd">public</span> <span class="nf">Integer</span><span class="o">(</span><span class="kt">int</span> <span class="n">value</span><span class="o">)</span>

<span class="c1">// Long</span>
<span class="kd">public</span> <span class="nf">Integer</span><span class="o">(</span><span class="kt">long</span> <span class="n">value</span><span class="o">)</span>

<span class="c1">// Float</span>
<span class="kd">public</span> <span class="nf">Float</span><span class="o">(</span><span class="kt">float</span> <span class="n">value</span><span class="o">),</span> <span class="kd">public</span> <span class="nf">Float</span><span class="o">(</span><span class="kt">double</span> <span class="n">value</span><span class="o">)</span>

<span class="c1">// Double</span>
<span class="kd">public</span> <span class="nf">Double</span><span class="o">(</span><span class="kt">double</span> <span class="n">value</span><span class="o">)</span>
</code></pre></div></div>

<h3 id="--래퍼-클래스의-두-가지-기능">- <u>래퍼 클래스의 두 가지 기능</u></h3>
<p>하나는 값을 인스턴스로 감싸는 것이고, 다른 하나는 인스턴스에서 값을 꺼내는 것이다.<br />
<img src="/assets/images/java-lang/20-1.png" alt="image" width="50%" height="50%" /><br /></p>

<ul>
  <li>박싱(Boxing): 값을 인스턴스에 감싸는 행위</li>
  <li>언박싱(Unboxing): 저장된 값을 꺼내는 행위</li>
</ul>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span> <span class="n">iObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span> <span class="c1">// 박싱</span>
<span class="nc">Double</span> <span class="n">dObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Double</span><span class="o">(</span><span class="mf">3.14</span><span class="o">);</span> <span class="c1">// 박싱</span>

<span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="n">iObj</span><span class="o">.</span><span class="na">intValue</span><span class="o">();</span> <span class="c1">// 언박싱</span>
<span class="kt">double</span> <span class="n">num2</span> <span class="o">=</span> <span class="n">dObj</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">();</span>   <span class="c1">// 언박싱</span>
</code></pre></div></div>

<p>래퍼 인스턴스들은 담고 있는 값을 수정하지 못한다.<br />
따라서 값의 수정이 필요하면 새로운 래퍼 인스턴스를 생성해야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">iObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Integer</span><span class="o">(</span><span class="n">iObj</span><span class="o">.</span><span class="na">intValue</span><span class="o">()</span> <span class="o">+</span> <span class="mi">10</span><span class="o">);</span>
<span class="n">dObj</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Double</span><span class="o">(</span><span class="n">dObj</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">+</span> <span class="mf">1.2</span><span class="o">);</span>
</code></pre></div></div>

<h3 id="--오토-박싱auto-boxing--오토-언박싱auto-unboxing">- <u>오토 박싱(Auto Boxing) &amp; 오토 언박싱(Auto Unboxing)</u></h3>
<p>자바 5부터 박싱과 언박싱이 필요한 상황에서 이를 자동으로 처리하기 시작했다.<br />
이를 오토 박싱, 오토 언박싱이라 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Integer</span> <span class="n">iObj</span> <span class="o">=</span> <span class="mi">10</span><span class="o">;</span>  <span class="c1">// 오토 박싱 진행</span>
<span class="nc">Double</span> <span class="n">dObj</span> <span class="o">=</span> <span class="mf">3.14</span>  <span class="c1">// 오토 박싱 진행</span>

<span class="kt">int</span> <span class="n">num1</span> <span class="o">=</span> <span class="n">iObj</span><span class="o">;</span>    <span class="c1">// 오토 언박싱</span>
<span class="kt">double</span> <span class="n">num2</span> <span class="o">=</span> <span class="n">dObj</span><span class="o">;</span> <span class="c1">// 오토 언박싱</span>

<span class="n">iObj</span><span class="o">++;</span> <span class="c1">// 오토 박싱, 오토 언박싱 동시 진행</span>
</code></pre></div></div>

<h2 id="20-2-biginteger-클래스와-bigdecimal-클래스">20-2. BigInteger 클래스와 BigDecimal 클래스</h2>
<h3 id="--매우-큰-정수의-표현을-위한-javamathbiginteger-클래스">- <u>매우 큰 정수의 표현을 위한 java.math.BigInteger 클래스</u></h3>
<p>일반적인 범위를 넘어서는 매우 큰 수의 표현을 위해 자바는 BigInteger 클래스를 제공한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">BigInteger</span> <span class="n">big1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="s">"10000000000000000000000"</span><span class="o">);</span>
<span class="nc">BigInteger</span> <span class="n">big2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigInteger</span><span class="o">(</span><span class="s">"-9999999999999999999999"</span><span class="o">);</span>
</code></pre></div></div>

<p>그리고 이렇게 표현한 큰 수를 연산하는 다양한 메소드가 정의되어있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">BigInteger</span> <span class="nf">add</span><span class="o">(</span><span class="nc">BigInteger</span> <span class="n">val</span><span class="o">);</span>  <span class="c1">// 덧셈</span>
<span class="kd">public</span> <span class="nc">BigInteger</span> <span class="nf">subtract</span><span class="o">(</span><span class="nc">BigInteger</span> <span class="n">val</span><span class="o">);</span> <span class="c1">// 뺄셈</span>
<span class="kd">public</span> <span class="nc">BigInteger</span> <span class="nf">multiply</span><span class="o">(</span><span class="nc">BigInteger</span> <span class="n">val</span><span class="o">);</span> <span class="c1">// 곱셈</span>
<span class="kd">public</span> <span class="nc">BigInteger</span> <span class="nf">divide</span><span class="o">(</span><span class="nc">BigInteger</span> <span class="n">val</span><span class="o">);</span> <span class="c1">// 나눗셈의 몫</span>
<span class="kd">public</span> <span class="nc">BigInteger</span> <span class="nf">remainder</span><span class="o">(</span><span class="nc">BigInteger</span> <span class="n">val</span><span class="o">);</span>  <span class="c1">// 나눗셈의 나머지</span>
</code></pre></div></div>

<p>연산을 통해 그 값이 int형 또는 long형으로 표현이 가능한 수준에 이르면 다음 메소드의 호출로 인스턴스에 저장된 값을 얻을 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kt">long</span> <span class="nf">longValueExact</span><span class="o">();</span> <span class="c1">// BigInteger 인스턴스에 저장된 값을 long형 정수로 반환</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">intValueExact</span><span class="o">();</span> <span class="c1">// BigInteger 인스턴스에 저장된 값을 int형 정수로 반환</span>
</code></pre></div></div>

<h3 id="--오차-없는-실수의-표현을-위한-javamathbigdecimal-클래스">- <u>오차 없는 실수의 표현을 위한 java.math.BigDecimal 클래스</u></h3>
<p>BigDecimal 클래스는 오차 없는 실수의 표현을 위해 제공되는 클래스이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 정상적인 방법</span>
<span class="nc">BigDecimal</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"1.6"</span><span class="o">);</span>
<span class="nc">BigDecimal</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="s">"0.1"</span><span class="o">);</span>

<span class="c1">// 가능은 하지만 오차 발생(실수는 표현되는 순간부터 오차를 지니기 때문)</span>
<span class="nc">BigDecimal</span> <span class="n">d1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="mf">1.6</span><span class="o">);</span>
<span class="nc">BigDecimal</span> <span class="n">d2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BigDecimal</span><span class="o">(</span><span class="mf">0.1</span><span class="o">);</span>
</code></pre></div></div>

<p>BigDecimal 클래스에도 다음 사칙연산을 포함하여 다양한 연산을 위한 메소드가 정의되어 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">add</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">augend</span><span class="o">);</span> <span class="c1">// 덧셈</span>
<span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">subtract</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">subtrahend</span><span class="o">);</span>  <span class="c1">// 뺄셈</span>
<span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">multiply</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">multiplicand</span><span class="o">);</span>  <span class="c1">// 곱셈</span>
<span class="kd">public</span> <span class="nc">BigDecimal</span> <span class="nf">divide</span><span class="o">(</span><span class="nc">BigDecimal</span> <span class="n">divisor</span><span class="o">);</span> <span class="c1">// 나눗셈</span>
</code></pre></div></div>

<h2 id="20-3-math-클래스와-난수의-생성-그리고-문자열-토큰tocken의-구분">20-3. Math 클래스와 난수의 생성, 그리고 문자열 토큰(Tocken)의 구분</h2>
<h3 id="--수학-관련-다양한-연산의-제공을-위한-math-클래스">- <u>수학 관련 다양한 연산의 제공을 위한 Math 클래스</u></h3>
<p>Math 클래스에 정의된 여러 static 메소드에 대해서 알아보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SimpleMathUse</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"원주열: "</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">PI</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2의 제곱근: "</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="mi">2</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"파이에 대한 Degree: "</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">toDegrees</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">PI</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2 파이에 대한 Degree: "</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">toDegrees</span><span class="o">(</span><span class="mi">2</span> <span class="o">*</span> <span class="nc">Math</span><span class="o">.</span><span class="na">PI</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="kt">double</span> <span class="n">radian45</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">toRadians</span><span class="o">(</span><span class="mi">45</span><span class="o">);</span>   <span class="c1">// 디그리 단위의 값을 라디안 값으로 변환!</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"싸인 45: "</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">sin</span><span class="o">(</span><span class="n">radian45</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"코싸인 45: "</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">cos</span><span class="o">(</span><span class="n">radian45</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"탄젠트 45: "</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">tan</span><span class="o">(</span><span class="n">radian45</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"로그 25: "</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">log</span><span class="o">(</span><span class="mi">25</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2의 16승: "</span> <span class="o">+</span> <span class="nc">Math</span><span class="o">.</span><span class="na">pow</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">26</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/20-2.png" alt="image" width="40%" height="40%" /><br /></p>

<h3 id="--난수random-number의-생성">- <u>난수(Random Number)의 생성</u></h3>
<p>난수는 예측 불가능한 수를 의미한다.<br />
자바에서 난수를 생성하는 방법은 java.util.Random 클래스의 인스턴스를 이용하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>

<span class="c1">// 메소드</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">nextBoolean</span><span class="o">();</span> <span class="c1">// boolean형 난수 반환</span>
<span class="kd">public</span> <span class="kt">int</span> <span class="nf">nextInt</span><span class="o">();</span> <span class="c1">// int형 난수 반환</span>
<span class="kd">public</span> <span class="kt">long</span> <span class="nf">nextLong</span><span class="o">();</span> <span class="c1">// long형 난수 반환</span>
<span class="kd">public</span> <span class="kt">float</span> <span class="nf">nextFloat</span><span class="o">();</span> <span class="c1">// 0.0 이상 1.0 미만의 float형 난수 반환</span>
<span class="kd">public</span> <span class="kt">double</span> <span class="nf">nextDouble</span><span class="o">();</span> <span class="c1">// 0.0 이상 1.0 미만의 double형 난수 반환</span>
</code></pre></div></div>

<h3 id="--씨드seed-기반의-난수-생성">- <u>씨드(Seed) 기반의 난수 생성</u></h3>
<p>컴퓨터가 난수를 생성하는 것은 일종의 패턴이 있다.<br />
이 값을 씨드 값(Seed Number)라고 하는데, 난수 생성 알고리즘은 이 숫자를 기반으로 돌아가기 때문에 이 값이 같으면 생성되는 난수의 패턴은 100% 일치한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GanRandom</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>  <span class="c1">// seed 값을 전달받음</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">1000</span><span class="o">));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>사실 씨드 값을 별도로 전달하지 않고 Random 인스턴스를 생성해도 내부에서는 다음과 같은 방식으로 씨드 값을 설정한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>

<span class="kd">public</span> <span class="nf">Random</span><span class="o">()</span> <span class="o">{</span>
  <span class="k">this</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">());</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--문자열의-토큰token-구분">- <u>문자열의 토큰(Token) 구분</u></h3>
<p>StringTokenizer 클래스를 이용하면 특정 기준을 가지고 문자열을 작게 나눌 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// StringTokenizer 생성자</span>
<span class="kd">public</span> <span class="nf">StringTokenizer</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">,</span> <span class="nc">String</span> <span class="n">delim</span><span class="o">);</span>

<span class="c1">// 반환할 토큰이 남아있나</span>
<span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">hasMoreTokens</span><span class="o">();</span>

<span class="c1">// 다음 토큰을 반환</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">nextToken</span><span class="o">();</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TokenizeString</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">StringTokenizer</span> <span class="n">st1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="s">"PM:08:45"</span><span class="o">,</span> <span class="s">":"</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">st1</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">st1</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// 구분자로 여러 개를 설정할 수 있다.</span>
        <span class="nc">StringTokenizer</span> <span class="n">st2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="s">"12 + 36 - 8 / 2 = 44"</span><span class="o">,</span> <span class="s">"+-/= "</span><span class="o">);</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">st2</span><span class="o">.</span><span class="na">hasMoreTokens</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">st2</span><span class="o">.</span><span class="na">nextToken</span><span class="o">()</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="20-4-arrays-클래스">20-4. Arrays 클래스</h2>
<p>java.util.Arrays 클래스는 배열 조작에 도움을 주는 메소드들로 채워져 있다.<br />
이 클래스의 메소드들을 이용해 배열의 복사, 비교, 정렬 및 탐색을 손쉽게 진행해보자.</p>

<h3 id="--배열의-복사">- <u>배열의 복사</u></h3>
<p><img src="/assets/images/java-lang/20-3.png" alt="image" width="80%" height="80%" /><br />
<img src="/assets/images/java-lang/20-4.png" alt="image" width="80%" height="80%" /><br />
<img src="/assets/images/java-lang/20-5.png" alt="image" width="80%" height="80%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CopyOfArrays</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">3</span><span class="o">;</span>
        <span class="kt">double</span><span class="o">[]</span> <span class="n">originArray</span> <span class="o">=</span> <span class="o">{</span><span class="mf">1.1</span><span class="o">,</span> <span class="mf">2.2</span><span class="o">,</span> <span class="mf">3.3</span><span class="o">,</span> <span class="mf">4.4</span><span class="o">,</span> <span class="mf">5.5</span><span class="o">};</span>

        <span class="c1">// copyOf 메소드: 첫 번째 요소부터 n번째 요소까지 배열 복사</span>
        <span class="kt">double</span><span class="o">[]</span> <span class="n">copyArray1</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOf</span><span class="o">(</span><span class="n">originArray</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>

        <span class="c1">// copyOfRange 메소드: 인덱스 번호 from 부터 to 이전 요소까지 복사</span>
        <span class="kt">double</span><span class="o">[]</span> <span class="n">copyArray2</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">copyOfRange</span><span class="o">(</span><span class="n">originArray</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">4</span><span class="o">);</span>

        <span class="c1">// 이미 존재하는 배열에 복사를 하려는 경우</span>
        <span class="c1">// 배열 org의 인덱스 1에서 배열 copyArray3의 인덱스 1로 n 개의 요소 복사</span>
        <span class="kt">double</span><span class="o">[]</span> <span class="n">copyArray3</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">double</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">arraycopy</span><span class="o">(</span><span class="n">originArray</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">copyArray3</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="n">n</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">double</span> <span class="n">i</span> <span class="o">:</span> <span class="n">copyArray1</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">double</span> <span class="n">i</span> <span class="o">:</span> <span class="n">copyArray2</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">double</span> <span class="n">i</span> <span class="o">:</span> <span class="n">copyArray3</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/20-6.png" alt="image" width="50%" height="50%" /><br /></p>

<h3 id="--배열의-비교">- <u>배열의 비교</u></h3>
<p><img src="/assets/images/java-lang/20-7.png" alt="image" width="80%" height="80%" /><br />
위의 메소드는 두 배열에 저장된 데이터의 수, 순서, 그리고 내용이 같을 때 true를 반환한다.(배열의 길이가 다른 경우에도 false를 반환한다.)</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">a2</span><span class="o">);</span>
</code></pre></div></div>
<p>이 메소드는 Object형 배열에 대해서도 오버로딩 되어 있다.<br />
Object 클래스에 정의되어 있는 equals 메소드는 참조 값 비교를 진행한다.<br />
따라서, 배열의 참조 값 비교가 아닌 내용 비교가 목적이라면 다음과 같이 equals 메소드를 목적에 맞게 오버라이딩 해야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">INum</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">num</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">INum</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">num</span> <span class="o">==</span> <span class="o">((</span><span class="nc">Num</span><span class="o">)</span><span class="n">obj</span><span class="o">).</span><span class="na">num</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 두 인스턴스의 내용 비교</span>
      <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
      <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ArrayObjEquals</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">INum</span><span class="o">[]</span> <span class="n">ar1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
    <span class="nc">INum</span><span class="o">[]</span> <span class="n">ar2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>

    <span class="n">ar1</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span> <span class="n">ar2</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
    <span class="n">ar1</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span> <span class="n">ar2</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="n">ar1</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span> <span class="n">ar2</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>

    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">ar1</span><span class="o">,</span> <span class="n">ar2</span><span class="o">));</span>  <span class="c1">// true</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--배열의-정렬">- <u>배열의 정렬</u></h3>
<p><img src="/assets/images/java-lang/20-9.png" alt="image" width="65%" height="65%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">4</span><span class="o">};</span>
<span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">ar</span><span class="o">);</span>
</code></pre></div></div>

<p>이 메소드는 다음과 같이 Object 배열에 대해서도 오버로딩 되어 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">a</span><span class="o">)</span>
</code></pre></div></div>

<p>인스턴스의 참조 값을 저장하고 있는 배열에 대한 정렬은 무엇을 기준으로 할까?<br />
다음 인터페이스의 구현을 기반으로 프로그래머가 클래스 별로 결정하게 되어 있다.</p>

<p><img src="/assets/images/java-lang/20-10.png" alt="image" width="70%" height="70%" /><br />
위 인터페이스에 존재하는 추상 메소드 compareTo의 구현 방법은 다음과 같다.</p>
<ul>
  <li>인자로 전달된 o가 작다면 양의 정수 반환</li>
  <li>인자로 전달된 o가 크다면 음의 정수 반환</li>
  <li>인자로 전달된 o와 같다면 0을 반환</li>
</ul>

<p>다음의 예시를 통해 compareTo 메소드를 어떻게 구성하는지 살펴보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="nc">Comparable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 나이가 어린 인스턴스의 크기가 작은 것으로 결정한다.
     *
     * @param o the object to be compared.
     * @return
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Person</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Person</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">-</span> <span class="n">p</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
<span class="c1">//        if (this.age &gt; ((Person)o).age) return 1;</span>
<span class="c1">//        else if (this.age &lt; ((Person)o).age) return -1;</span>
<span class="c1">//        else return 0;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayObjSort</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Person</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
        <span class="n">ar</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Kim"</span><span class="o">,</span> <span class="mi">22</span><span class="o">);</span>
        <span class="n">ar</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Choi"</span><span class="o">,</span> <span class="mi">26</span><span class="o">);</span>
        <span class="n">ar</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Park"</span><span class="o">,</span> <span class="mi">24</span><span class="o">);</span>

        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">ar</span><span class="o">);</span>
        <span class="k">for</span> <span class="o">(</span><span class="nc">Person</span> <span class="n">p</span> <span class="o">:</span> <span class="n">ar</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/20-11.png" alt="image" width="45%" height="45%" /><br /></p>

<h3 id="--배열의-탐색">- <u>배열의 탐색</u></h3>
<p><img src="/assets/images/java-lang/20-12.png" alt="image" width="70%" height="70%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArraySearch</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="o">{</span><span class="mi">33</span><span class="o">,</span> <span class="mi">55</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">44</span><span class="o">,</span> <span class="mi">22</span><span class="o">};</span>

        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">ar</span><span class="o">);</span>    <span class="c1">// 탐색 이전에 정렬이 선행되어야 한다.</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">ar</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">binarySearch</span><span class="o">(</span><span class="n">ar</span><span class="o">,</span> <span class="mi">33</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Index of 33: "</span> <span class="o">+</span> <span class="n">idx</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이진 탐색(Binary Search)라는 알고리즘을 기반으로 탐색을 진행하기 때문에 정렬 과정이 선행되어야한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">binarySearch</span><span class="o">(</span><span class="nc">Object</span><span class="o">[]</span> <span class="n">a</span><span class="o">,</span> <span class="nc">Object</span> <span class="n">key</span><span class="o">)</span>
</code></pre></div></div>
<p>마찬가지로 Object형 배열에 대해서도 오버로딩되어있고,<br />
마찬가지로 이 메소드를 사용하기 위해 Comparable 인터페이스를 구현하고 compareTo 메소드를 오버라이딩하면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Person</span> <span class="kd">implements</span> <span class="nc">Comparable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span> <span class="o">+</span> <span class="s">": "</span> <span class="o">+</span> <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 탐색 기준: 이름
     *
     * @param o the object to be compared.
     * @return
     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Person</span> <span class="n">p</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Person</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span><span class="o">.</span><span class="na">compareTo</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayObjSearch</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Person</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span>
        <span class="n">ar</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Kim"</span><span class="o">,</span> <span class="mi">22</span><span class="o">);</span>
        <span class="n">ar</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Choi"</span><span class="o">,</span> <span class="mi">26</span><span class="o">);</span>
        <span class="n">ar</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Park"</span><span class="o">,</span> <span class="mi">24</span><span class="o">);</span>

        <span class="nc">Arrays</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">ar</span><span class="o">);</span>

        <span class="kt">int</span> <span class="n">idx</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">binarySearch</span><span class="o">(</span><span class="n">ar</span><span class="o">,</span> <span class="k">new</span> <span class="nc">Person</span><span class="o">(</span><span class="s">"Choi"</span><span class="o">,</span> <span class="mi">26</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ar</span><span class="o">[</span><span class="n">idx</span><span class="o">]);</span>  <span class="c1">// choi: 26</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/20-13.png" alt="image" width="35%" height="35%" /><br /></p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 19 - 자바의 메모리 모델과 Object 클래스</title><link href="http://localhost:4000/java%20lang/Chap19/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 19 - 자바의 메모리 모델과 Object 클래스" /><published>2022-11-24T00:00:00+09:00</published><updated>2022-11-25T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap19</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap19/"><![CDATA[<h2 id="19-1-자바-가상머신의-메모리-모델">19-1. 자바 가상머신의 메모리 모델</h2>
<h3 id="--가상머신은-운영체제-위에서-동작합니다">- <u>가상머신은 운영체제 위에서 동작합니다.</u></h3>
<blockquote>
  <p>자바 가상머신은 운영체제 위에서 실행되는 하나의 프로그램이다.<br />
자바 프로그램은 자바 가상머신에서 실행되는 프로그램이다.</p>
</blockquote>

<p>프로그램의 실행에 필요한 메모리 공간을 가리켜 ‘메인 메모리(Main Memory)’라고 한다.<br />
그리고 이 메모리의 효율적인 사용을 위해서 운영체제가 응용프로그램에게 메모리를 할당해준다.<br />
<br />
즉, 자바 가상머신은 운영체제가 할당해 주는 메모리 공간을 기반으로 스스로를 실행하면서 더불어 자바 응용 프로그램의 실행도 돕는다.</p>

<h3 id="--자바-가상머신의-메모리-살림살이">- <u>자바 가상머신의 메모리 살림살이</u></h3>
<p>가상머신은 운영체제로부터 할당받은 메모리 공간의 효율적인 사용을 고민해야 한다.<br />
그리고 이 저장공간의 효율적인 사용을 위해 ‘수납장’ 처럼 메모리 공간을 나누고 데이터를 특성에 따라 구분해서 저장한다.<br />
<img src="/assets/images/java-lang/19-1.png" alt="image" width="50%" height="50%" /><br /></p>

<p>각각의 메모리 영역에는 다음의 데이터들을 저장한다.</p>

<ul>
  <li>메소드 영역(Method Area): 메소드의 바이트코드, static 변수</li>
  <li>스택 영역(Stack Area): 지역변수, 매개변수</li>
  <li>힙 영역(Heap Area): 인스턴스</li>
</ul>

<h3 id="--메소드-영역method-area">- <u>메소드 영역(Method Area)</u></h3>
<blockquote>
  <p>‘프로그램이 종료될 때까지’ 유지되어야 할 정보가 저장된다.
바이트 코드(Byte Code): 소스파일을 컴파일할 때 생성되는, 자바 가상머신에 의해 실행이 가능한 코드</p>
</blockquote>

<p><img src="/assets/images/java-lang/19-2.png" alt="image" width="50%" height="50%" /><br /></p>

<p>바이트 코드도 메모리 공간에 존재해야 실행이 가능하다.<br />
인스턴스의 생성 및 클래스 변수의 접근을 위해서는 먼저 해당 클래스의 바이트코드가 메모리 공간에 로딩되어야 한다.<br />
즉, 메소드 영역은 특정 클래스의 정보가 메모리 공간에 올려질 때 채워지는 영역이다.</p>

<h3 id="--스택-영역stack-area">- <u>스택 영역(Stack Area)</u></h3>
<p>스택은 지역 변수와 매개변수가 저장되는 공간이다. 이 둘은 다음과 같은 공통점이 있다.</p>
<blockquote>
  <p>중괄호로 구분되는 지역 내에서만 유효한 변수들이다.</p>
</blockquote>

<p><img src="/assets/images/java-lang/19-3.png" alt="image" width="70%" height="70%" /><br />
<img src="/assets/images/java-lang/19-4.png" alt="image" width="70%" height="70%" /><br />
<img src="/assets/images/java-lang/19-5.png" alt="image" width="70%" height="70%" /><br /></p>

<p>즉, 중괄호 내에 할당된 이후에 해당 중괄호를 벗어나면 바로 소멸되는 특성의 데이터 저장을 위한 영역이<br />
‘스택’이다.</p>

<h3 id="--힙-영역heap-area">- <u>힙 영역(Heap Area)</u></h3>
<p>인스턴스를 스택이 아닌 힙이라는 별도의 영역에 할당하는 이유는 무엇일까?</p>
<blockquote>
  <p>인스턴스의 소멸 시점과 소멸 방법이 지역변수와 다르기 때문이다.</p>
</blockquote>

<p><img src="/assets/images/java-lang/19-6.png" alt="image" width="80%" height="80%" /><br /></p>

<h3 id="--자바-가상머신의-인스턴스-소멸시기">- <u>자바 가상머신의 인스턴스 소멸시기</u></h3>
<p>인스턴스의 소멸시기는 더 이상 접근할 수 없어지는 시기,<br />
즉 대상 인스턴스를 참조하는 게 더 이상 없을 때이다.<br />
<img src="/assets/images/java-lang/19-7.png" alt="image" width="50%" height="50%" /><br /></p>

<p>이러한 인스턴스의 소멸 방식을 가리켜 ‘가비지 컬렉션(Garbage Collection)이라고 한다.<br />
정리하자면, 힙 영역은 가상머신에 의한 가비지 컬렉션이 일어나는 메모리 공간이다.<br />
즉 스택 영역과 힙 영역을 구분하여 관리하는 이유는 가비지 컬렉션 때문이다.</p>

<p>(참고) 가비지 컬렉션이 발생하는 시점<br />
인스턴스가 가비지 컬렉션의 대상이 되었다고 바로 소멸되지는 않는다.<br />
가비지 컬렉션의 빈번한 실행은 시스템에 부담이기 때문에 성능에 영향을 미치지 않도록 실행 타이밍은 별도의 알고리즘을 기반으로 계산된다.</p>

<h2 id="19-2-object-클래스">19-2. Object 클래스</h2>
<h3 id="--인스턴스의-비교-equals-메소드">- <u>인스턴스의 비교: equals 메소드</u></h3>
<p>== 연산자는 참조변수의 참조 값을 비교한다.<br />
따라서 서로 다른 두 인스턴스의 내용을 비교하려면 별도의 방법을 사용해야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">INum</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">num</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">INum</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">num</span> <span class="o">=</span> <span class="n">num</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">object</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">num</span> <span class="o">==</span> <span class="o">((</span><span class="nc">INum</span><span class="o">)</span> <span class="n">object</span><span class="o">).</span><span class="na">num</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ObjectEquality</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">INum</span> <span class="n">num1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>
        <span class="nc">INum</span> <span class="n">num2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">(</span><span class="mi">12</span><span class="o">);</span>
        <span class="nc">INum</span> <span class="n">num3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">INum</span><span class="o">(</span><span class="mi">10</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">num1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">num2</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"num1, num2 내용 동일하다."</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"num1, num2 내용 다르다."</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">num1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">num3</span><span class="o">))</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"num1, num3 내용 동일하다."</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"num1, num3 내용 다르다."</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Object 클래스의 equals 메소드는 == 연산자와 마찬가지로 참조변수의 참조 값을 비교하도록 정의되어 있다.<br />
따라서 equals 메소드는 호출을 통해 참조 값을 비교할 필요 없이 내용 비교가 이뤄지도록 오버라이딩 하라고 존재하는 메소드이다.</p>

<h3 id="--인스턴스-복사복제-clone-메소드">- <u>인스턴스 복사(복제): clone 메소드</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
* Object 클래스에 정의되어있는 인스턴스의 복사를 위한 메소드
* 호출된 메소드가 속한 인스턴스의 복사본이 생성되고, 이렇게 만들어진 복사본의 참조 값이 반환된다.
*/</span>
<span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span>

<span class="cm">/**
* 이 인터페이스를 구현한 클래스의 인스턴스만 clone 메소드 호출 가능
*/</span>
<span class="kd">interface</span> <span class="nc">Cloneable</span>
</code></pre></div></div>

<p>Cloneable 인터페이스의 구현은 무슨 의미일까?</p>
<blockquote>
  <p>이 클래스의 인스턴스는 복사해도 됩니다. 즉 clone 메소드 호출이 가능합니다.</p>
</blockquote>

<p>이 인터페이스는 ‘마커 인터페이스’이다. 따라서 clone이 가능하다는 일종의 표식일 뿐이다.<br />
인스턴스의 복사는 클래스에 따라 허용해서는 안되는 작업일 수 있다.<br />
따라서 인스턴스 복사의 허용 여부는 클래스를 정의하는 과정에서 고민하고 결정해야 하고,<br />
복사 허용이 가능하다는 결론이 나오면 Cloneable 인터페이스를 구현해서 clone 메소드의 호출이 가능하도록 하면 된다.</p>

<p>다음의 예시를 한 번 살펴보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="kd">implements</span> <span class="nc">Cloneable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">xPos</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">yPos</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">xPos</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">yPos</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">showPosition</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"[ "</span> <span class="o">+</span> <span class="n">xPos</span> <span class="o">+</span> <span class="s">", "</span> <span class="o">+</span> <span class="n">yPos</span> <span class="o">+</span> <span class="s">" ]"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span> <span class="c1">// 언뜻 보면 별 의미 없어보임..</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">InstanceCloning</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Point</span> <span class="n">org</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
        <span class="nc">Point</span> <span class="n">cpy</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">cpy</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Point</span><span class="o">)</span> <span class="n">org</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">showPosition</span><span class="o">());</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cpy</span><span class="o">.</span><span class="na">showPosition</span><span class="o">());</span>

        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/19-8.png" alt="image" width="70%" height="70%" /><br /></p>

<p>clone() 메소드를 보면 단순히 상위 클래스인 Object 클래스의 메소드를 호출하고 있다.<br />
이것만 보면 별 의미 없을 지 모르겠지만, 여기엔 중요한 의미가 있다.</p>

<blockquote>
  <p>메소드 오버라이딩을 통해서 접근 범위를 넓히는 것이 가능하다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Objcet class에 정의된 clone 메소드</span>
<span class="kd">protected</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span>

<span class="c1">// Point class에 정의된 clone 메소드</span>
<span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span> <span class="o">{</span>
  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음과 같이 메소드 오버라이딩을 통해 protected로 선언되어있던 상위 클래스의 메소드를 public으로 바꿔주었다.<br />
(참고: 거꾸로 접근 범위를 제한하는 형태의 오버라이딩은 불가능하다.)</p>

<h3 id="--clone-메소드-얕은-복사">- <u>clone 메소드: 얕은 복사</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="kd">implements</span> <span class="nc">Cloneable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">xPos</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">yPos</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">xPos</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">yPos</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">showPosition</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"[ "</span> <span class="o">+</span> <span class="n">xPos</span> <span class="o">+</span> <span class="s">", "</span> <span class="o">+</span> <span class="n">yPos</span> <span class="o">+</span> <span class="s">" ]"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changePos</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">xPos</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">yPos</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">implements</span> <span class="nc">Cloneable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Point</span> <span class="n">upperLeft</span><span class="o">;</span>    <span class="c1">// 좌측 상단 좌표</span>
    <span class="kd">private</span> <span class="nc">Point</span> <span class="n">lowerRight</span><span class="o">;</span>   <span class="c1">// 우측 하단 좌표</span>

    <span class="kd">public</span> <span class="nf">Rectangle</span><span class="o">(</span><span class="kt">int</span> <span class="n">x1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y2</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">upperLeft</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x1</span><span class="o">,</span> <span class="n">y1</span><span class="o">);</span>
        <span class="n">lowerRight</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x2</span><span class="o">,</span> <span class="n">y2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changePos</span><span class="o">(</span><span class="kt">int</span> <span class="n">x1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y2</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">upperLeft</span><span class="o">.</span><span class="na">changePos</span><span class="o">(</span><span class="n">x1</span><span class="o">,</span> <span class="n">y1</span><span class="o">);</span>
        <span class="n">lowerRight</span><span class="o">.</span><span class="na">changePos</span><span class="o">(</span><span class="n">x2</span><span class="o">,</span> <span class="n">y2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showPosition</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"좌측 상단: "</span> <span class="o">+</span> <span class="n">upperLeft</span><span class="o">.</span><span class="na">showPosition</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"우측 하단: "</span> <span class="o">+</span> <span class="n">lowerRight</span><span class="o">.</span><span class="na">showPosition</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ShallowCopy</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Rectangle</span> <span class="n">origin</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
        <span class="nc">Rectangle</span> <span class="n">copy</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">copy</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Rectangle</span><span class="o">)</span> <span class="n">origin</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>  <span class="c1">// 인스턴스 복사</span>

            <span class="n">origin</span><span class="o">.</span><span class="na">changePos</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>   <span class="c1">// 인스턴스의 좌표 정보 수정</span>

            <span class="n">origin</span><span class="o">.</span><span class="na">showPosition</span><span class="o">();</span>
            <span class="n">copy</span><span class="o">.</span><span class="na">showPosition</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/19-9.png" alt="image" width="40%" height="40%" /><br /></p>

<p>Rectangle을 복사하고, 좌표를 변경했다.<br />
하지만 위의 코드의 결과를 보면 기대한 것과는 다르게 복사본도 변경되었음을 확인할 수 있다.</p>

<p><img src="/assets/images/java-lang/19-10.png" alt="image" width="60%" height="60%" /><br /></p>

<p>Rectangle 인스턴스의 멤버는 upperLeft, lowerRight 두 개의 참조변수로 이뤄져 있다.<br />
따라서 복사 과정에서 참조변수가 지니는 참조 값이 그대로 새 인스턴스에 복사가 된다.<br />
이를 ‘얕은 복사’라 한다.</p>

<h3 id="--clone-메소드-깊은-복사">- <u>clone 메소드: 깊은 복사</u></h3>
<p><img src="/assets/images/java-lang/19-11.png" alt="image" width="60%" height="60%" /><br /></p>

<p>우리가 위의 코드에서 의도한 것은<br />
upperLeft와 lowerRight가 참조하는 Point 인스턴스까지 복사가 이루어지는 형태의 복사이다.<br />
이러한 형태의 복사를 ‘깊은 복사’라고 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Point</span> <span class="kd">implements</span> <span class="nc">Cloneable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">xPos</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">yPos</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Point</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">xPos</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">yPos</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">showPosition</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"[ "</span> <span class="o">+</span> <span class="n">xPos</span> <span class="o">+</span> <span class="s">", "</span> <span class="o">+</span> <span class="n">yPos</span> <span class="o">+</span> <span class="s">" ]"</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changePos</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">xPos</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
        <span class="n">yPos</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Rectangle</span> <span class="kd">implements</span> <span class="nc">Cloneable</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Point</span> <span class="n">upperLeft</span><span class="o">;</span>    <span class="c1">// 좌측 상단 좌표</span>
    <span class="kd">private</span> <span class="nc">Point</span> <span class="n">lowerRight</span><span class="o">;</span>   <span class="c1">// 우측 하단 좌표</span>

    <span class="kd">public</span> <span class="nf">Rectangle</span><span class="o">(</span><span class="kt">int</span> <span class="n">x1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y2</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">upperLeft</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x1</span><span class="o">,</span> <span class="n">y1</span><span class="o">);</span>
        <span class="n">lowerRight</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">x2</span><span class="o">,</span> <span class="n">y2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">changePos</span><span class="o">(</span><span class="kt">int</span> <span class="n">x1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">x2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y2</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">upperLeft</span><span class="o">.</span><span class="na">changePos</span><span class="o">(</span><span class="n">x1</span><span class="o">,</span> <span class="n">y1</span><span class="o">);</span>
        <span class="n">lowerRight</span><span class="o">.</span><span class="na">changePos</span><span class="o">(</span><span class="n">x2</span><span class="o">,</span> <span class="n">y2</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showPosition</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"좌측 상단: "</span> <span class="o">+</span> <span class="n">upperLeft</span><span class="o">.</span><span class="na">showPosition</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"우측 하단: "</span> <span class="o">+</span> <span class="n">lowerRight</span><span class="o">.</span><span class="na">showPosition</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span> <span class="o">{</span>
        <span class="c1">// Object 클래스의 clone 메소드 호출을 통한 복사본 생성</span>
        <span class="nc">Rectangle</span> <span class="n">copy</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Rectangle</span><span class="o">)</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>

        <span class="c1">// 복사본의 각 멤버에 각각 copy를 적용하여 저장한다.</span>
        <span class="n">copy</span><span class="o">.</span><span class="na">upperLeft</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Point</span><span class="o">)</span> <span class="n">upperLeft</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
        <span class="n">copy</span><span class="o">.</span><span class="na">lowerRight</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Point</span><span class="o">)</span> <span class="n">lowerRight</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>

        <span class="k">return</span> <span class="n">copy</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">DeepCopy</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Rectangle</span> <span class="n">origin</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Rectangle</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">9</span><span class="o">);</span>
        <span class="nc">Rectangle</span> <span class="n">copy</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">copy</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Rectangle</span><span class="o">)</span> <span class="n">origin</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>  <span class="c1">// 인스턴스 복사</span>

            <span class="n">origin</span><span class="o">.</span><span class="na">changePos</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">7</span><span class="o">);</span>   <span class="c1">// 인스턴스의 좌표 정보 수정</span>

            <span class="n">origin</span><span class="o">.</span><span class="na">showPosition</span><span class="o">();</span>
            <span class="n">copy</span><span class="o">.</span><span class="na">showPosition</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">CloneNotSupportedException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/19-12.png" alt="image" width="40%" height="40%" /><br /></p>

<h3 id="--인스턴스-변수가-string인-경우의-깊은-복사">- <u>인스턴스 변수가 String인 경우의 깊은 복사</u></h3>
<p>결론부터 말하자면 String 클래스는 clone 메소드를 통해서 복사가 불가능하다.<br />
String은 Cloneable 인터페이스를 구현하지 않기 때문이다.</p>

<p>그렇다면 멤버 중 String 인스턴스를 가지고 있을 때, 다음과 같은 형태로 복사를 진행하면 될까..?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span> <span class="o">{</span>
  <span class="c1">// clone 메소드 호출을 통한 복사본 생성</span>
  <span class="nc">Person</span> <span class="n">cpy</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Person</span><span class="o">)</span><span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span> 
  
  <span class="c1">// clone 메소드 대신 새로운 String 인스턴스를 new로 생성하는 형태로 깊은 복사를 구현..?</span>
  <span class="n">cpy</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>  
  
  <span class="k">return</span> <span class="n">cpy</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>String 클래스가 Cloneable 인터페이스를 구현하지 않는 이유는 무엇일까?</p>

<blockquote>
  <p>String은 문자열의 수정이 불가능하므로, 깊은 복사의 대상에서 제외해도 된다.</p>
</blockquote>

<p>이렇게 한 번 결정되면 변경이 불가능하므로, 서로 다른 인스턴스가 하나의 String 인스턴스를 공유해도 문제가 되지 않는다.<br />
따라서 clone 메소드를 구현할 때 String 같은 경우에는 단순히 아래처럼 만드어주면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Override</span>
<span class="kd">public</span> <span class="nc">Object</span> <span class="nf">clone</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">CloneNotSupportedException</span> <span class="o">{</span>
  <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--clone-메소드의-반환형-수정-covariant-return-type">- <u>clone 메소드의 반환형 수정: Covariant Return Type</u></h3>
<p>위의 코드에서 clone 메소드를 호출할 때 반환형이 Objcet이기 때문에 동시에 형 변환도 진행해야 했다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Point</span> <span class="n">org</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
<span class="nc">Point</span> <span class="n">cpy</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Point</span><span class="o">)</span><span class="n">org</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span> <span class="c1">// 형 변환 필요</span>
</code></pre></div></div>

<p>하지만 자바 5 이후부터는 오버라이딩 과정에서 반환형의 수정을 허용한다.<br />
다만, 모두 가능한 것은 아니고, 다음과 같이 클래스와 메소드의 반환형이 서로 일치해야한다.</p>

<p><img src="/assets/images/java-lang/19-13.png" alt="image" width="80%" height="80%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 다음과 같이 형 변환 없는 clone 메소드의 호출이 가능하다.</span>
<span class="nc">Point</span> <span class="n">org</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
<span class="nc">Point</span> <span class="n">cpy</span> <span class="o">=</span> <span class="n">org</span><span class="o">.</span><span class="na">clone</span><span class="o">();</span>  <span class="c1">// 형 변환 필요 없음</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 18 - 예외처리(Exception Handling)</title><link href="http://localhost:4000/java%20lang/Chap18/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 18 - 예외처리(Exception Handling)" /><published>2022-11-05T00:00:00+09:00</published><updated>2022-11-05T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap18</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap18/"><![CDATA[<h2 id="18-1-자바-예외처리의-기본">18-1. 자바 예외처리의 기본</h2>
<h3 id="--자바에서-말하는-예외">- <u>자바에서 말하는 예외</u></h3>
<p>프로그램 실행 중에 발생하는 ‘예외적인 상황’을 줄여서 ‘예외’라 한다.<br />
즉, 단순한 문법 오류가 아닌 실행 중간에 발생하는 ‘정상적이지 않은 상황’을 뜻한다.</p>

<p>가상머신은 예외가 발생하면 그 내용을 간단히 출력하고 프로그램을 종료해버린다.<br />
가상머신은 예외의 원인을 알지만 개발자가 원하는 예외의 처리 방식까지는 알지 못하기 때문에<br />
이 예외에 대해 처리하는 부분을 만들어주면 된다.</p>

<h3 id="--예외의-처리를-위한-try--catch">- <u>예외의 처리를 위한 try ~ catch</u></h3>
<p>자바는 예외 상황별로 그 상황을 알리기 위한 클래스를 정의하고 있다.<br />
그 클래스를 ‘예외 클래스’라 한다.</p>

<p>예외를 처리할 때는 try ~ catch문을 사용하는데, 구조는 다음과 같다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// try 영역에서 발생한 예외 상황을 catch 영역에서 처리한다.</span>

<span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span> <span class="n">관찰</span> <span class="n">영역</span> <span class="o">...</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span> <span class="n">처리</span> <span class="n">영역</span> <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<ol>
  <li>try 영역의 실행 중간에 예외 상황이 만들어지고</li>
  <li>이로 인해 가상머신이 ArithmeticException 인스턴스를 생성하면</li>
  <li>이 인스턴스는 메소드를 호출하듯이 catch 구문의 매개변수 e에 전달이 된다.</li>
</ol>

<h3 id="--둘-이상의-예외를-처리하기-위한-구성">- <u>둘 이상의 예외를 처리하기 위한 구성</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 각 예외마다 처리 과정이 다른 경우</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span> <span class="n">관찰</span> <span class="n">영역</span> <span class="o">...</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">ArithmeticException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Exception 1 Occur!"</span><span class="o">);</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">InputMIsmatchException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">pritntln</span><span class="o">(</span><span class="s">"Exception 2 Occur!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 각 예외에 대해 처리 과정이 같은 경우</span>
<span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span> <span class="n">관찰</span> <span class="n">영역</span> <span class="o">...</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">ArithmeticException</span> <span class="o">|</span> <span class="nc">InputMIsmatchException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Exception Occur!"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--throwable-클래스와-예외처리의-책임-전가">- <u>Throwable 클래스와 예외처리의 책임 전가</u></h3>
<p><img src="/assets/images/java-lang/18-1.png" alt="image" width="80%" height="80%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExceptionMessage</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">md1</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">md2</span><span class="o">(</span><span class="n">n</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">md2</span><span class="o">(</span><span class="kt">int</span> <span class="n">n1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n2</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="n">n1</span> <span class="o">/</span> <span class="n">n2</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">md1</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Good bye~~!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위 예제의 메소드 호출 흐름은 다음과 같다.<br />
main -&gt; md1 -&gt; md2</p>

<p>예외가 발생하고 해당 예외를 처리하지 않으면<br />
발생한 메소드를 호출한 메소드에 그 책임이 넘어간다.</p>

<p><img src="/assets/images/java-lang/18-2.png" alt="image" width="80%" height="80%" /><br /></p>

<p>즉, 책임이 넘어가는 과정은<br />
md2 -&gt; md1 -&gt; main<br />
이렇게 된다.</p>

<h2 id="18-2-예외처리에-대한-나머지-설명들">18-2. 예외처리에 대한 나머지 설명들</h2>
<h3 id="--예외-클래스의-구분">- <u>예외 클래스의 구분</u></h3>
<p><img src="/assets/images/java-lang/18-3.png" alt="image" width="90%" height="90%" /><br /></p>

<p>예외라는 객체는 최상위 인터페이스로 Throwable이라는 인터페이스를 가진다.<br />
이 Throwable 인터페이스를 error와 exception 인터페이스가 구현을 하고, 다시 runtimeException이 exception 인터페이스를 구현한다.</p>

<ul>
  <li>Error<br />
  Error 클래스를 상속하는 클래스들을 보면 VirtualMachineError나 IOError 등등, JVM에서 발생한 오류이거나 입출력 관련하여 코드 수준 복구가 불가능한 오류 같이 사용자 애플리케이션이 제어할 수 있는 예외가 아니다. 말 그대로 ‘에러’인 것이다.
    <blockquote>
      <p>즉 Error 클래스를 상속하는 예외는 처리의 대상이 아니다.</p>
    </blockquote>

    <p>따라서 이런 유형의 예외가 발생하면 그냥 프로그램이 종료되도록 놔두고 이후에 원인을 파악하는 과정이 이어져야 한다.</p>
  </li>
  <li>
    <p>Exception<br />
  예상할 수 있는 예외 또는 프로그래머가 만드는 예외 이다.</p>

    <p><code class="language-plaintext highlighter-rouge">Checked exception</code>은 개발자가 사용하는 라이브러리, 코드 등에서 new 생성자를 이용해 만들어져, 해당 모듈을 사용하는 객체에게 여기서 예외가 발생할 수 있으니 throws 키워드를 이용하여 상위 caller에게 예외를 전달하든, 확인해서 처리하든지 하라는 뜻이다.</p>

    <p><code class="language-plaintext highlighter-rouge">Unchecked exception</code>은 개발자가 사용하는 라이브러리, 코드 등에서 만들어졌지만, 예외처리를 해야 할 상황은 아닌 경우를 말한다. NegativeArraySizeException이나 ArrayStoreException 처럼 코드를 수정해야 할 상황이지 예외처리할 상황은 아닌 것이다.</p>

    <blockquote>
      <p>Unchecked exception 또한 처리의 대상이 아니다.</p>
    </blockquote>
  </li>
</ul>

<h3 id="--개발자가-정의하는-예외">- <u>개발자가 정의하는 예외</u></h3>
<p>개발자가 직접 예외 클래스를 정의하고 이를 기반으로 특정 상황에서 예외가 발생하도록 할 수도 있다.<br />
핵심은 Exception을 상속하는데 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Scanner</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ReadAgeException</span> <span class="kd">extends</span> <span class="nc">Exception</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">ReadAgeException</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="s">"유효하지 않은 나이가 입력되었습니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyExceptionClass</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"나이 입력: "</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">readAge</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">printf</span><span class="o">(</span><span class="s">"입력된 나이: %d \n"</span><span class="o">,</span> <span class="n">age</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ReadAgeException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="o">}</span>

    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">readAge</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">ReadAgeException</span> <span class="o">{</span>   <span class="c1">// 발생시킨 예외를 자신을 호출한 메소드에 던짐</span>
        <span class="nc">Scanner</span> <span class="n">kb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Scanner</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">kb</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ReadAgeException</span><span class="o">();</span>   <span class="c1">// 예외를 발생시킴</span>
        <span class="o">}</span>

        <span class="k">return</span>  <span class="n">age</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/18-4.png" alt="image" width="50%" height="50%" /><br /></p>

<h3 id="--finally-구문">- <u>finally 구문</u></h3>
<p>try ~ catch문은 하나의 문장이므로 try문 홀로 존재할 수 없다.<br />
그런데 try문에 이어서 다음과 같이 finally 구문을 둘 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span> <span class="c1">// 코드의 실행이 try 안으로 진입하면, 무조견 실행된다.</span>

<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">try</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span> <span class="k">catch</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="o">...</span>
<span class="o">}</span> <span class="k">finally</span> <span class="o">{</span> <span class="c1">// 코드의 실행이 try 안으로 진입하면, 무조견 실행된다.</span>
    <span class="o">...</span>
<span class="o">}</span>
</code></pre></div></div>

<p><br />
그렇다면 finally 구문은 어떻게 유용하게 사용할 수 있을까?<br />
다음 코드를 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Paths</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FinallyCase</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Path</span> <span class="n">file</span> <span class="o">=</span> <span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"/Users/june/Study/java-lang"</span><span class="o">);</span>
        <span class="nc">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">writer</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">newBufferedWriter</span><span class="o">(</span><span class="n">file</span><span class="o">);</span> <span class="c1">// IOException 발생 가능</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="sc">'A'</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="sc">'Z'</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span> <span class="c1">// 예외가 발생하든 안 하든 무조건 실행해야 하는 구문</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">writer</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">writer</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// 파일을 열었으면 닫아주어야 함</span>
                <span class="o">}</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// close 하는 중에도 IOException 발생 가능하기 때문</span>
                <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>파일 버퍼를 열었다면 예외가 발생하든 안 하든 무조건 close를 실행하여 닫아야 한다.<br />
따라서, finally에 close메소드를 추가하여 무조건 실행이 되도록 만들어 주었다.<br />
다만, close하는 동안에도 IOException이 발생할 수 있기 때문에 불가피하게 try ~ catch로 잡아주게 되었다.<br />
하지만 코드 구성이 깔끔하지 않다는 아쉬움이 남는다.<br />
이를 해결하기 위해서 try-with-resources라는 문법이 등장했다.</p>

<h3 id="--try-with-resources-구문">- <u>try-with-resources 구문</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Files</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Path</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.nio.file.Paths</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TryWithResource</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Path</span> <span class="n">file</span> <span class="o">=</span> <span class="nc">Paths</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"/Users/june/Study/java-lang"</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">(</span><span class="nc">BufferedWriter</span> <span class="n">writer</span> <span class="o">=</span> <span class="nc">Files</span><span class="o">.</span><span class="na">newBufferedWriter</span><span class="o">(</span><span class="n">file</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="sc">'A'</span><span class="o">);</span>
            <span class="n">writer</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="sc">'Z'</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IOException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음과 같이 try문 옆에 괄호 안에 종료의 과정을 필요로 하는 리소스를 생성할 수 있다.<br />
그리고 이 리소스는 try-with-resources문을 빠져나오면서 자동으로 종료된다.</p>

<p>‘자동으로 종료되어야 할 리소스’ 관련 클래스는 다음 인터페이스를 구현해야한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">AutoCloseable</span>
</code></pre></div></div>

<p>그리고 이 인터페이스에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">close</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span>
</code></pre></div></div>

<p>즉, try-with-resources문에서 호출하는 메소드는 AutoCloseable 인터페이스의 close 메소드이다. 따라서 이외의 메소드를 기대하는 것은 어렵다는 것을 염두해두자.</p>

<p><br />
(참고) 예외처리는 성능의 저하로 이어진다.<br />
try 구문 안에 위치한 코드는 try 구문 밖에 위치한 코드에 비해 실행 속도가 느리다. 따라서 특별히 예외처리가 필요한 부분만 골라서 사용하도록 해야한다.</p>

<h2 id="reference">Reference</h2>
<p><a href="https://brunch.co.kr/@kd4/5">https://brunch.co.kr/@kd4/5</a> [자바의 예외처리]</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 17 - 인터페이스의 기본과 그 의미</title><link href="http://localhost:4000/java%20lang/Chap17/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 17 - 인터페이스의 기본과 그 의미" /><published>2022-11-02T00:00:00+09:00</published><updated>2022-11-02T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap17</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap17/"><![CDATA[<h2 id="17-1-인터페이스의-기본과-그-의미">17-1. 인터페이스의 기본과 그 의미</h2>
<h3 id="--추상-메소드만-담고-있는-인터페이스">- <u>추상 메소드만 담고 있는 인터페이스</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span>  <span class="c1">// 추상 메소드</span>
<span class="o">}</span>
</code></pre></div></div>
<p>기본 골격은 클래스와 동일하다.<br />
interface라는 선언이 붙고, 추상 메소드(메소드의 몸체가 비어 있는 메소드)로 이루어져있다.<br />
인스턴스 생성이 불가능하고, 다른 클래스에 의해서 구현(implements)된다.<br />
<br /></p>

<p>클래스의 인터페이스 구현에는 다음과 같은 특징이 있다.</p>
<ol>
  <li>구현할 인터페이스를 명시할 때 키워드 implements를 사용한다.</li>
  <li>다중 구현이 가능하다.</li>
  <li>상속과 구현은 동시에 가능하다.<br />
<br /></li>
</ol>

<p><img src="/assets/images/java-lang/17-1.png" alt="image" width="80%" height="80%" /><br /></p>

<p>또, 인터페이스 관련하여 다음 두 가지 특징도 있다.</p>
<ol>
  <li>인터페이스의 형을 대상으로 참조변수의 선언이 가능하다.</li>
  <li>인터페이스의 추상 메소드와 이를 구현하는 메소드 사이에 오버라이딩 관계가 성립한다.</li>
</ol>

<h3 id="--인터페이스의-본질적-의미">- <u>인터페이스의 본질적 의미</u></h3>
<blockquote>
  <p>해당 class의 사용방법을 명시한 내용</p>
</blockquote>

<p>다음의 예시를 보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>   <span class="c1">// MS가 정의하고 제공한 인터페이스</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SPrinterDriver</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From Samsung printer"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">LPrinterDriver</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From LG printer"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrinterDriver</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">myDoc</span> <span class="o">=</span> <span class="s">"This is a report about ..."</span><span class="o">;</span>
        <span class="nc">Printable</span> <span class="n">printer</span><span class="o">;</span>

        <span class="c1">// 삼성 프린터로 출력</span>
        <span class="n">printer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SPrinterDriver</span><span class="o">();</span>
        <span class="n">printer</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// LG 프린터로 출력</span>
        <span class="n">printer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LPrinterDriver</span><span class="o">();</span>
        <span class="n">printer</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>MS사는 인터페이스 Printable을 하나 만들어서 프린터 업체에게 제공하고 있다.<br />
MS사는 자신의 인터페이스를 구현할 클래스의 이름만 알면 될 뿐 내부적으로 구현이 어떻게 이뤄지는지는 알 필요가 없다.<br />
이렇게 인터페이스를 둠으로써 MS사의 윈도우는 삼성과 LG의 프린터를 대상으로 출력을 진행할 수 있게 된다.</p>

<h2 id="17-2-인터페이스의-문법-구성">17-2. 인터페이스의 문법 구성</h2>
<p>인터페이스는 많은 특성이 클래스와 유사하다.</p>
<ol>
  <li>인터페이스에 존재할 수 있는 메소드: 추상 메소드, 디폴트 메소드, static 메소드</li>
  <li>인터페이스 간 상속도 가능함</li>
  <li>인터페이스의 형(Type) 이름을 대상으로 instanceof 연산도 가능</li>
</ol>

<h3 id="--인터페이스에-선언되는-메소드와-변수">- <u>인터페이스에 선언되는 메소드와 변수</u></h3>
<p>인터페이스에 선언되는 메소드와 변수에는 다음과 같은 특징이 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">int</span> <span class="no">PAPER_WIDTH</span> <span class="o">=</span> <span class="mi">70</span><span class="o">;</span>
  <span class="kt">int</span> <span class="no">PAPER_HEIGHT</span> <span class="o">=</span> <span class="mi">120</span><span class="o">;</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<ul>
  <li>메소드
    <ul>
      <li>인터페이스의 모든 메소드는 public이 선언된 것으로 간주한다.</li>
      <li>인터페이스를 구현하는 클래스는 인터페이스에 존재하는 모든 추상 메소드를 구현해야 한다.</li>
    </ul>
  </li>
  <li>변수
    <ul>
      <li>반드시 선언과 동시에 값으로 초기화를 해야 한다.</li>
      <li>모든 변수는 public, static, final이 선언된 것으로 간주한다.</li>
    </ul>
  </li>
</ul>

<h3 id="--인터페이스-간-상속">- <u>인터페이스 간 상속</u></h3>
<p>위의 예시 상황에서 컬러 프린터가 추가되었다고 가정해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span> <span class="c1">// 흑백 출력</span>
    <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span> <span class="c1">// 컬러 출력</span>
<span class="o">}</span>
</code></pre></div></div>
<p>컬러 프린터의 추가 때문에 기존의 Printable 인터페이스에 printCMYK 메소드를 추가하면<br />
-&gt; 이 인터페이스를 기반으로 개발된 드라이버(클래스)를 모두 수정해야 한다!!</p>

<p><br />
따라서 이러한 문제를 해결하기 위해 인터페이스 간의 상속을 지원한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span> <span class="c1">// public은 생략되어있으니까 주의하자!</span>
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">ColorPrintable</span> <span class="kd">extends</span> <span class="nc">Printable</span> <span class="o">{</span>    <span class="c1">// Printable을 상속하는 인터페이스</span>
    <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span> <span class="c1">// public은 생략되어있으니까 주의하자!</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Prn909Drv</span> <span class="kd">implements</span> <span class="nc">ColorPrintable</span> <span class="o">{</span> <span class="c1">// ColorPrintable 뿐만 아니라 Printable에 있는 메소드도 구현해야 함</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">// Printable에 있는 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-909 black &amp; white ver"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">// ColorPrintable에 있는 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-909 CMYK ver"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrintDriver</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">mydoc</span> <span class="o">=</span> <span class="s">"This is a report about ..."</span><span class="o">;</span>
        <span class="nc">ColorPrintable</span> <span class="n">printer</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Prn909Drv</span><span class="o">();</span>

        <span class="n">printer</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">mydoc</span><span class="o">);</span> <span class="c1">// 흑백 출력</span>
        <span class="n">printer</span><span class="o">.</span><span class="na">printCMYK</span><span class="o">(</span><span class="n">mydoc</span><span class="o">);</span> <span class="c1">// 컬러 출력</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 인터페이스 간 상속을 통해 기존의 사용 중인 드라이버(클래스)를 수정할 필요가 없게 되었다!</p>

<h3 id="--인터페이스의-디폴트-메소드">- <u>인터페이스의 디폴트 메소드</u></h3>
<p>앞선 상황에서는 ‘인터페이스 간의 상속’을 통해 추가할 메소드가 있을 때 이를 구현하고 있는 클래스들에 대한 문제를 해결했다.<br />
하지만, 만약 이미 수십 개의 인터페이스가 있는 상황이라면 어떻게 해야할까?<br />
상속을 통해 문제를 해결하려면 필연적으로 인터페이스의 수가 늘어난다.<br />
그리고 인터페이스의 수가 늘어나는 것은 그 자체로 프로그램 개발에 불편을 초래하는 일이다.<br />
<br /></p>

<p>이런 상황을 해결하기 위해 인터페이스의 ‘디폴트 메소드(Default Method)’가 등장했다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">);</span>
    <span class="k">default</span> <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{}</span>   <span class="c1">// default 메소드 추가. 접근수준지정자 아님!</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Prn731Drv</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>  <span class="c1">// 최초 출시한 프린터</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-731 printer"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Prn909Drv</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>  <span class="c1">// 그 이후 출시한 컬러프린터</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-909 black &amp; white ver"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printCMYK</span><span class="o">(</span><span class="nc">String</span> <span class="n">doc</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// default method인 printCMYK를 overriding중</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"From MD-909 CMYK ver"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doc</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PrintDriverDefault</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">myDoc</span> <span class="o">=</span> <span class="s">"This is a report about ..."</span><span class="o">;</span>

        <span class="nc">Printable</span> <span class="n">printer731</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Prn731Drv</span><span class="o">();</span>
        <span class="nc">Printable</span> <span class="n">printer909</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Prn909Drv</span><span class="o">();</span>

        
        <span class="n">printer731</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>

        <span class="n">printer909</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>
        <span class="n">printer909</span><span class="o">.</span><span class="na">printCMYK</span><span class="o">(</span><span class="n">myDoc</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이러한 default 메소드의 특징은 다음과 같다.</p>
<ol>
  <li>자체로 완전한 메소드이다.</li>
  <li>따라서 이를 구현하는 클래스가 필수적으로 오버라이딩 하지 않아도 된다.
<br />
<br /></li>
</ol>

<p>디폴트 메소드의 존재 의미는 다음과 같다.</p>
<blockquote>
  <p>인터페이스에 추상 메소드를 추가해야 하는 상황에서<br />
이전에 개발해놓은 코드에 영향을 미치지 않기 위해 등장한 문법이다.</p>
</blockquote>

<p>따라서, 처음 인터페이스를 설계하는 과정에서 디폴트 메소드를 정의해 넣는다는 것은<br />
완전히 잘못 이해하고 잘못 사용하고 있는 것이라 할 수 있다.</p>

<h3 id="--인터페이스의-static-메소드클래스-메소드">- <u>인터페이스의 static 메소드(클래스 메소드)</u></h3>
<p>인터페이스의 static 메소드 또한 클래스의 그것과 유사하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kd">static</span> <span class="kt">void</span> <span class="nf">printLine</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SimplePrinter</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Printable</span><span class="o">.</span><span class="na">printLine</span><span class="o">(</span><span class="s">"end of line"</span><span class="o">);</span> <span class="c1">// 인터페이스의 static 메소드 직접 호출</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음, 두 가지 정도만 기억해두자.</p>
<ol>
  <li>인터페이스에도 static 메소드를 정의할 수 있다.</li>
  <li>인터페이스의 static 메소드 호출 방법은 클래스의 static 메소드 호출 방법과 같다.</li>
</ol>

<h3 id="--인터페이스-대상의-instanceof-연산">- <u>인터페이스 대상의 instanceof 연산</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">ca</span> <span class="k">instanceof</span> <span class="nc">Cake</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div></div>
<p>클래스를 대상으로 하는 instanceof 연산자는 ca가 참조하는 인스턴스가<br />
‘Cake의 인스턴스’ 이거나 ‘Cake를 상속하는 클래스의 인스턴스’인 경우 true가 반환된다.<br />
<br /></p>

<p>이와 유사하게 인터페이스의 경우,<br />
‘Cake를 직접 혹은 간접적으로 구현한 클래스의 인스턴스인 경우’ true를 반환한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">printLine</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SimplePrinter</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printLine</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">MultiPrinter</span> <span class="kd">extends</span> <span class="nc">SimplePrinter</span> <span class="o">{</span>  <span class="c1">// Printable을 간접 구현함</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">printLine</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">InstanceofInterface</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Printable</span> <span class="n">prn1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SimplePrinter</span><span class="o">();</span>
    <span class="nc">Printable</span> <span class="n">prn2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MultiPrinter</span><span class="o">();</span>

    <span class="k">if</span> <span class="o">(</span><span class="n">prn1</span> <span class="k">instanceof</span> <span class="nc">Printable</span><span class="o">)</span> <span class="o">{...}</span>  <span class="c1">// true</span>
    
    <span class="k">if</span> <span class="o">(</span><span class="n">prn2</span> <span class="k">instanceof</span> <span class="nc">Printable</span><span class="o">)</span> <span class="o">{...}</span> <span class="c1">// true</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인터페이스의-또-다른-사용-용도-marker-interface">- <u>인터페이스의 또 다른 사용 용도: Marker Interface</u></h3>
<blockquote>
  <p>마커 인터페이스(Marker Interface): 클래스에 특별한 표식을 다는 용도</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Upper</span> <span class="o">{</span> <span class="o">}</span> <span class="c1">// 마커 인터페이스</span>
<span class="kd">interface</span> <span class="nc">Lower</span> <span class="o">{</span> <span class="o">}</span> <span class="c1">// 마커 인터페이스</span>
</code></pre></div></div>

<h2 id="17-3-추상-클래스-abstract-class">17-3. 추상 클래스: Abstract Class</h2>
<blockquote>
  <p>상위 클래스로 Design한 class</p>
</blockquote>

<blockquote>
  <p>이 class를 상속하는 하위 class가 추상메소드를 자기가 필요한대로 채워서 썼으면 좋겠어..</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">House</span> <span class="o">{</span> <span class="c1">// 추상 클래스</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodOne</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"method one"</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="kd">abstract</span> <span class="kt">void</span> <span class="nf">methodTwo</span><span class="o">();</span> <span class="c1">// 추상 메소드</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyHouse</span> <span class="kd">extends</span> <span class="nc">House</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">methodTwo</span><span class="o">()</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"method two"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>추상 클래스의 성격(인터페이스와 유사)</p>
<ul>
  <li>추상 클래스를 대상으로 인스턴스 생성이 불가능하다.</li>
  <li>다른 클래스에 의해서 추상 메소드가 구현되어야 한다.</li>
</ul>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 16 - 클래스의 상속 3: 상속의 목적</title><link href="http://localhost:4000/java%20lang/Chap16/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 16 - 클래스의 상속 3: 상속의 목적" /><published>2022-10-21T00:00:00+09:00</published><updated>2022-10-21T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap16</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap16/"><![CDATA[<h2 id="16-1-상속이-도움이-되는-상황의-소개">16-1. 상속이 도움이 되는 상황의 소개</h2>
<blockquote>
  <p>상속을 하는 이유: 연관된 일련의 클래스들에 대해 공통적인 규약을 정의할 수 있다.</p>
</blockquote>

<h3 id="--단순한-인맥-관리-프로그램">- <u>단순한 인맥 관리 프로그램</u></h3>
<p>다음과 같은 두 부류의 인맥을 관리하는 프로그램이 있다고 가정하자.<br />
1) 대학 동창: 이름, 전공, 전화번호<br />
2) 직장 동료: 이름, 부서, 전화번호</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">UniFriend</span> <span class="kd">extends</span> <span class="nc">Friend</span><span class="o">{</span> <span class="c1">// 대학 동창</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">major</span><span class="o">;</span>   <span class="c1">// 전공</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UniFriend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">major</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">major</span> <span class="o">=</span> <span class="n">major</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phone</span> <span class="o">=</span> <span class="n">phone</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이름: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전공: "</span> <span class="o">+</span> <span class="n">major</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전화: "</span> <span class="o">+</span> <span class="n">phone</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CompFriend</span> <span class="kd">extends</span> <span class="nc">Friend</span><span class="o">{</span>    <span class="c1">// 직장 동료</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">department</span><span class="o">;</span>  <span class="c1">// 부서</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CompFriend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">department</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">department</span> <span class="o">=</span> <span class="n">department</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phone</span> <span class="o">=</span> <span class="n">phone</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이름: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"부서: "</span> <span class="o">+</span> <span class="n">department</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전화: "</span> <span class="o">+</span> <span class="n">phone</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFriends</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">UnivFriend</span><span class="o">[]</span> <span class="n">ufrns</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UnivFriend</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span> <span class="c1">// 대학 친구</span>
        <span class="nc">CompFriend</span><span class="o">[]</span> <span class="n">cfrns</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">[</span><span class="mi">2</span><span class="o">];</span> <span class="c1">// 직장 친구</span>

        <span class="n">ufrns</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UniFriend</span><span class="o">(</span><span class="s">"LEE"</span><span class="o">,</span> <span class="s">"Computer"</span><span class="o">,</span> <span class="s">"010-999-9999"</span><span class="o">);</span>
        <span class="n">ufrns</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UniFriend</span><span class="o">(</span><span class="s">"KIM"</span><span class="o">,</span> <span class="s">"Social"</span><span class="o">,</span> <span class="s">"010-888-8888"</span><span class="o">);</span>
        
        <span class="n">cfrns</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">(</span><span class="s">"LEE"</span><span class="o">,</span> <span class="s">"Dev"</span><span class="o">,</span> <span class="s">"010-777-7777"</span><span class="o">);</span>
        <span class="n">cfrns</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">(</span><span class="s">"KIM"</span><span class="o">,</span> <span class="s">"Market"</span><span class="o">,</span> <span class="s">"010-666-6666"</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">UnivFriend</span> <span class="nl">u:</span> <span class="n">ufrns</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ufrns</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">UnivFriend</span> <span class="nl">u:</span> <span class="n">ufrns</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">cfrns</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>코드를 잘 관찰해보면 다음을 알 수 있다.</p>
<ol>
  <li>인스턴스를 저장하는 배열이 두 개이다.</li>
  <li>친구의 부류에 따라 정보를 저장하는 과정이 나뉜다. -&gt; 저장에 필요한 배열과 변수가 다르기 때문</li>
  <li>저장된 정보를 출력할 때 두 개의 for문을 작성해야 한다. -&gt; 출력에 사용되는 배열과 변수가 다르기 때문</li>
</ol>

<p>이렇게 배열이 두 개이므로 무엇을 하건 그 과정이 둘로 나뉜다.<br />
대상마다 배열이 필요하게 되면 늘어나는 배열의 수만큼 프로그램은 더 복잡해진다.</p>

<h3 id="--인맥-관리-프로그램의-문제를-상속으로-해결하자">- <u>인맥 관리 프로그램의 문제를 상속으로 해결하자.</u></h3>
<p>그렇다면, UnivFriend 클래스와 CompFriend 클래스에 공통적인 규약을 적용하여 코드를 개선해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Friend</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Friend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phone</span> <span class="o">=</span> <span class="n">phone</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"이름: "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전화: "</span> <span class="o">+</span> <span class="n">phone</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">UniFriend</span> <span class="kd">extends</span> <span class="nc">Friend</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">major</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UniFriend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">major</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">phone</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">major</span> <span class="o">=</span> <span class="n">major</span><span class="o">;</span>

    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"전공: "</span> <span class="o">+</span> <span class="n">major</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CompFriend</span> <span class="kd">extends</span> <span class="nc">Friend</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">department</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">CompFriend</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">department</span><span class="o">,</span> <span class="nc">String</span> <span class="n">phone</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">phone</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">department</span> <span class="o">=</span> <span class="n">department</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"부서: "</span> <span class="o">+</span> <span class="n">department</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyFriends</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Friend</span><span class="o">[]</span> <span class="n">friends</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Friend</span><span class="o">[</span><span class="mi">4</span><span class="o">];</span>

        <span class="n">friends</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UniFriend</span><span class="o">(</span><span class="s">"LEE"</span><span class="o">,</span> <span class="s">"Computer"</span><span class="o">,</span> <span class="s">"010-999-9999"</span><span class="o">);</span>
        <span class="n">friends</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UniFriend</span><span class="o">(</span><span class="s">"KIM"</span><span class="o">,</span> <span class="s">"Social"</span><span class="o">,</span> <span class="s">"010-888-8888"</span><span class="o">);</span>
        <span class="n">friends</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">(</span><span class="s">"LEE"</span><span class="o">,</span> <span class="s">"Dev"</span><span class="o">,</span> <span class="s">"010-777-7777"</span><span class="o">);</span>
        <span class="n">friends</span><span class="o">[</span><span class="mi">3</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CompFriend</span><span class="o">(</span><span class="s">"KIM"</span><span class="o">,</span> <span class="s">"Market"</span><span class="o">,</span> <span class="s">"010-666-6666"</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">Friend</span> <span class="nl">f:</span> <span class="n">friends</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">f</span><span class="o">.</span><span class="na">showInfo</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Friend 클래스를 만듦으로써 다음과 같은 효과를 얻었다.</p>
<ol>
  <li>인스턴스를 저장하는 배열이 하나이다.</li>
  <li>정보를 저장하는 과정이 나뉘지 않는다.</li>
  <li>저장된 정보를 모두 출력할 때 하나의 for문으로 충분하다.</li>
</ol>

<blockquote>
  <p>Friend 클래스는 코드의 재활용 같은 목적으로 추가한 클래스가 아니다.<br />
UnivFriend 클래스와 CompFriend 클래스에 공통 규약을 적용하기 위해 정의된 클래스이다.</p>
</blockquote>

<h2 id="16-2-object-클래스와-final-선언-그리고-override">16-2. Object 클래스와 final 선언 그리고 @Override</h2>
<h3 id="--모든-클래스는-object-클래스를-상속한다">- <u>모든 클래스는 Object 클래스를 상속한다.</u></h3>
<p>자바의 모든 클래스는 직접 혹은 간접적으로 java.lang 패키지에 묶여 있는 Object 클래스를 상속하게 된다.<br />
이는 자바의 모든 인스턴스에 공통된 기준 및 규약을 적용하기 위함이다.</p>

<h3 id="--클래스와-메소드의-final-선언">- <u>클래스와 메소드의 final 선언</u></h3>
<p>클래스를 정의할 때 해당 클래스를 다른 클래스가 상속하는 것을 원치 않는다면, 앞에 final 선언을 붙여주면 된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">MyLastCLS</span> <span class="o">{...}</span>
</code></pre></div></div>

<p>메소드의 정의에 final 선언을 추가하여 해당 메소드의 오버라이딩을 허용하지 않을 수도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Simple</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">final</span> <span class="kt">void</span> <span class="nf">func</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">){...}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--override">- <u>@Override</u></h3>
<p>개발자의 실수로 인한 오류는 컴파일단계에서 발견되는 것이 가장 좋다.<br />
하지만 다음의 예시처럼 컴파일 시 오류가 발생하지 않는 상황도 존재한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ParentAdder</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ChildAdder</span> <span class="kd">extends</span> <span class="nc">ParentAdder</span> <span class="o">{</span>
    <span class="c1">// 상위 클래스의 add를 오버라이딩 하려는 의도 -&gt; 오버로딩이 되어버렸다..</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">add</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OverrideMistake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ParentAdder</span> <span class="n">adder</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ChildAdder</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">adder</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>어노테이션은 ‘자바 컴파일러에게 메시지를 전달하는 목적의 메모’이다.<br />
다음과 같이 어노테이션을 달아주면 된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">ChildAdder</span> <span class="kd">extends</span> <span class="nc">ParentAdder</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">double</span> <span class="nf">add</span><span class="o">(</span><span class="kt">double</span> <span class="n">a</span><span class="o">,</span> <span class="kt">double</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이렇게 달아놓으면 컴파일러는 오버라이딩이 제대로 되었는지 확인을 하고, 개발자의 의도대로 되지 않았다면 컴파일 단계에서 검증해준다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 15 - 클래스의 상속 2: 오버라이딩</title><link href="http://localhost:4000/java%20lang/Chap15/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 15 - 클래스의 상속 2: 오버라이딩" /><published>2022-10-18T00:00:00+09:00</published><updated>2022-10-18T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap15</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap15/"><![CDATA[<h2 id="15-1-상속을-위한-두-클래스의-관계">15-1. 상속을 위한 두 클래스의 관계</h2>
<h3 id="--상속의-기본-조건인-is-a-관계">- <u>상속의 기본 조건인 'IS-A 관계'</u></h3>
<p>상위 클래스와 하위 클래스간의 다음 관계가 성립한다.</p>

<blockquote>
  <p>하위 클래스는 상위 클래스의 모든 특성을 지닌다.<br />
하위 클래스는 자신만의 추가적인 특성을 더하게 된다.</p>
</blockquote>

<p>예시를 통해서 상속 관계를 이해해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MobilePhone</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">number</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MobilePhone</span><span class="o">(</span><span class="nc">String</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">answer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hi~ from "</span> <span class="o">+</span> <span class="n">number</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SmartPhone</span> <span class="kd">extends</span> <span class="nc">MobilePhone</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">androidVer</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SmartPhone</span><span class="o">(</span><span class="nc">String</span> <span class="n">number</span><span class="o">,</span> <span class="nc">String</span> <span class="n">androidVer</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">androidVer</span> <span class="o">=</span> <span class="n">androidVer</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">playApp</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"App is running in "</span> <span class="o">+</span> <span class="n">androidVer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MobileSmartPhone</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SmartPhone</span> <span class="n">phone</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SmartPhone</span><span class="o">(</span><span class="s">"010-777-7777"</span><span class="o">,</span> <span class="s">"JellyBean"</span><span class="o">);</span>

        <span class="n">phone</span><span class="o">.</span><span class="na">answer</span><span class="o">();</span>
        <span class="n">phone</span><span class="o">.</span><span class="na">playApp</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>‘모바일폰’과 ‘스마트폰’의 관계를 예시로 들어 상속의 특징을 설명하고 있다.<br />
위의 예시를 객체지향적으로 본다면 다음과 같이 얘기할 수 있다.</p>

<blockquote>
  <p>모바일폰을 스마트폰이 상속한다.</p>
</blockquote>

<p>이를 코드를 통해 나타낸 부분은 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SmartPhone</span> <span class="kd">extends</span> <span class="nc">MobilePhone</span> <span class="o">{...}</span>
</code></pre></div></div>

<p>그런데, 우리는 ‘스마트폰도 모바일폰의 한 종류’라고 말하기도 한다.<br />
따라서 다음과 같이 말하는 것도 가능하다.</p>

<blockquote>
  <p>스마트폰도 모바일폰이다.<br />
스마트폰은 일종의 모바일폰이다.</p>
</blockquote>

<p>그리고 위의 문장들이 나타내는 관계를 가리켜 ‘IS-A 관계’라고 하고,<br />
이것이 상속의 관계를 맺기 위한 두 클래스의 기본 조건이 된다.</p>

<ul>
  <li>IS-A 관계 정리
    <ul>
      <li>IS-A 관계는 ‘~은 ~이다.’로 표현되는 관계이다.</li>
      <li>상속이 갖는 문법적 특성은 IS-A 관계의 표현에 적합하다.</li>
      <li>따라서 상속 관계를 형성하기 위한 두 클래스는 IS-A 관계에 있어야한다.</li>
    </ul>
  </li>
</ul>

<h2 id="15-2-메소드-오버라이딩">15-2. 메소드 오버라이딩</h2>
<p>메소드 오버라이딩: 상위 클래스에 정의된 메소드를 하위 클래스에서 다시 정의하는 것<br />
문법적으로는 단순하지만 이것이 가져다주는 이점은 가볍지 않다.</p>

<blockquote>
  <p>인스턴스를 생성 후, 무엇으로 참조하느냐에 따라 인스턴스의 활용능력이 달라진다!</p>
</blockquote>

<h3 id="--상위-클래스의-참조변수가-참조할-수-있는-대상의-범위">- <u>상위 클래스의 참조변수가 참조할 수 있는 대상의 범위</u></h3>
<p>위에서 만들었던 예시를 다시 보자..</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">MobilePhone</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">String</span> <span class="n">number</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MobilePhone</span><span class="o">(</span><span class="nc">String</span> <span class="n">number</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">number</span> <span class="o">=</span> <span class="n">number</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">answer</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Hi~ from "</span> <span class="o">+</span> <span class="n">number</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SmartPhone</span> <span class="kd">extends</span> <span class="nc">MobilePhone</span><span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">androidVer</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SmartPhone</span><span class="o">(</span><span class="nc">String</span> <span class="n">number</span><span class="o">,</span> <span class="nc">String</span> <span class="n">androidVer</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">number</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">androidVer</span> <span class="o">=</span> <span class="n">androidVer</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">playApp</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"App is running in "</span> <span class="o">+</span> <span class="n">androidVer</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MobileSmartPhone</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// SmartPhone 인스턴스를 각각 SmartPhone과 MobilePhone 타입의 변수로 참조함</span>
        <span class="nc">SmartPhone</span> <span class="n">phone1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SmartPhone</span><span class="o">(</span><span class="s">"010-777-7777"</span><span class="o">,</span> <span class="s">"JellyBean"</span><span class="o">);</span>
        <span class="nc">MobilePhone</span> <span class="n">phone2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SmartPhone</span><span class="o">(</span><span class="s">"010-999-9999"</span><span class="o">,</span> <span class="s">"Cookie"</span><span class="o">);</span>

        <span class="n">phone1</span><span class="o">.</span><span class="na">answer</span><span class="o">();</span>
        <span class="n">phone1</span><span class="o">.</span><span class="na">playApp</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="n">phone2</span><span class="o">.</span><span class="na">answer</span><span class="o">();</span>
        <span class="c1">// phone2.playApp();    // phone2가 부모클래스형 참조변수라서 컴파일 에러가 남</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>이처럼 상위 클래스의 참조변수는 하위 클래스의 인스턴스를 참조할 수 있다. 다음과 같이 정리하자.</p>

<ul>
  <li>모바일폰을 상속하는 스마트폰도 일종의 모바일폰이다.
    <ul>
      <li>MobilePhone을 상속하는 SmartPhone 인스턴스는 MobilePhone 인스턴스이기도 하다.</li>
    </ul>
  </li>
  <li>따라서 MobilePhone형 참조변수는 SmartPhone 인스턴스를 참조할 수 있다.</li>
</ul>

<p>여기서 집중해야할 부분은 이 부분이다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">MobilePhone</span> <span class="n">phone2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SmartPhone</span><span class="o">(</span><span class="s">"010-999-9999"</span><span class="o">,</span> <span class="s">"Cookie"</span><span class="o">);</span>

<span class="n">phone2</span><span class="o">.</span><span class="na">playApp</span><span class="o">();</span>   <span class="c1">// compile Error!</span>
</code></pre></div></div>

<p>참조변수 phone2는 MobilePhone 타입의 참조변수이다.<br />
이런 경우 <u>'phone2가 참조하는 인스턴스와는 상관없이'</u><br />
MobilePhone 클래스에 정의되었거나, 이 클래스가 상속하는 클래스의 멤버로 제한된다.</p>

<p>이처럼 자바는 메소드 호출 시 참조하는 인스턴스와는 관계없이 ‘참조변수의 형(type)을 참조’하여 그 메소드 호출이 옳은 것인지 판단한다.<br />
이에는 2가지 이유가 있는데,</p>

<blockquote>
  <p>1) 실행 시간을 늦추는 결과로 이어질 수 있다.</p>
</blockquote>

<p>실제 참조하는 인스턴스를 대상으로 메소드의 호출 가능성을 판단하는 것은 간단하지 않다.<br />
참조하는 인스턴스의 종류는 코드의 흐름에 따라 얼마든지 달라질 수 있기 때문이다.</p>

<blockquote>
  <p>2) 참조변수의 형을 기준으로 접근 가능한 멤버를 제한하는 것은 코드를 단순하게 한다.</p>
</blockquote>

<p>단점이 많은 일부 기능을 제한함으로써 단순하고 명료한 코드의 작성을 유도했다.</p>

<h3 id="--클래스의-상속과-참조변수의-참조-가능성에-대한-정리">- <u>클래스의 상속과 참조변수의 참조 가능성에 대한 정리</u></h3>
<p>위의 내용을 정리해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sweet</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CheeseCake</span> <span class="kd">extends</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">milky</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">StrawberryCheeseCake</span> <span class="kd">extends</span> <span class="nc">CheeseCake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sour</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/15-1.png" alt="image" /><br /></p>

<p>Cake형의 참조변수 cake1은<br />
    -&gt; Cake에 정의된 sweet() 메소드를 호출할 수 있다.</p>

<p>하위 클래스인 CheeseCake형 참조변수 cake2는<br />
    -&gt; Cake에 정의된 sweet() 메소드와<br />
    -&gt; CheeseCake에 정의된 milky() 메소드를 호출할 수 있다.</p>

<h3 id="--참조변수-간-대입과-형-변환">- <u>참조변수 간 대입과 형 변환</u></h3>
<p>Cake 예시를 다시 살펴보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sweet</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CheeseCake</span> <span class="kd">extends</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">milky</span><span class="o">()</span> <span class="o">{...}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>컴파일러는 ‘참조변수의 형’만을 가지고 대입의 가능성을 판단한다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">CheeseCake</span> <span class="n">ca1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>
<span class="nc">Cake</span> <span class="n">ca2</span> <span class="o">=</span> <span class="n">c1</span><span class="o">;</span>  <span class="c1">// 가능!</span>
</code></pre></div></div>
<p>‘CheeseCake’ is a ‘Cake’ 이기 때문에 cake형 참조변수로 CheeseCake의 인스턴스를 참조하는 것은 가능하다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Cake</span> <span class="n">ca3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>
<span class="nc">CheeseCake</span> <span class="n">ca4</span> <span class="o">=</span> <span class="n">ca3</span><span class="o">;</span>   <span class="c1">// 불가능!</span>
</code></pre></div></div>
<p>위의 문장을 자바 컴파일러는 다음과 같은 수준으로 보고 대입의 가능성을 판단한다.<br />
Cake ca3 = …<br />
CheeseCake ca4 = ca3;</p>

<p>이렇게 ca3가 참조하는 인스턴스가 cheeseCake의 인스턴스임을 보장할 수 없다.<br />
(Cake를 상속하는 다른 클래스의 인스턴스일 수도 있다..)</p>

<p>다만, 개발자가 명시적으로 형 변환을 해주면 대입이 가능하다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Cake</span> <span class="n">ca3</span> <span class="o">=</span> <span class="o">...</span>
<span class="nc">CheeseCake</span> <span class="n">ca4</span> <span class="o">=</span> <span class="o">(</span><span class="nc">CheeseCake</span><span class="o">)</span><span class="n">ca3</span><span class="o">;</span>   <span class="c1">// 가능함. 주의 요망!</span>
</code></pre></div></div>

<p>ca3가 참조하는 인스턴스가 CheeseCake 인스턴스임을 개발자가 보장한다는 의미이다.<br />
이렇게하면 컴파일러는 그냥 허용하기 때문에 치명적인 실수가 발생하지 않도록 주의하여 사용해야한다.</p>

<h3 id="--메소드-오버라이딩method-overriding">- <u>메소드 오버라이딩(Method Overriding)</u></h3>
<p>상위 클래스에 정의된 메소드를 하위 클래스에서 다시 정의하는 행위를 메소드 오버라이딩이라고 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">yummy</span><span class="o">()</span> <span class="o">{</span>   <span class="c1">// 오버라이딩 '된' 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy Cake"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CheeseCake</span> <span class="kd">extends</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">yummy</span><span class="o">()</span> <span class="o">{</span>   <span class="c1">// 오버라이딩 '한' 메소드</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy CheeseCake"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">YummyCakeOverriding</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Cake</span> <span class="n">cake1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>
        <span class="nc">CheeseCake</span> <span class="n">cake2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>

        <span class="n">cake1</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>
        <span class="n">cake2</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/15-2.png" alt="image" width="50%" height="50%" /><br /></p>

<p>다음 세 가지가 같아야 메소드 오버라이딩이 성립한다.</p>
<ol>
  <li>메소드의 이름</li>
  <li>메소드의 반환형</li>
  <li>메소드의 매개변수 선언</li>
</ol>

<p>실행결과를 보면 알 수 있듯이, 오버라이딩을 하면 참조변수의 형에 상관없이<br />
오버라이딩 한 메소드(CheeseCake의 yummy)가<br />
오버라이딩 된 메소드(Cake의 yummy)를 대신하게 된다.</p>

<h3 id="--오버라이딩-된-메소드를-호출하는-방법">- <u>오버라이딩 된 메소드를 호출하는 방법</u></h3>
<p>클래스 외부에서 인스턴스를 통해 오버라이딩 된 메소드를 호출하는 방법은 없다.<br />
다만, 클래스 외부가 아닌 내부에서 메소드를 호출하는 방법은 있다. 다음을 참고하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">yummy</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy Cake"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">CheeseCake</span> <span class="kd">extends</span> <span class="nc">Cake</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">yummy</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>  <span class="c1">// 하위 클래스의 메소드 안에서는 오버라이딩 된 메소드의 호출이 가능하다.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy CheeseCake"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tasty</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>  <span class="c1">// Cake의 yummy 메소드 호출</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Yummy Tasty Cake"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">YummyCakeSuper</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">CheeseCake</span> <span class="n">cake</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CheeseCake</span><span class="o">();</span>

        <span class="n">cake</span><span class="o">.</span><span class="na">yummy</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="n">cake</span><span class="o">.</span><span class="na">tasty</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="15-3-instanceof-연산자">15-3. instanceof 연산자</h2>
<p>연산자 instanceof는 참조변수가 참조하는 인스턴스의 ‘클래스’나 참조하는 인스턴스가 ‘상속하는 클래스’를 묻는 연산자이다.</p>

<h3 id="--instanceof-연산자의-기본">- <u>instanceof 연산자의 기본</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="o">(</span><span class="n">ca</span> <span class="k">instanceof</span> <span class="nc">Cake</span><span class="o">)</span> <span class="o">{...}</span>
</code></pre></div></div>

<p>ca가 참조하는 인스턴스가</p>
<ol>
  <li>Cake의 인스턴스이거나</li>
  <li>Cake를 상속하는 클래스의 인스턴스이면<br />
true를, 그렇지 않으면 false를 반환한다.</li>
</ol>

<h3 id="--instanceof-연산자의-활용">- <u>instanceof 연산자의 활용</u></h3>
<p>다음과 같은 메소드를 정의하고 싶다고 가정하자!<br />
<img src="/assets/images/java-lang/15-3.png" alt="image" width="80%" height="80%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">simpleWrap</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Simple Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">PaperBox</span> <span class="kd">extends</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">paperWrap</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Paper Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">GoldPaperBox</span> <span class="kd">extends</span> <span class="nc">PaperBox</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">goldWrap</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Gold Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Wrapping</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span> <span class="n">box1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">();</span>
        <span class="nc">PaperBox</span> <span class="n">box2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaperBox</span><span class="o">();</span>
        <span class="nc">GoldPaperBox</span> <span class="n">box3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GoldPaperBox</span><span class="o">();</span>

        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box1</span><span class="o">);</span>
        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box2</span><span class="o">);</span>
        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box3</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">wrapBox</span><span class="o">(</span><span class="nc">Box</span> <span class="n">box</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">box</span> <span class="k">instanceof</span> <span class="nc">Box</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">box</span><span class="o">.</span><span class="na">simpleWrap</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">box</span> <span class="k">instanceof</span> <span class="nc">PaperBox</span><span class="o">)</span> <span class="o">{</span>
            <span class="o">((</span><span class="nc">PaperBox</span><span class="o">)</span><span class="n">box</span><span class="o">).</span><span class="na">paperWrap</span><span class="o">();</span>    <span class="c1">// 형 변환 후 메소드 호출</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="o">((</span><span class="nc">GoldPaperBox</span><span class="o">)</span><span class="n">box</span><span class="o">).</span><span class="na">goldWrap</span><span class="o">();</span> <span class="c1">// 형 변환 후 메소드 호출</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="추가-상속의-의미를-생각하며-refactor">(추가) 상속의 의미를 생각하며 refactor</h2>
<p>위의 wrapping 예제는 상속의 장점을 전혀 살리지 못한 예시라고 할 수 있다.<br />
상속은 연관된 일련의 클래스들에 대해 ‘공통적인 규약’을 정의할 수 있다.<br />
이를 상기하며 코드를 리펙토링 해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">wrap</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 오버라이딩</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Simple Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">PaperBox</span> <span class="kd">extends</span> <span class="nc">Box</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">wrap</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 오버라이딩</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Paper Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">GoldPaperBox</span> <span class="kd">extends</span> <span class="nc">PaperBox</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">wrap</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// 오버라이딩</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Gold Wrapping"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Wrapping</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Box</span> <span class="n">box1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Box</span><span class="o">();</span>
        <span class="nc">PaperBox</span> <span class="n">box2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PaperBox</span><span class="o">();</span>
        <span class="nc">GoldPaperBox</span> <span class="n">box3</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">GoldPaperBox</span><span class="o">();</span>

        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box1</span><span class="o">);</span>  <span class="c1">// Simple Wrapping</span>
        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box2</span><span class="o">);</span>  <span class="c1">// Paper Wrapping</span>
        <span class="n">wrapBox</span><span class="o">(</span><span class="n">box3</span><span class="o">);</span>  <span class="c1">// Gold Wrapping</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">wrapBox</span><span class="o">(</span><span class="nc">Box</span> <span class="n">box</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">box</span><span class="o">.</span><span class="na">wrap</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>wrapBox 메소드를 보면<br />
기존의 instanceof를 활용하여 실제 참조하고 있는 인스턴스가 무엇인지 구분하는 복잡한 코드를<br />
메소드 오버라이딩을 활용하여 간단하게 줄였다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 14 - 클래스의 상속 1: 상속의 기본</title><link href="http://localhost:4000/java%20lang/Chap14/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 14 - 클래스의 상속 1: 상속의 기본" /><published>2022-10-17T00:00:00+09:00</published><updated>2022-10-17T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap14</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap14/"><![CDATA[<h2 id="14-1-상속의-기본-문법-이해">14-1. 상속의 기본 문법 이해</h2>
<h3 id="--상속에-대한-매우-치명적인-오해">- <u>상속에 대한 매우 치명적인 오해</u></h3>
<p>상속의 이유와 목적에 대해 설명할 때, 단순히 이렇게 답하는 경우가 있다.</p>
<blockquote>
  <p>상속은 코드의 재활용을 위한 문법이다..?</p>
</blockquote>

<p>하지만 객체지향 기반의 개발을 공부하다보면 상속을 단순히 코드의 재활용을 위한 문법이라기보단 다음과 같은 설명이 더 적합하다.</p>
<blockquote>
  <p>연관된 일련의 클래스들에 대해 공통적인 규약(규칙)을 정의할 수 있다.</p>
</blockquote>

<h3 id="--상속의-가장-기본적인-특성">- <u>상속의 가장 기본적인 특성</u></h3>
<p>상속을 단순하게 설명하면,</p>
<blockquote>
  <p>기존에 정의된 클래스에 메소드와 변수를 추가하여 새로운 클래스를 정의하는 것이다.</p>
</blockquote>

<p>Man 클래스를 상속하여 새로운 클래스 BusinessMan 클래스를 만들어보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Man</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourName</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My name is "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">BusinessMan</span> <span class="kd">extends</span> <span class="nc">Man</span> <span class="o">{</span> <span class="c1">// Man을 상속하는 BusinessMan</span>
    <span class="nc">String</span> <span class="n">company</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">position</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourInfo</span><span class="o">(){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My company is "</span> <span class="o">+</span> <span class="n">company</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My position is "</span> <span class="o">+</span> <span class="n">position</span><span class="o">);</span>
        <span class="n">tellYourName</span><span class="o">();</span> <span class="c1">// Man 클래스를 상속했기 때문에 호출 가능!</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-1.png" alt="image" width="50%" height="50%" />
<img src="/assets/images/java-lang/14-2.png" alt="image" width="49%" height="50%" /><br /></p>

<h3 id="--상속과-생성자">- <u>상속과 생성자</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SuperCLS</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Super Class!!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SubCLS</span> <span class="kd">extends</span> <span class="nc">SuperCLS</span><span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Sub Class!!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperSubCon</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-3.png" alt="image" width="40%" height="40%" /><br /></p>

<ol>
  <li>하위 클래스의 인스턴스 생성 시 상위 클래스, 하위 클래스의 생성자 ‘모두’ 호출된다.</li>
  <li>하위 클래스의 인스턴스 생성 시 상위 클래스의 생성자가 ‘먼저’ 호출된다.</li>
</ol>

<p><br />그렇다면, 상위 클래스의 생성자가 여러 개 있을 시 어떻게 명시적으로 호출할 수 있을까?</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SuperCLS</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// 1</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SuperCLS()"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">// 2</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SuperCLS(int i)"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 3</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SuperCLS(int i, int j)"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SubCLS</span> <span class="kd">extends</span> <span class="nc">SuperCLS</span> <span class="o">{</span> <span class="c1">// super(); // 상위 클래스의 생성자를 명시적으로 호출하지 않으면 자동으로 호출됨</span>
    <span class="c1">// super를 이용한 상위 클래스의 생성자 호출문은 생성자의 첫 문장에 들어가야 함</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SubCLS()"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>   <span class="c1">// 상위 클래스의 2번 메소드 호출</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SubCLS(int i)"</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">j</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">j</span><span class="o">);</span>    <span class="c1">// 상위 클래스의 3번 메소드 호출</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Con: SubCLS(int i, int j)"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SuperSubCon2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1. "</span><span class="o">);</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">();</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"2. "</span><span class="o">);</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"3. "</span><span class="o">);</span>
        <span class="k">new</span> <span class="nf">SubCLS</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-4.png" alt="image" width="60%" height="60%" /><br /></p>

<h3 id="--상속-관계에-있는-두-클래스의-적절한-생성자-정의">- <u>상속 관계에 있는 두 클래스의 적절한 생성자 정의</u></h3>
<blockquote>
  <p>모든 멤버는 자신이 속한 클래스에서 초기화되는 것이 좋다.</p>
</blockquote>

<p>따라서, 상속에서도 마찬가지로 상위 클래스의 멤버는 상위 클래스의 생성자를 통해서 초기화해야한다.<br />
앞서 만든 BusinessMan 클래스를 리펙토링해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Man</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Man</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">){</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourName</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My name is "</span> <span class="o">+</span> <span class="n">name</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">BusinessMan</span> <span class="kd">extends</span> <span class="nc">Man</span><span class="o">{</span>
    <span class="nc">String</span> <span class="n">company</span><span class="o">;</span>
    <span class="nc">String</span> <span class="n">position</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">BusinessMan</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">company</span><span class="o">,</span> <span class="nc">String</span> <span class="n">position</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">name</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">company</span> <span class="o">=</span> <span class="n">company</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">position</span> <span class="o">=</span> <span class="n">position</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">tellYourInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My company is "</span> <span class="o">+</span> <span class="n">company</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"My position is "</span> <span class="o">+</span> <span class="n">position</span><span class="o">);</span>
        <span class="n">tellYourName</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyBusinessMan</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">BusinessMan</span> <span class="n">man</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BusinessMan</span><span class="o">(</span><span class="s">"Hi-June"</span><span class="o">,</span> <span class="s">"TUK"</span><span class="o">,</span> <span class="s">"Developer"</span><span class="o">);</span>
        <span class="n">man</span><span class="o">.</span><span class="na">tellYourInfo</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/14-5.png" alt="image" width="40%" height="40%" /><br /></p>

<h3 id="--단일-상속만을-지원하는-자바">- <u>단일 상속만을 지원하는 자바</u></h3>
<p>자바는 프로그램이 과도하게 복잡해지는 것을 방지하기 위해 단일 상속만을 지원한다.<br />
하나의 클래스가 상속할 수 있는 클래스의 수가 최대 하나라는 것을 의미한다.</p>

<p>(참고) 다중 상속을 하게 되면 어떤 문제가 생길까?</p>
<ol>
  <li>
    <p>애매한 상황이 발생한다.<br />
<img src="/assets/images/java-lang/14-6.png" alt="image" width="40%" height="40%" /><br />
동일한 이름을 가진 print()를 상속받을 때 문제가 생긴다.</p>
  </li>
  <li>
    <p>다이아몬드 문제<br />
<img src="/assets/images/java-lang/14-7.png" alt="image" width="40%" height="40%" /><br />
show() 메소드의 경로에 대해서 애매한 문제가 발생한다.</p>
  </li>
</ol>

<h2 id="14-2-클래스-변수-클래스-메소드와-상속">14-2. 클래스 변수, 클래스 메소드와 상속</h2>
<h3 id="--static-선언이-붙는-클래스-변수와-클래스-메소드의-상속">- <u>static 선언이 붙는 '클래스 변수'와 '클래스 메소드'의 상속</u></h3>
<p>클래스 변수와 클래스 메소드의 특징은 다음과 같다.</p>

<ol>
  <li>인스턴스의 생성과 상관 없이 접근이 가능하다.</li>
  <li>클래스 내부와 외부에서(접근 수준 지시자가 허용하면) 접근이 가능하다.</li>
  <li>클래스 변수와 클래스 메소드가 위치한 클래스 내에서는 직접 접근이 가능하다.</li>
</ol>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SuperCLS</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>   <span class="c1">// 클래스 변수</span>

    <span class="kd">public</span> <span class="nf">SuperCLS</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">count</span><span class="o">++;</span>    <span class="c1">// 클래스 내에서는 직접 접근이 가능</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>클래스 변수는 인스턴스의 멤버로써 존재하지 않는다.<br />
따라서, 이를 상속하는 하위 클래스의 멤버로도 존재할 수 없다.<br />
일반적으로 static 변수에 접근하듯이 접근하면 된다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry></feed>