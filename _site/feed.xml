<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-06T01:53:17+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[2961] 도영이가 만든 맛있는 음식</title><link href="http://localhost:4000/boj/2961/" rel="alternate" type="text/html" title="[2961] 도영이가 만든 맛있는 음식" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/boj/2961</id><content type="html" xml:base="http://localhost:4000/boj/2961/"><![CDATA[<h2 id="silver-ii-도영이가-만든-맛있는-음식---2961">[Silver II] 도영이가 만든 맛있는 음식 - 2961</h2>

<p><a href="https://www.acmicpc.net/problem/2961">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 16248 KB, 시간: 148 ms</p>

<h3 id="분류">분류</h3>

<p>브루트포스 알고리즘, 비트마스킹, 백트래킹</p>

<h3 id="문제-설명">문제 설명</h3>

<p>도영이는 짜파구리 요리사로 명성을 날렸었다. 이번에는 이전에 없었던 새로운 요리에 도전을 해보려고 한다.</p>

<p>지금 도영이의 앞에는 재료가 N개 있다. 도영이는 각 재료의 신맛 S와 쓴맛 B를 알고 있다. 여러 재료를 이용해서 요리할 때, 그 음식의 신맛은 사용한 재료의 신맛의 곱이고, 쓴맛은 합이다.</p>

<p>시거나 쓴 음식을 좋아하는 사람은 많지 않다. 도영이는 재료를 적절히 섞어서 요리의 신맛과 쓴맛의 차이를 작게 만들려고 한다. 또, 물을 요리라고 할 수는 없기 때문에, 재료는 적어도 하나 사용해야 한다.</p>

<p>재료의 신맛과 쓴맛이 주어졌을 때, 신맛과 쓴맛의 차이가 가장 작은 요리를 만드는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 재료의 개수 N(1 ≤ N ≤ 10)이 주어진다. 다음 N개 줄에는 그 재료의 신맛과 쓴맛이 공백으로 구분되어 주어진다. 모든 재료를 사용해서 요리를 만들었을 때, 그 요리의 신맛과 쓴맛은 모두 1,000,000,000보다 작은 양의 정수이다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에 신맛과 쓴맛의 차이가 가장 작은 요리의 차이를 출력한다. </p>

<h2 id="아이디어">아이디어</h2>
<p>좀 더 효율적으로 풀 수 없을까 고민해보았지만, 결국 선택 가능한 모든 경우를 조합으로 뽑아, 각 경우마다 신맛과 쓴맛의 차이를 계산하여 차이의 최솟값을 구하는 방법밖에는 없는 것 같다.<br />
조합 관련 문제가 실제로 출제된다면 java로 풀어내는 것은 좀 고역일 것 같긴하다..</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Combination</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">r</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">now</span><span class="o">;</span> <span class="c1">// 현재 조합</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">;</span> <span class="c1">// 모든 조합</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Combination</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">now</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">r</span><span class="o">];</span>
        <span class="k">this</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">combination</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">now</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">temp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
            <span class="o">}</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
        <span class="n">now</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
        <span class="n">combination</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="n">combination</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">depth</span><span class="o">,</span> <span class="n">index</span><span class="o">,</span> <span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">ingredientList</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ingredient</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">valueOf</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>
            <span class="n">ingredientList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">ingredient</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">diff</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">Combination</span> <span class="n">comb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Combination</span><span class="o">&lt;&gt;(</span><span class="n">n</span><span class="o">,</span> <span class="n">i</span><span class="o">);</span>
            <span class="n">comb</span><span class="o">.</span><span class="na">combination</span><span class="o">(</span><span class="n">ingredientList</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;&gt;</span> <span class="n">chosenIngredient</span> <span class="o">=</span> <span class="n">comb</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>

            <span class="k">for</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">choice</span> <span class="o">:</span> <span class="n">chosenIngredient</span><span class="o">)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">sour</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="kt">int</span> <span class="n">bitter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

                <span class="k">for</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ingredient</span> <span class="o">:</span> <span class="n">choice</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">sour</span> <span class="o">*=</span> <span class="n">ingredient</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
                    <span class="n">bitter</span> <span class="o">+=</span> <span class="n">ingredient</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="n">diff</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Math</span><span class="o">.</span><span class="na">abs</span><span class="o">(</span><span class="n">sour</span> <span class="o">-</span> <span class="n">bitter</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">minimum</span> <span class="o">=</span> <span class="nc">Collections</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">diff</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">minimum</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[혼자왔니] JPA - could not initialize proxy</title><link href="http://localhost:4000/rualone/RUAlone03/" rel="alternate" type="text/html" title="[혼자왔니] JPA - could not initialize proxy" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/rualone/RUAlone03</id><content type="html" xml:base="http://localhost:4000/rualone/RUAlone03/"><![CDATA[<blockquote>
  <p>영속성 컨텍스트, Proxy, DTO, 트랜잭션, Lazy Loading</p>
</blockquote>

<h2 id="상황-설명">상황 설명</h2>
<p><img src="/assets/images/RUAlone/3-1.jpeg" alt="image" width="80%" height="80%" /></p>

<p>현재 상황은 이렇다.<br />
User와 Post가 1:N 관계를 맺고 있고, Post 엔티티에서 User에 대해 Lazy 전략으로 설정해 준 상태이다.</p>

<p><img src="/assets/images/RUAlone/3-2.jpeg" alt="image" width="80%" height="80%" /></p>

<p>Client에서 Post를 조회하려고 GET 요청을 보내면 Post를 찾아 DTO로 돌려주는 가장 일반적인 형태로 구현이 되어있다.</p>

<h2 id="에러가-난-코드를-살펴보자">에러가 난 코드를 살펴보자..!</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 기존 코드(Controller)</span>
<span class="nd">@Parameter</span><span class="o">(</span>
            <span class="n">name</span> <span class="o">=</span> <span class="s">"X-AUTH-TOKEN"</span><span class="o">,</span>
            <span class="n">description</span> <span class="o">=</span> <span class="s">"로그인 성공 후 AccessToken"</span><span class="o">,</span>
            <span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span>
            <span class="n">schema</span> <span class="o">=</span> <span class="nd">@Schema</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="s">"string"</span><span class="o">),</span>
            <span class="n">in</span> <span class="o">=</span> <span class="nc">ParameterIn</span><span class="o">.</span><span class="na">HEADER</span><span class="o">)</span>
<span class="nd">@Operation</span><span class="o">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s">"게시글 단건 조회"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"게시글을 조회합니다."</span><span class="o">)</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/api/post/{postId}"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">SingleResult</span><span class="o">&lt;</span><span class="nc">PostResponseDto</span><span class="o">&gt;</span> <span class="nf">getPost</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">postId</span><span class="o">)</span> <span class="o">{</span>
	<span class="nc">Post</span> <span class="n">post</span> <span class="o">=</span> <span class="n">postService</span><span class="o">.</span><span class="na">findByPostId</span><span class="o">(</span><span class="n">postId</span><span class="o">);</span>

	<span class="c1">// Entity -&gt; DTO</span>
	<span class="nc">PostResponseDto</span> <span class="n">postResponseDto</span> <span class="o">=</span> <span class="nc">PostResponseDto</span><span class="o">.</span><span class="na">converToDto</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>
	<span class="k">return</span> <span class="n">responseService</span><span class="o">.</span><span class="na">getSingleResult</span><span class="o">(</span><span class="n">postResponseDto</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<p>GET 메소드를 통해 Post에 대한 정보를 요청하고 있다.<br />
다음과 같은 에러 메시지가 뜬다.</p>

<blockquote>
  <p>could not initialize proxy - no Session</p>
</blockquote>

<h2 id="post-조회-시-어떤-일이-벌어질까">Post 조회 시 어떤 일이 벌어질까?</h2>
<p><img src="/assets/images/RUAlone/3-3.jpeg" alt="image" width="40%" height="40%" /></p>

<p>Post를 조회하면 Post와 Lazy Loading으로 연관된 User는 바로 초기화 되지 않고 필요할 때 정보가 채워지는 Proxy 객체로 채워진다.<br />
즉, 위 그림과 같은 상태가 되는 것이다.</p>

<blockquote>
  <p>Controller 단에서 Post의 값을 써서 DTO를 채워야하는데 User의 값이 초기화가 되지 않으니 DTO를 만들 수 없었던 것이다!</p>
</blockquote>

<h2 id="lazy-loading-방식이니-dto를-만들기-위해-데이터를-사용할-때-쿼리를-날려-proxyr객체를-채우지-않을까">Lazy Loading 방식이니 DTO를 만들기 위해 데이터를 사용할 때 쿼리를 날려 Proxyr객체를 채우지 않을까?</h2>
<p>보통 Service단에서 Transaction으로 묶어 Post를 Repository에서 찾아온다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 기존 코드(Service)</span>
<span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Post</span> <span class="nf">getPostDetail</span><span class="o">(</span><span class="nc">Long</span> <span class="n">postId</span><span class="o">)</span> <span class="o">{</span> 
    <span class="nc">Post</span> <span class="n">post</span> <span class="o">=</span> <span class="n">postRepository</span><span class="o">.</span><span class="na">findPostById</span><span class="o">(</span><span class="n">postId</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">CPostNotFoundException:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">post</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>문제는 다음과 같은 이유때문에 발생한다.</p>

<blockquote>
  <p>JPA의 영속성 컨텍스트는 보통 트랜잭션과 생명 주기를 같이 한다.</p>
</blockquote>

<ol>
  <li>서비스단에서 트랜잭션이 일어난다.</li>
  <li>컨트롤러 단으로 나오면서 영속성 상태가 끝나버린다..</li>
  <li>따라서, 영속성 컨텍스트에서 관리하지 않기 때문에 User에 필요한 값이 있을 때 쿼리를 날려 Proxy 객체를 채우지 않는다.</li>
</ol>

<h2 id="해결방법">해결방법</h2>
<p>간단하다.</p>

<p>Entity를 DTO로 바꾸는 작업도 Service 단에서 해주면 된다.<br />
즉, Service 단에서 Entity를 받지 말고 Dto를 받아주면 된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 개선한 코드(Controller)</span>
<span class="nd">@Parameter</span><span class="o">(</span>
            <span class="n">name</span> <span class="o">=</span> <span class="s">"X-AUTH-TOKEN"</span><span class="o">,</span>
            <span class="n">description</span> <span class="o">=</span> <span class="s">"로그인 성공 후 AccessToken"</span><span class="o">,</span>
            <span class="n">required</span> <span class="o">=</span> <span class="kc">true</span><span class="o">,</span>
            <span class="n">schema</span> <span class="o">=</span> <span class="nd">@Schema</span><span class="o">(</span><span class="n">type</span> <span class="o">=</span> <span class="s">"string"</span><span class="o">),</span>
            <span class="n">in</span> <span class="o">=</span> <span class="nc">ParameterIn</span><span class="o">.</span><span class="na">HEADER</span><span class="o">)</span>
<span class="nd">@Operation</span><span class="o">(</span><span class="n">summary</span> <span class="o">=</span> <span class="s">"게시글 단건 조회"</span><span class="o">,</span> <span class="n">description</span> <span class="o">=</span> <span class="s">"게시글을 조회합니다."</span><span class="o">)</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/api/post/{postId}"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">SingleResult</span><span class="o">&lt;</span><span class="nc">PostResponseDto</span><span class="o">&gt;</span> <span class="nf">getPost</span><span class="o">(</span><span class="nd">@PathVariable</span> <span class="nc">Long</span> <span class="n">postId</span><span class="o">)</span> <span class="o">{</span>
	<span class="c1">// 바로 서비스단에서 DTO를 받도록 변경</span>
	<span class="nc">PostResponseDto</span> <span class="n">postResponseDto</span> <span class="o">=</span> <span class="n">postService</span><span class="o">.</span><span class="na">findByPostId</span><span class="o">(</span><span class="n">postId</span><span class="o">);</span>
	<span class="k">return</span> <span class="n">responseService</span><span class="o">.</span><span class="na">getSingleResult</span><span class="o">(</span><span class="n">postResponseDto</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 개선한 코드(Service)</span>
<span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">Post</span> <span class="nf">getPostDetail</span><span class="o">(</span><span class="nc">Long</span> <span class="n">postId</span><span class="o">)</span> <span class="o">{</span> 
    <span class="nc">Post</span> <span class="n">post</span> <span class="o">=</span> <span class="n">postRepository</span><span class="o">.</span><span class="na">findPostById</span><span class="o">(</span><span class="n">postId</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">CPostNotFoundException:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>
	
    <span class="c1">// Entity -&gt; DTO</span>
    <span class="nc">PostResponseDto</span> <span class="n">postResponseDto</span> <span class="o">=</span> <span class="nc">PostResponseDto</span><span class="o">.</span><span class="na">convertToDto</span><span class="o">(</span><span class="n">post</span><span class="o">);</span>
    <span class="k">return</span> <span class="n">postResponseDto</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="RUAlone" /><category term="Info" /><summary type="html"><![CDATA[RUAlone(혼자왔니) 혼밥 메이트 구하기 프로젝트]]></summary></entry><entry><title type="html">[혼자왔니] spring에서의 예외처리와 security filter</title><link href="http://localhost:4000/rualone/RUAlone02/" rel="alternate" type="text/html" title="[혼자왔니] spring에서의 예외처리와 security filter" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/rualone/RUAlone02</id><content type="html" xml:base="http://localhost:4000/rualone/RUAlone02/"><![CDATA[<h2 id="예외처리-하기">예외처리 하기</h2>

<p>프로그램에서 발생할 수 있는 여러 예외적인 상황에 대해 처리하는 것은 중요하다.</p>

<p>spring에서는 다음과 같은 방법들로 예외를 처리한다.</p>

<ul>
  <li>@ExceptionHandler
    <ul>
      <li>@Contrller, @RestController가 적용된 <strong>Bean내에서 발생하는 예외를 잡아서 하나의 메서드에서 처리</strong>
  해주는 기능을 한다.</li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@RestController</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyController</span> <span class="o">{</span>
    
      <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/nullEx"</span><span class="o">)</span>
      <span class="nd">@ResponseBody</span>
      <span class="kd">public</span> <span class="nc">String</span> <span class="nf">myController</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nf">NullPointerException</span><span class="o">();</span>   <span class="c1">// 이 경우에 한해서만 예외처리가 가능함</span>
      <span class="o">}</span>
    
      <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/indexEx"</span><span class="o">)</span>
      <span class="nd">@ResponseBody</span>
      <span class="kd">public</span> <span class="nc">String</span> <span class="nf">myController2</span><span class="o">()</span> <span class="o">{</span>
          <span class="k">throw</span> <span class="k">new</span> <span class="nf">IndexOutOfBoundsException</span><span class="o">();</span>
      <span class="o">}</span>
    
      <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">NullPointerException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>  <span class="c1">// NullPointerException만</span>
      <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">nullEx</span><span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
          <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getClass</span><span class="o">());</span>
          <span class="k">return</span> <span class="s">"myServiceException"</span><span class="o">;</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
  <li>@ControllerAdvice
    <ul>
      <li><strong>모든</strong> @Cotroller에 대한 예외를 잡아서 처리해주는 기능</li>
      <li>@RestControllerAdvice → @ControllerAdvice, @ResponseBody
        <ul>
          <li>에러응답으로 객체 리턴(json) → @RestControllerAdvice</li>
          <li>에러응답으로 예외 페이지(viewResolver) → @ControllerAdvice</li>
        </ul>
      </li>
    </ul>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * 1. custom exception을 만들어줌
   */</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserNotFoundCException</span> <span class="kd">extends</span> <span class="nc">RuntimeException</span><span class="o">{</span>
      <span class="kd">public</span> <span class="nf">UserNotFoundCException</span><span class="o">()</span> <span class="o">{</span>
          <span class="kd">super</span><span class="o">();</span>
      <span class="o">}</span>
    
      <span class="kd">public</span> <span class="nf">UserNotFoundCException</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">,</span> <span class="nc">Throwable</span> <span class="n">cause</span><span class="o">)</span> <span class="o">{</span>
          <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">,</span> <span class="n">cause</span><span class="o">);</span>
      <span class="o">}</span>
    
      <span class="kd">public</span> <span class="nf">UserNotFoundCException</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
          <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * 2. @RestControllerAdvice가 등록되어있는 ExceptionAdvice에 해당 에러를 처리하기 위한 Handler를 만들어준다.
   */</span>
  <span class="nd">@RequiredArgsConstructor</span>
  <span class="nd">@RestControllerAdvice</span>  <span class="c1">// 모든 Controller에 대한 예외 통합 관리</span>
  <span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExceptionAdvice</span> <span class="o">{</span>
      <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ResponseService</span> <span class="n">responseService</span><span class="o">;</span>
      <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MessageSource</span> <span class="n">messageSource</span><span class="o">;</span>
    
      <span class="kd">private</span> <span class="nc">String</span> <span class="nf">getMessage</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">return</span> <span class="nf">getMessage</span><span class="o">(</span><span class="n">code</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>
      <span class="o">}</span>
    
      <span class="kd">private</span> <span class="nc">String</span> <span class="nf">getMessage</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">,</span> <span class="nc">Object</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">return</span> <span class="n">messageSource</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(</span><span class="n">code</span><span class="o">,</span> <span class="n">args</span><span class="o">,</span> <span class="nc">LocaleContextHolder</span><span class="o">.</span><span class="na">getLocale</span><span class="o">());</span>
      <span class="o">}</span>
  <span class="c1">/////////////////////////////////////////////////////////////////////////////////////////////////</span>
      <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">Exception</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>  <span class="c1">// 일반 예외</span>
      <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">)</span>   
      <span class="kd">protected</span> <span class="nc">CommonResult</span> <span class="nf">defaultException</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">return</span> <span class="n">responseService</span><span class="o">.</span><span class="na">getFailResult</span>
                  <span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">getMessage</span><span class="o">(</span><span class="s">"unKnown.code"</span><span class="o">)),</span> <span class="n">getMessage</span><span class="o">(</span><span class="s">"unKnown.msg"</span><span class="o">));</span>
      <span class="o">}</span>
    
      <span class="cm">/***
       * 유저를 찾지 못했을 때 발생시키는 예외
       */</span>
      <span class="nd">@ExceptionHandler</span><span class="o">(</span><span class="nc">UserNotFoundCException</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
      <span class="nd">@ResponseStatus</span><span class="o">(</span><span class="nc">HttpStatus</span><span class="o">.</span><span class="na">INTERNAL_SERVER_ERROR</span><span class="o">)</span>
      <span class="kd">protected</span> <span class="nc">CommonResult</span> <span class="nf">userNotFoundException</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
          <span class="k">return</span> <span class="n">responseService</span><span class="o">.</span><span class="na">getFailResult</span>
                  <span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">getMessage</span><span class="o">(</span><span class="s">"userNotFound.code"</span><span class="o">)),</span> <span class="n">getMessage</span><span class="o">(</span><span class="s">"userNotFound.msg"</span><span class="o">));</span>
      <span class="o">}</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="cm">/**
   * 3. 예외가 발생해야 되는 상황에서 발생시키기
   */</span>
    
  <span class="cm">/**
   * 회원 조회(id)
   * @param id
   * @return UserResponseDto
   */</span>
  <span class="nd">@Transactional</span><span class="o">(</span><span class="n">readOnly</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
  <span class="kd">public</span> <span class="nc">UserResponseDto</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
      <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userJpaRepo</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">id</span><span class="o">).</span><span class="na">orElseThrow</span><span class="o">(</span><span class="nl">UserNotFoundCException:</span><span class="o">:</span><span class="k">new</span><span class="o">);</span>
      <span class="k">return</span> <span class="k">new</span> <span class="nf">UserResponseDto</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
  <span class="o">}</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="예외-메시지-관리하기">예외 메시지 관리하기</h2>

<p>통합 예외 관리에서 중요한 것은 예외 메시지 관리이다.</p>

<p>enum으로 관리하는 방법 등등이 있지만, yaml에 정리해두고, 해당 yaml 파일을 참조해서 예외 메시지를 가져오는 방법도 있다.</p>

<ul>
  <li>
    <p>MessageSource</p>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># application.yml</span>
  <span class="na">spring</span><span class="pi">:</span>
    <span class="na">messages</span><span class="pi">:</span>
      <span class="na">basename</span><span class="pi">:</span> <span class="s">i18n/exception</span>
      <span class="na">encoding</span><span class="pi">:</span> <span class="s">UTF-8</span>
</code></pre></div>    </div>

    <div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nd">@Bean</span>
  <span class="kd">public</span> <span class="nc">MessageSource</span> <span class="nf">messageSource</span><span class="o">(</span>
                     <span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.messages.basename}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">basename</span><span class="o">,</span>
                     <span class="nd">@Value</span><span class="o">(</span><span class="s">"${spring.messages.encoding}"</span><span class="o">)</span> <span class="nc">String</span> <span class="n">encoding</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">YamlMessageSource</span> <span class="n">ms</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">YamlMessageSource</span><span class="o">();</span>
        <span class="n">ms</span><span class="o">.</span><span class="na">setBasename</span><span class="o">(</span><span class="n">basename</span><span class="o">);</span>
        <span class="n">ms</span><span class="o">.</span><span class="na">setDefaultEncoding</span><span class="o">(</span><span class="n">encoding</span><span class="o">);</span>
        <span class="n">ms</span><span class="o">.</span><span class="na">setAlwaysUseMessageFormat</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">ms</span><span class="o">.</span><span class="na">setUseCodeAsDefaultMessage</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">ms</span><span class="o">.</span><span class="na">setFallbackToSystemLocale</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">ms</span><span class="o">;</span>
  <span class="o">}</span>
</code></pre></div>    </div>

    <div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1"># exception_ko.yml</span>
  <span class="na">unKnown</span><span class="pi">:</span>
    <span class="na">code</span><span class="pi">:</span> <span class="s2">"</span><span class="s">-9999"</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">알수</span><span class="nv"> </span><span class="s">없는</span><span class="nv"> </span><span class="s">오류가</span><span class="nv"> </span><span class="s">발생하였습니다."</span>
  <span class="na">userNotFound</span><span class="pi">:</span>
    <span class="na">code</span><span class="pi">:</span> <span class="s2">"</span><span class="s">-1000"</span>
    <span class="na">msg</span><span class="pi">:</span> <span class="s2">"</span><span class="s">존재하지</span><span class="nv"> </span><span class="s">않는</span><span class="nv"> </span><span class="s">회원입니다."</span>
</code></pre></div>    </div>
  </li>
</ul>

<h2 id="문제-발생">문제 발생..?</h2>

<p>spring security를 활용하여 jwt 기반 회원 인증/인가 시스템을 구현했다!</p>

<p>그럼 jwt 테스트를 진행해보자!</p>

<ul>
  <li>테스트의 내용
    <ul>
      <li>jwt 없이 api를 요청한 경우</li>
      <li>형식이 맞지 않거나 만료된 token을 사용한 경우</li>
      <li>정상 token이지만 권한이 없는 경우</li>
    </ul>
  </li>
</ul>

<p>자, 그럼 <strong>custom 예외</strong>를 열심히 만들고, 해당 예외처리가 되는지 확인해보자..</p>

<ul>
  <li>
    <p>응답 내용(엥..?)</p>

    <div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="w">  </span><span class="p">{</span><span class="w">
  	</span><span class="nl">"timestamp"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2023-xx-xxxx"</span><span class="p">,</span><span class="w">
  	</span><span class="nl">"status"</span><span class="p">:</span><span class="w"> </span><span class="mi">403</span><span class="p">,</span><span class="w">
  	</span><span class="nl">"error"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Forbidden"</span><span class="p">,</span><span class="w">
  	</span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"/api/user/id/1"</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span></code></pre></div>    </div>
  </li>
</ul>

<h2 id="왜-열심히-만든-custom-예외가-안-터질까">왜 열심히 만든 Custom 예외가 안 터질까?</h2>

<p>구글링 해본 결과.. spring security의 filter링과 관련이 있었다.</p>

<p>현재 만든 예외처리는 <strong>@RestControllerAdvice</strong>를 통해 처리하게 했는데, 이 말은 예외가 <strong>Spring이 처리가능한 영역</strong>까지 도달한 경우 처리하도록 했다는 의미</p>

<p><strong>하지만 spring security는 servlet dispatcher 앞단에 위치합니다…</strong></p>

<h2 id="spring-security-작동-구조">Spring Security 작동 구조</h2>

<p><img src="/assets/images/RUAlone/2-1.png" alt="image" width="80%" height="80%" /></p>

<p>스프링 시큐리티 사용시 스프링은 DispatcherServlet 앞단에 <strong>Filter</strong>를 배치시켜서 요청을 가로챈다.</p>

<p>클라이언트에 접근 권한이 없다면 인증화면으로 자동 리다이렉트 시킨다.</p>

<h2 id="그럼-어떻게-하죠">그럼 어떻게 하죠?</h2>

<p>앞서 말한 ‘테스트 내용’ 에 대해 각각 spring security가 제공하는 몇몇 애들을 상속 받아서 재정의하면 됩니다.</p>

<ol>
  <li>정상적으로 Jwt이 제대로 오지 않은 경우 - AuthenticationEntryPoint</li>
  <li>정상적인 Jwt이 왔지만 권한이 다른 경우 - AccessDeniedHandler</li>
  <li>@PreAuthorize, @Secured 등의 애노테이션으로 리소스 접근 권한 설정하기</li>
</ol>]]></content><author><name>hi~ June!!</name></author><category term="RUAlone" /><category term="Info" /><summary type="html"><![CDATA[RUAlone(혼자왔니) 혼밥 메이트 구하기 프로젝트]]></summary></entry><entry><title type="html">[혼자왔니] 프로젝트 소개</title><link href="http://localhost:4000/rualone/RUAlone01/" rel="alternate" type="text/html" title="[혼자왔니] 프로젝트 소개" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/rualone/RUAlone01</id><content type="html" xml:base="http://localhost:4000/rualone/RUAlone01/"><![CDATA[<h2 id="첫-spring-boot-프로젝트다">첫 spring boot 프로젝트다!</h2>
<p>마냥 막막해보였던 spring boot를 이용하여 만든 첫 프로젝트이다.<br />
방학 때 진행했던 실리콘벨리 부트캠프가 끝나고, 후속 프로그램인 Techeer에 들어가게되었다.<br />
새로운 팀원들과 진행해본 프로젝트인 만큼 우여곡절이 많았고, 처음 목표했던 것보다는 부족했지만 spring boot를 전반적으로 이해할 수 있었던 시간들이었다.</p>

<h2 id="프로젝트-소개">프로젝트 소개</h2>
<blockquote>
  <p>이 프로젝트는 혼밥이 힘든 이들을 위해 만들어졌다.</p>
</blockquote>

<p>같이 배달을 시킬 친구를 구한다거나, 혼자 가기 뻘쭘한 식당들에 같이 가줄 친구들을 구하는 플렛폼이 있었으면 좋겠다는 아이디어에서 나왔다.<br />
실제로 본인 같은 경우, 기숙사에서 지내다보니 배달 한 번 시키려해도 배달비 때문에 망설여지는 순간들이 있었고,<br />
솔직히 대부분의 식당은 그냥 혼자도 갈 수 있지만, 패밀리 레스토랑이나 고깃집, 파스타 등등 몇몇 식당들은 들어가기 약간 망설여지기도 했다.<br />
토이 프로젝트긴 하지만 진짜 이런 어플이 있었으면 좋겠다는 생각으로 작업을 시작하게되었다.</p>

<h2 id="세부-구성">세부 구성</h2>
<p><img src="https://user-images.githubusercontent.com/35219323/223493742-0774b913-8e43-4003-8fa8-8a9f270cebb9.gif" alt="ezgif com-video-to-gif" />
<img src="https://user-images.githubusercontent.com/35219323/223493869-4fce26a9-e373-4793-b453-d5fca4ddf7e9.gif" alt="ezgif com-video-to-gif (1)" />
<img src="https://user-images.githubusercontent.com/35219323/223493899-64d64c94-5901-46c9-bc84-b94b64fbb136.gif" alt="ezgif com-video-to-gif (2)" />
<img src="https://user-images.githubusercontent.com/35219323/223493924-9e154765-ee7f-4b22-84c1-1b595fa54cca.gif" alt="ezgif com-video-to-gif (3)" /></p>

<p><br />
사용법은 대략 다음과 같다.</p>

<ol>
  <li>배달 혹은 식사 메이트를 원하는 사용자는 모집 게시글(식당, 모집인원, 약속 장소, 비용 배분 등을 포함)을 올린다.</li>
  <li>게시글들 중 원하는 모집글이 있을 시 사용자는 해당 모집글의 채팅방에 참여할 수 있다.</li>
  <li>채팅방에 모인 사용자들끼리 채팅을 통해 세부적인 일정을 조율한다.</li>
</ol>

<h2 id="그럼-백엔드에서는-어떤-기능을-구성했는가">그럼 백엔드에서는 어떤 기능을 구성했는가?</h2>
<ol>
  <li><code class="language-plaintext highlighter-rouge">spring security</code>와 <code class="language-plaintext highlighter-rouge">jwt</code>를 활용한 회원 인증/인가</li>
  <li><code class="language-plaintext highlighter-rouge">OAuth 2.0</code>을 적용한 소셜 로그인 구현</li>
  <li><code class="language-plaintext highlighter-rouge">PostGIS</code>를 활용한 인근 게시글 조회</li>
  <li><code class="language-plaintext highlighter-rouge">Spring Data JPA</code>의 활용</li>
  <li><code class="language-plaintext highlighter-rouge">swagger</code> API 문서화를 통한 클라이언트와 서버간 소통</li>
</ol>

<p>이 정도가 될 것 같다.</p>

<h2 id="앞으로의-포스팅-예고">앞으로의 포스팅 예고!</h2>
<p>개발하면서 기술적으로 정리해놓고 싶은 부분들과 열심히 삽질했던 스토리들을 적어놓을 생각이다.<br />
spring boot 입문자 기준에서 우여곡절을 겪으며 배웠던 것들을 정리할 예정이다.</p>]]></content><author><name>hi~ June!!</name></author><category term="RUAlone" /><category term="Info" /><summary type="html"><![CDATA[RUAlone(혼자왔니) 혼밥 메이트 구하기 프로젝트]]></summary></entry><entry><title type="html">[자바 코테] java도 itertools가 있었으면 좋겠다..</title><link href="http://localhost:4000/java%20coding%20test/Itertools/" rel="alternate" type="text/html" title="[자바 코테] java도 itertools가 있었으면 좋겠다.." /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/java%20coding%20test/Itertools</id><content type="html" xml:base="http://localhost:4000/java%20coding%20test/Itertools/"><![CDATA[<h2 id="가끔-파이썬-마려운-순간이-있다">가끔 파이썬 마려운 순간이 있다..</h2>
<p>자바에는 아쉽게도 파이썬의 <code class="language-plaintext highlighter-rouge">itertools</code>와 같은 라이브러리가 없다.<br />
따라서 순열, 조합 관련된 코드들은 직접 구현해서 사용해야한다.</p>

<h2 id="조합">조합</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Combination</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">r</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">now</span><span class="o">;</span> <span class="c1">// 현재 조합</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">;</span> <span class="c1">// 모든 조합</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Combination</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">now</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">r</span><span class="o">];</span>
        <span class="k">this</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">combination</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">now</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">temp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
            <span class="o">}</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
        <span class="n">now</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
        <span class="n">combination</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="n">combination</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">depth</span><span class="o">,</span> <span class="n">index</span><span class="o">,</span> <span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Tom"</span><span class="o">,</span> <span class="s">"Jimmy"</span><span class="o">,</span> <span class="s">"Harry"</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">r</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>

        <span class="nc">Combination</span> <span class="n">comb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Combination</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">(),</span> <span class="n">r</span><span class="o">);</span>
        <span class="n">comb</span><span class="o">.</span><span class="na">combination</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">comb</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java Coding Test" /><category term="java" /><summary type="html"><![CDATA[코딩 테스트용 자바 정리]]></summary></entry><entry><title type="html">[자바 코테] java에서 EOF를 처리하는 방법</title><link href="http://localhost:4000/java%20coding%20test/EOF/" rel="alternate" type="text/html" title="[자바 코테] java에서 EOF를 처리하는 방법" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/java%20coding%20test/EOF</id><content type="html" xml:base="http://localhost:4000/java%20coding%20test/EOF/"><![CDATA[<h2 id="입력을-얼마나-줄-것인지-문제에서-정해주지-않을-경우-언제까지-받을-것인가">입력을 얼마나 줄 것인지 문제에서 정해주지 않을 경우 언제까지 받을 것인가..?</h2>
<p>백준 4949번 문제를 풀다가 문제를 잘못 해석해서 삽질했었는데, 나름 의미있는 삽질인 것 같아 정리해본다.</p>

<p>해당 문제에서는 <code class="language-plaintext highlighter-rouge">.</code>이 파일의 입력 종료 조건으로 주어졌는데, 별도의 입력 종료 조건이 주어지지 않았다면 어떻게 해야할까?</p>
<blockquote>
  <p>이건 언어마다 EOF(End Of File)을 어떻게 처리할 것인가를 보면 된다.</p>
</blockquote>

<h2 id="java의-scanner와-bufferedreader에서-eof를-처리하는-방법">Java의 Scanner와 BufferedReader에서 EOF를 처리하는 방법</h2>
<p><code class="language-plaintext highlighter-rouge">Scanner</code>: <code class="language-plaintext highlighter-rouge">NoSuchElementException</code>을 던진다. 따라서 <code class="language-plaintext highlighter-rouge">try-catch</code>로 구성해서 예외를 잡아주면 될 것이다.<br />
<code class="language-plaintext highlighter-rouge">BufferedReader</code>: readLine() 메소드는 <code class="language-plaintext highlighter-rouge">null</code>을 반환한다. 따라서 <code class="language-plaintext highlighter-rouge">null</code>을 trigger로 코드를 짜면 된다.</p>

<h2 id="번외---java에서-file을-읽고-쓰는-것은-어떻게-할까">번외 - Java에서 File을 읽고 쓰는 것은 어떻게 할까?</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// File file = new File("{file_path}");</span>

<span class="c1">// 읽기</span>
<span class="nc">InputStream</span> <span class="n">inStm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="s">"{file_path}"</span><span class="o">);</span>  <span class="c1">// file_path 대신 file 객체를 전달해도 됨</span>
<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="n">inStm</span><span class="o">));</span>

<span class="c1">// 쓰기</span>
<span class="nc">OutputStream</span> <span class="n">outStm</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="s">"{file_path}"</span><span class="o">);</span>  <span class="c1">// file_path 대신 file 객체를 전달해도 됨</span>
<span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="n">outStm</span><span class="o">));</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 사용 예시</span>
<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="nc">String</span> <span class="n">inputFilePath</span> <span class="o">=</span> <span class="s">"/Users/june/Downloads/4949.txt"</span><span class="o">;</span>
        <span class="nc">String</span> <span class="n">outputFilePath</span> <span class="o">=</span> <span class="s">"/Users/june/Downloads/4949_new.txt"</span><span class="o">;</span>

        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileInputStream</span><span class="o">(</span><span class="n">inputFilePath</span><span class="o">)));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">FileOutputStream</span><span class="o">(</span><span class="n">outputFilePath</span><span class="o">)));</span>

        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">input</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>

            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">input</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java Coding Test" /><category term="java" /><summary type="html"><![CDATA[코딩 테스트용 자바 정리]]></summary></entry><entry><title type="html">[2816] 디지털 티비</title><link href="http://localhost:4000/boj/2816/" rel="alternate" type="text/html" title="[2816] 디지털 티비" /><published>2023-04-06T00:00:00+09:00</published><updated>2023-04-06T00:00:00+09:00</updated><id>http://localhost:4000/boj/2816</id><content type="html" xml:base="http://localhost:4000/boj/2816/"><![CDATA[<h2 id="bronze-i-디지털-티비---2816">[Bronze I] 디지털 티비 - 2816</h2>

<p><a href="https://www.acmicpc.net/problem/2816">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14160 KB, 시간: 136 ms</p>

<h3 id="분류">분류</h3>

<p>구현, 구성적</p>

<h3 id="문제-설명">문제 설명</h3>

<p>2012년 12월 31일 새벽 4시부터 지상파 아날로그 TV방송이 종료되었다. TV를 자주보는 할머니를 위해서, 상근이네 집도 디지털 수신기를 구입했다.</p>

<p>원래 상근이네 집에는 KBS1과 KBS2만 나왔다. 할머니는 두 방송만 시청한다. 이제 디지털 수신기와 함께 엄청난 양의 채널을 볼 수 있게 되었다.  하지만, 할머니는 오직 KBS1과 KBS2만 보려고 한다. 따라서, 상근이는 채널 리스트를 조절해 KBS1을 첫 번째로, KBS2를 두 번째로 만들려고 한다.</p>

<p>티비를 켜면 디지털 수신기는 시청 가능한 채널 리스트를 보여준다. 모든 채널의 이름은 서로 다르고, 항상 KBS1과 KBS2를 포함하고 있다. 상근이는 이 리모콘을 이용해서 리스트의 순서를 바꾸는 법을 알아냈다. 리스트의 왼편에는 작은 화살표가 있고, 이 화살표는 현재 선택한 채널을 나타낸다. 가장 처음에 화살표는 제일 첫 번째 채널을 가리키고 있다.</p>

<p>다음과 같은 네 가지 버튼을 이용해서 리스트의 순서를 바꿀 수 있다. 각각은 1번부터 4번까지 번호가 적혀져있는 버튼이다.</p>

<ol>
	<li>화살표를 한 칸 아래로 내린다. (채널 i에서 i+1로)</li>
	<li>화살표를 위로 한 칸 올린다. (채널 i에서 i-1로)</li>
	<li>현재 선택한 채널을 한 칸 아래로 내린다. (채널 i와 i+1의 위치를 바꾼다. 화살표는 i+1을 가리키고 있는다)</li>
	<li>현재 선택한 채널을 위로 한 칸 올린다. (채널 i와 i-1의 위치를 바꾼다. 화살표는 i-1을 가리키고 있다)</li>
</ol>

<p>화살표가 채널 리스트의 범위를 넘어간다면, 그 명령은 무시한다.</p>

<p>현재 채널 리스트의 순서가 주어졌을 때, KBS1를 첫 번째로, KBS2를 두 번째로 순서를 바꾸는 방법을 구하는 프로그램을 작성하시오. 방법의 길이는 500보다 작아야 한다. 두 채널을 제외한 나머지 채널의 순서는 상관없다.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 채널의 수 N이 주어진다. (2 ≤ N ≤ 100)</p>

<p>다음 N개 줄에는 채널의 이름이 한 줄에 하나씩 주어진다. 채널의 이름은 최대 10글자이고, 알파벳 대문자와 숫자로만 이루어져 있다.</p>

<p>이미 KBS1이 첫 번째에, KBS2가 두 번째에 있는 입력은 주어지지 않는다.</p>

<h3 id="출력">출력</h3>

<p>상근이가 눌러야 하는 버튼을 순서대로 공백없이 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<p>사실 좀 더 멋지게 풀고 싶었으나, 별다른 해법이 떠오르지 않아 그냥 <code class="language-plaintext highlighter-rouge">greedy</code>하게 풀었다.<br />
1번과 4번 버튼만 이용해도 차근차근 다 풀 수 있다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="nc">String</span><span class="o">[]</span> <span class="n">channel</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">channel</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c1">// KBS1 설정</span>
        <span class="n">setting</span><span class="o">(</span><span class="n">channel</span><span class="o">,</span> <span class="s">"KBS1"</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

        <span class="c1">// KBS2 설정</span>
        <span class="n">setting</span><span class="o">(</span><span class="n">channel</span><span class="o">,</span> <span class="s">"KBS2"</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">channel</span><span class="o">,</span> <span class="kt">int</span> <span class="n">idx</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">temp</span> <span class="o">=</span> <span class="n">channel</span><span class="o">[</span><span class="n">idx</span><span class="o">];</span>
        <span class="n">channel</span><span class="o">[</span><span class="n">idx</span><span class="o">]</span> <span class="o">=</span> <span class="n">channel</span><span class="o">[</span><span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="o">];</span>
        <span class="n">channel</span><span class="o">[</span><span class="n">idx</span> <span class="o">-</span> <span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="n">temp</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">setting</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">channel</span><span class="o">,</span> <span class="nc">String</span> <span class="n">targetName</span><span class="o">,</span> <span class="kt">int</span> <span class="n">targetIdx</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">kbsIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">channel</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">channel</span><span class="o">[</span><span class="n">i</span><span class="o">].</span><span class="na">equals</span><span class="o">(</span><span class="n">targetName</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">kbsIdx</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">kbsIdx</span> <span class="o">&gt;</span> <span class="n">targetIdx</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">swap</span><span class="o">(</span><span class="n">channel</span><span class="o">,</span> <span class="n">kbsIdx</span><span class="o">--);</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[4949] 균형잡힌 세상</title><link href="http://localhost:4000/boj/4949/" rel="alternate" type="text/html" title="[4949] 균형잡힌 세상" /><published>2023-04-05T00:00:00+09:00</published><updated>2023-04-05T00:00:00+09:00</updated><id>http://localhost:4000/boj/4949</id><content type="html" xml:base="http://localhost:4000/boj/4949/"><![CDATA[<h2 id="silver-iv-균형잡힌-세상---4949">[Silver IV] 균형잡힌 세상 - 4949</h2>

<p><a href="https://www.acmicpc.net/problem/4949">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 48016 KB, 시간: 512 ms</p>

<h3 id="분류">분류</h3>

<p>자료 구조, 문자열, 스택</p>

<h3 id="문제-설명">문제 설명</h3>

<p>세계는 균형이 잘 잡혀있어야 한다. 양과 음, 빛과 어둠 그리고 왼쪽 괄호와 오른쪽 괄호처럼 말이다.</p>

<p>정민이의 임무는 어떤 문자열이 주어졌을 때, 괄호들의 균형이 잘 맞춰져 있는지 판단하는 프로그램을 짜는 것이다.</p>

<p>문자열에 포함되는 괄호는 소괄호("()") 와 대괄호("[]")로 2종류이고, 문자열이 균형을 이루는 조건은 아래와 같다.</p>

<ul>
	<li>모든 왼쪽 소괄호("(")는 오른쪽 소괄호(")")와만 짝을 이뤄야 한다.</li>
	<li>모든 왼쪽 대괄호("[")는 오른쪽 대괄호("]")와만 짝을 이뤄야 한다.</li>
	<li>모든 오른쪽 괄호들은 자신과 짝을 이룰 수 있는 왼쪽 괄호가 존재한다.</li>
	<li>모든 괄호들의 짝은 1:1 매칭만 가능하다. 즉, 괄호 하나가 둘 이상의 괄호와 짝지어지지 않는다.</li>
	<li>짝을 이루는 두 괄호가 있을 때, 그 사이에 있는 문자열도 균형이 잡혀야 한다.</li>
</ul>

<p>정민이를 도와 문자열이 주어졌을 때 균형잡힌 문자열인지 아닌지를 판단해보자.</p>

<h3 id="입력">입력</h3>

<p>각 문자열은 마지막 글자를 제외하고 영문 알파벳, 공백, 소괄호("( )"), 대괄호("[ ]")로 이루어져 있으며, 온점(".")으로 끝나고, 길이는 100글자보다 작거나 같다.</p>

<div>입력의 종료조건으로 맨 마지막에 온점 하나(".")가 들어온다.</div>

<h3 id="출력">출력</h3>

<p>각 줄마다 해당 문자열이 균형을 이루고 있으면 "yes"를, 아니면 "no"를 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<p>2023 소마 2차 코테 1번과 유사한 문제였다고 생각한다.<br />
<code class="language-plaintext highlighter-rouge">stack</code>을 이용하여 풀 수 있었다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">brackets</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"("</span><span class="o">,</span> <span class="s">")"</span><span class="o">,</span> <span class="s">"["</span><span class="o">,</span> <span class="s">"]"</span><span class="o">);</span>

        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"."</span><span class="o">))</span> <span class="k">break</span><span class="o">;</span>   <span class="c1">// EOF trigger (End Of File)</span>

            <span class="c1">// 각 문장을 리스트로 변환</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sentence</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">input</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">)).</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>

            <span class="c1">// 괄호를 넣어줄 stack 선언</span>
            <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>

            <span class="k">for</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">sentence</span><span class="o">)</span> <span class="o">{</span>
                <span class="c1">// 괄호가 아닌 문자는 skip</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">brackets</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">s</span><span class="o">))</span> <span class="o">{</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="o">!</span><span class="n">isPair</span><span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">(),</span><span class="n">s</span><span class="o">))</span> <span class="o">{</span>
                    <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>  <span class="c1">// stack이 비어있거나 짝이 안 맞는 경우 push</span>
                <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                    <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>    <span class="c1">// 짝이 맞으면 pop</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"yes\n"</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"no\n"</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isPair</span><span class="o">(</span><span class="nc">String</span> <span class="n">s1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"("</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">s2</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">")"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"["</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">s2</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"]"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[1991] 트리 순회</title><link href="http://localhost:4000/boj/1991/" rel="alternate" type="text/html" title="[1991] 트리 순회" /><published>2023-04-05T00:00:00+09:00</published><updated>2023-04-05T00:00:00+09:00</updated><id>http://localhost:4000/boj/1991</id><content type="html" xml:base="http://localhost:4000/boj/1991/"><![CDATA[<h2 id="silver-i-트리-순회---1991">[Silver I] 트리 순회 - 1991</h2>

<p><a href="https://www.acmicpc.net/problem/1991">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14236 KB, 시간: 124 ms</p>

<h3 id="분류">분류</h3>

<p>트리, 재귀</p>

<h3 id="문제-설명">문제 설명</h3>

<p>이진 트리를 입력받아 전위 순회(preorder traversal), 중위 순회(inorder traversal), 후위 순회(postorder traversal)한 결과를 출력하는 프로그램을 작성하시오.</p>

<p style="text-align: center;"><img alt="" src="https://www.acmicpc.net/JudgeOnline/upload/201007/trtr.png" style="height:220px; width:265px" /></p>

<p>예를 들어 위와 같은 이진 트리가 입력되면,</p>

<ul>
	<li>전위 순회한 결과 : ABDCEFG // (루트) (왼쪽 자식) (오른쪽 자식)</li>
	<li>중위 순회한 결과 : DBAECFG // (왼쪽 자식) (루트) (오른쪽 자식)</li>
	<li>후위 순회한 결과 : DBEGFCA // (왼쪽 자식) (오른쪽 자식) (루트)</li>
</ul>

<p>가 된다.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에는 이진 트리의 노드의 개수 N(1 ≤ N ≤ 26)이 주어진다. 둘째 줄부터 N개의 줄에 걸쳐 각 노드와 그의 왼쪽 자식 노드, 오른쪽 자식 노드가 주어진다. 노드의 이름은 A부터 차례대로 알파벳 대문자로 매겨지며, 항상 A가 루트 노드가 된다. 자식 노드가 없는 경우에는 .으로 표현한다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에 전위 순회, 둘째 줄에 중위 순회, 셋째 줄에 후위 순회한 결과를 출력한다. 각 줄에 N개의 알파벳을 공백 없이 출력하면 된다.</p>

<h2 id="아이디어">아이디어</h2>
<p>자료구조를 열심히 들었다면 풀 수 있는 문제이다.<br />
트리를 순회하는 기본적인 문제이다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

    <span class="kd">static</span> <span class="nc">Node</span> <span class="n">head</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="sc">'A'</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

            <span class="kt">char</span> <span class="n">root</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">().</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="kt">char</span> <span class="n">left</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">().</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
            <span class="kt">char</span> <span class="n">right</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">().</span><span class="na">charAt</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>

            <span class="n">insertNode</span><span class="o">(</span><span class="n">head</span><span class="o">,</span> <span class="n">root</span><span class="o">,</span><span class="n">left</span><span class="o">,</span><span class="n">right</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">preOrder</span><span class="o">(</span><span class="n">head</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="n">inOrder</span><span class="o">(</span><span class="n">head</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        <span class="n">postOrder</span><span class="o">(</span><span class="n">head</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>


    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span><span class="o">{</span>
        <span class="kt">char</span> <span class="n">value</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">left</span><span class="o">;</span>
        <span class="nc">Node</span> <span class="n">right</span><span class="o">;</span>

        <span class="nc">Node</span><span class="o">(</span><span class="kt">char</span> <span class="n">value</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">left</span><span class="o">,</span> <span class="nc">Node</span> <span class="n">right</span><span class="o">){</span>
            <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">left</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">right</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">insertNode</span><span class="o">(</span><span class="nc">Node</span> <span class="n">temp</span><span class="o">,</span> <span class="kt">char</span> <span class="n">root</span><span class="o">,</span> <span class="kt">char</span> <span class="n">left</span><span class="o">,</span> <span class="kt">char</span> <span class="n">right</span><span class="o">)</span> <span class="o">{</span>


        <span class="k">if</span> <span class="o">(</span><span class="n">temp</span><span class="o">.</span><span class="na">value</span> <span class="o">==</span> <span class="n">root</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">temp</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="o">(</span><span class="n">left</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">left</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="kc">null</span><span class="o">));</span>
            <span class="n">temp</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="o">(</span><span class="n">right</span> <span class="o">==</span> <span class="sc">'.'</span> <span class="o">?</span> <span class="kc">null</span> <span class="o">:</span> <span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">right</span><span class="o">,</span><span class="kc">null</span><span class="o">,</span><span class="kc">null</span><span class="o">));</span>
        <span class="o">}</span>
        <span class="k">else</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">temp</span><span class="o">.</span><span class="na">left</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">insertNode</span><span class="o">(</span><span class="n">temp</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">root</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
            <span class="k">if</span><span class="o">(</span><span class="n">temp</span><span class="o">.</span><span class="na">right</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="n">insertNode</span><span class="o">(</span><span class="n">temp</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">root</span><span class="o">,</span> <span class="n">left</span><span class="o">,</span> <span class="n">right</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">preOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">node</span> <span class="o">==</span><span class="kc">null</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
        <span class="n">preOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="n">preOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">inOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">node</span> <span class="o">==</span><span class="kc">null</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
        <span class="n">inOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
        <span class="n">inOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">postOrder</span><span class="o">(</span><span class="nc">Node</span> <span class="n">node</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">node</span> <span class="o">==</span><span class="kc">null</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
        <span class="n">postOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">);</span>
        <span class="n">postOrder</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[1874] 스택 수열</title><link href="http://localhost:4000/boj/1874/" rel="alternate" type="text/html" title="[1874] 스택 수열" /><published>2023-04-05T00:00:00+09:00</published><updated>2023-04-05T00:00:00+09:00</updated><id>http://localhost:4000/boj/1874</id><content type="html" xml:base="http://localhost:4000/boj/1874/"><![CDATA[<h2 id="silver-ii-스택-수열---1874">[Silver II] 스택 수열 - 1874</h2>

<p><a href="https://www.acmicpc.net/problem/1874">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 28940 KB, 시간: 344 ms</p>

<h3 id="분류">분류</h3>

<p>자료 구조, 스택</p>

<h3 id="문제-설명">문제 설명</h3>

<p>스택 (stack)은 기본적인 자료구조 중 하나로, 컴퓨터 프로그램을 작성할 때 자주 이용되는 개념이다. 스택은 자료를 넣는 (push) 입구와 자료를 뽑는 (pop) 입구가 같아 제일 나중에 들어간 자료가 제일 먼저 나오는 (LIFO, Last in First out) 특성을 가지고 있다.</p>

<p>1부터 n까지의 수를 스택에 넣었다가 뽑아 늘어놓음으로써, 하나의 수열을 만들 수 있다. 이때, 스택에 push하는 순서는 반드시 오름차순을 지키도록 한다고 하자. 임의의 수열이 주어졌을 때 스택을 이용해 그 수열을 만들 수 있는지 없는지, 있다면 어떤 순서로 push와 pop 연산을 수행해야 하는지를 알아낼 수 있다. 이를 계산하는 프로그램을 작성하라.</p>

<h3 id="입력">입력</h3>

<p>첫 줄에 n (1 ≤ n ≤ 100,000)이 주어진다. 둘째 줄부터 n개의 줄에는 수열을 이루는 1이상 n이하의 정수가 하나씩 순서대로 주어진다. 물론 같은 정수가 두 번 나오는 일은 없다.</p>

<h3 id="출력">출력</h3>

<p>입력된 수열을 만들기 위해 필요한 연산을 한 줄에 한 개씩 출력한다. push연산은 +로, pop 연산은 -로 표현하도록 한다. 불가능한 경우 NO를 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<p><code class="language-plaintext highlighter-rouge">stack</code>을 이용하여 문제가 요구하는대로 코드를 짜면 되는 어찌보면 간단한 문제였다.<br />
다만, 전혀 엉뚱한 부분에서 시간을 많이 소요했다.<br />
출력을 <code class="language-plaintext highlighter-rouge">BufferedWriter</code>를 이용하여 해주었는데, 백준에서 자꾸 출력초과가 났었다.<br />
내 예상으로는 이 문제처럼 중간에 error가 나면 No를 출력해주어야하는데, 그 뒤에 버퍼가 제대로 닫히지 않는다던지 하는 문제가 있지 않았나 싶다.<br />
결국은 출력하는 부분만 <code class="language-plaintext highlighter-rouge">StringBuilder</code>를 이용하여 바꿔주었다.<br />
사실 <code class="language-plaintext highlighter-rouge">StringBuilder</code>는 자주 쓰지 않았는데, 앞으로는 얘도 자주쓰면서 익숙해지도록 해야겠다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="kt">boolean</span> <span class="n">err</span> <span class="o">=</span> <span class="kc">false</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="nc">Deque</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">stack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayDeque</span><span class="o">&lt;&gt;();</span>
        <span class="kt">int</span> <span class="n">flag</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">num</span> <span class="o">:</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">||</span> <span class="n">num</span> <span class="o">!=</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">stack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="n">num</span> <span class="o">&lt;</span> <span class="n">stack</span><span class="o">.</span><span class="na">peek</span><span class="o">())</span> <span class="o">{</span>
                    <span class="n">err</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="k">while</span> <span class="o">(</span><span class="n">flag</span> <span class="o">&lt;=</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">stack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">flag</span><span class="o">);</span>
                    <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"+"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
                    <span class="n">flag</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="n">stack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"-"</span><span class="o">).</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">err</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"NO"</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry></feed>