<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-04-10T14:56:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[안드로이드 기초] Chapter 01 - 안드로이드의 개요와 개발환경</title><link href="http://localhost:4000/android%20basic/Chapter01/" rel="alternate" type="text/html" title="[안드로이드 기초] Chapter 01 - 안드로이드의 개요와 개발환경" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-07T00:00:00+09:00</updated><id>http://localhost:4000/android%20basic/Chapter01</id><content type="html" xml:base="http://localhost:4000/android%20basic/Chapter01/"><![CDATA[<h2 id="1-안드로이드-개요">1. 안드로이드 개요</h2>
<ul>
  <li>안드로이드 주요 기능<br />
안드로이드는 모바일 기기를 위한 운영체제로 <code class="language-plaintext highlighter-rouge">안드로이드 SDK</code>는 <code class="language-plaintext highlighter-rouge">JAVA</code> 기반으로 안드로이드 애플리케이션을 개발할 수 있는 <code class="language-plaintext highlighter-rouge">API</code>를 제공하고 있다.
    <ul>
      <li><code class="language-plaintext highlighter-rouge">애플리케이션 프레임워크</code>를 통해서 제공되는 <code class="language-plaintext highlighter-rouge">API</code>를 사용함으로써 코드를 재사용하여 효율적이고 빠른 애플리케이션 개발 가능</li>
      <li>모바일 기기에 최적화된 <code class="language-plaintext highlighter-rouge">달빅</code> 또는 <code class="language-plaintext highlighter-rouge">아트런타임(ART : Android Run Time)</code> 제공</li>
      <li>2D 그래픽 및 3차원 그래픽을 최적화하여 표현</li>
      <li>모바일용 데이터베이스인 <code class="language-plaintext highlighter-rouge">SQLite</code>를 제공</li>
      <li>각종 오디오, 비디오 및 이미지 형식을 지원</li>
      <li>모바일 기기에 내장된 각종 하드웨어(블루투스, 카메라, 센서, WiFi 등) 지원</li>
      <li><code class="language-plaintext highlighter-rouge">이클립스 IDE</code> 또는 <code class="language-plaintext highlighter-rouge">Android Studio</code>를 통해서 강력하고 빠른 개발 환경 제공
<br /><br /></li>
    </ul>
  </li>
  <li>안드로이드의 특징
    <ul>
      <li>안드로이드의 핵심 커널은 <code class="language-plaintext highlighter-rouge">Linux</code>로 구성되어있다. <code class="language-plaintext highlighter-rouge">안드로이드 커널</code>은 이 리눅스 커널에서 모바일용으로 적합한 내용을 추출하여 필요한 기능을 추가한 것이다.</li>
      <li>개발 언어로 <code class="language-plaintext highlighter-rouge">Java</code> 또는 <code class="language-plaintext highlighter-rouge">Kotlin</code>을 사용한다. 더 나아가 <code class="language-plaintext highlighter-rouge">NDK</code>(Native Development Kit)도 제공하기 때문에 C, C++ 기반으로 개발하여 더 빠른 성능과 세밀한 조작까지도 가능하다.</li>
      <li><code class="language-plaintext highlighter-rouge">안드로이드 SDK</code>에 많은 라이브러리를 포함하고 있다. 특히 <code class="language-plaintext highlighter-rouge">SQLite</code>, <code class="language-plaintext highlighter-rouge">OpenGL</code> 등도 지원한다.</li>
      <li>오픈소스를 지향하고, 지속적인 업그레이드를 제공한다.
<br /><br /></li>
    </ul>
  </li>
  <li>안드로이드의 구조<br />
<img src="/assets/images/%5BAndroid-Basic%5DCh01_1.png" alt="Image" />
    <ul>
      <li><code class="language-plaintext highlighter-rouge">응용 프로그램</code>: 사용자가 쓰는 일반적인 응용프로그램</li>
      <li><code class="language-plaintext highlighter-rouge">응용 프로그램 프레임워크</code>: 안드로이드 API가 존재하는 곳. 애플리케이션은 API를 통해 안드로이드 커널에 접근할 수 있음</li>
      <li><code class="language-plaintext highlighter-rouge">안드로이드 런타임</code>: Java 코어 라이브러리, 달빅 가상 머신, 아트 런타임으로 구성됨. Java, Kotlin 등으로 프로그래밍 후 JVM을 쓰지 않고 대신하여 사용함. 모바일 환경에 최적화되어있음.</li>
      <li><code class="language-plaintext highlighter-rouge">라이브러리</code>: 시스템 접근 때문에 Java, Kotlin이 아닌 C로 작성되어 있음. 성능이 뛰어나고 세밀한 조작 가능</li>
      <li><code class="language-plaintext highlighter-rouge">리눅스 커널</code>: 하드웨어의 운영(메모리 관리, 디바이스 드라이버, 보안 등)과 관련된 저수준의 관리 기능이 들어있음.</li>
    </ul>
  </li>
</ul>]]></content><author><name>hi~ June!!</name></author><category term="Android Basic" /><category term="Kotlin" /><summary type="html"><![CDATA[안드로이드 프로그래밍을 시작해보자!!]]></summary></entry><entry><title type="html">[스프링 입문] Section 02 - 스프링 웹 개발 기초</title><link href="http://localhost:4000/spring/Section02/" rel="alternate" type="text/html" title="[스프링 입문] Section 02 - 스프링 웹 개발 기초" /><published>2022-04-07T00:00:00+09:00</published><updated>2022-04-07T00:00:00+09:00</updated><id>http://localhost:4000/spring/Section02</id><content type="html" xml:base="http://localhost:4000/spring/Section02/"><![CDATA[<h2 id="web을-개발하는-3가지-방법">Web을 개발하는 3가지 방법</h2>
<ul>
  <li><code class="language-plaintext highlighter-rouge">정적 컨텐츠</code>: 파일을 그냥 웹 브라우저에 내려주는 것</li>
  <li><code class="language-plaintext highlighter-rouge">MVC와 템플릿 엔진</code>: html, PHP, JSP 같은 파일을 서버에서 프로그래밍해서 동적으로 바꾼 후 내려주는 것</li>
  <li><code class="language-plaintext highlighter-rouge">API</code>: 예를 들자면, 만약 Android나 ios같은 Client랑 개발해야할 떄, ‘jason’이라는 포멧으로 내려주는 것</li>
</ul>

<h2 id="1-정적-컨텐츠">1. 정적 컨텐츠</h2>
<p><img src="/assets/images/section2_1.png" alt="Image" /></p>

<p>1st. 웹 브라우저가 요청을 서버에 넘겨줌<br />
2nd. controller 쪽에서 관련 컨트롤러가 있는지 찾아봄<br />
3rd. 관련 컨트롤러가 없기 떄문에 resources에서 파일을 찾아봄<br />
4th. 별도 변환 과정 없이 그냥 반환해 줌</p>

<h2 id="2-mvc와-템플릿-엔진">2. MVC와 템플릿 엔진</h2>
<p>MVC: <code class="language-plaintext highlighter-rouge">Model</code>, <code class="language-plaintext highlighter-rouge">View</code>, <code class="language-plaintext highlighter-rouge">Controller</code>의 앞 자만 따서 부른다.<br />
<code class="language-plaintext highlighter-rouge">View</code>는 화면과 관련된 일만 하도록, <code class="language-plaintext highlighter-rouge">Controller</code>는 비지니스 로직과 관련된 일만 하도록 <strong><em><span style="color:gold">‘분리’</span></em></strong> 한다는 것이 핵심이다.</p>

<p><img src="/assets/images/section2_2.png" alt="Image" /></p>

<p>1st. 웹 브라우저에서 요청이 들어오면<br />
2nd. 해당 <code class="language-plaintext highlighter-rouge">Controller</code>가 mapping 되어있는 메소드를 찾아서 실행 후<br />
3rd. 반환된 값을 통해 <code class="language-plaintext highlighter-rouge">viewResolver</code>가 해당하는 <code class="language-plaintext highlighter-rouge">view</code>를 찾아주고 템플릿 엔진에 연결시켜줌<br />
4th. 템플릿 엔진은 해당 파일을 렌더링 후 웹 브라우저에 반환해준다.</p>

<h2 id="3-api">3. API</h2>
<p><img src="/assets/images/section2_3.png" alt="Image" /></p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">@ResponseBody</code>를 사용하면
    <ul>
      <li>HTTP의 BODY에 문자 내용을 직접 반환한다.</li>
      <li><code class="language-plaintext highlighter-rouge">viewResolver</code>대신 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>가 동작하는데(spring에 셋팅되어있음)
        <ul>
          <li>기본 문자 처리의 경우: <code class="language-plaintext highlighter-rouge">StringHttpMessageConverter</code></li>
          <li>기본 객체 처리의 경우: <code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code> &lt;-</li>
          <li>기타 등등의 경우에 맞는 여러 <code class="language-plaintext highlighter-rouge">HttpMessageConverter</code>가 기본으로 등록되어있음</li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p>-&gt; <code class="language-plaintext highlighter-rouge">MappingJackson2HttpMessageConverter</code>: 객체를 jason으로 바꿔주는 라이브러리들 중 하나이다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Spring" /><category term="Java" /><summary type="html"><![CDATA[Web을 개발하는 3가지 방법에 대해 알아보자]]></summary></entry><entry><title type="html">[스프링 입문] Section 01 - 프로젝트 환경설정</title><link href="http://localhost:4000/spring/Section01/" rel="alternate" type="text/html" title="[스프링 입문] Section 01 - 프로젝트 환경설정" /><published>2022-04-06T00:00:00+09:00</published><updated>2022-04-06T00:00:00+09:00</updated><id>http://localhost:4000/spring/Section01</id><content type="html" xml:base="http://localhost:4000/spring/Section01/"><![CDATA[<h2 id="1-스프링-프로젝트-생성">1. 스프링 프로젝트 생성</h2>
<h3 id="--스프링-부트-스타터를-이용함">- 스프링 부트 스타터를 이용함</h3>
<p>밑바닥부터 만드는 것이 아닌 boot를 사용하여 시작하도록 한다. (https://start.spring.io)</p>

<h3 id="--프로젝트-선택">- 프로젝트 선택</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Project</code>: Gradle Project</li>
  <li><code class="language-plaintext highlighter-rouge">Spring Boot</code>: 가장 최신 버전</li>
  <li><code class="language-plaintext highlighter-rouge">Language</code>: Java</li>
  <li><code class="language-plaintext highlighter-rouge">Java</code>: 11</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Gradle Project</code>: 필요한 라이브러리를 땡겨오고, 빌드하는 Life Cycle까지 관리해주는 Tool로써, 과거 maven에서 요즘은 graddle로 바뀌는 추세라고 한다.</p>

<h3 id="--project-metadata">- Project Metadata</h3>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Group Id</code>: hello</li>
  <li><code class="language-plaintext highlighter-rouge">artifactId</code>: hello- spring</li>
</ul>

<p><code class="language-plaintext highlighter-rouge">artifact</code>: 빌드되어 나오는 결과물</p>

<h3 id="--dependencies">- Dependencies</h3>
<p>‘라이브러리 간 의존관계’를 말하는 것으로 여기서는 어떤 라이브러리를 가져다 쓸 것인지 선택하는 것이다.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Spring Web</code></li>
  <li><code class="language-plaintext highlighter-rouge">Thymeleaf</code></li>
</ul>

<p><code class="language-plaintext highlighter-rouge">Thymeleaf</code>: html을 만들어주는 템플릿 엔진</p>

<h2 id="2-라이브러리를-살펴보자">2. 라이브러리를 살펴보자</h2>
<p>Gradle은 의존관계가 있는 라이브러리를 함께 다운로드 한다.<br />
main 과 test의 폴더가 나뉘어져 있음 -&gt; test code의 중요성을 의미한다.</p>
<h3 id="--스프링-부트-라이브러리">- 스프링 부트 라이브러리</h3>
<ul>
  <li>spring-boot-starter-web
    <ul>
      <li><code class="language-plaintext highlighter-rouge">spring-boot-starter-tomcat</code>: 톰캣(웹서버)</li>
      <li>spring-webmvc: 스프링 웹 MVC</li>
    </ul>
  </li>
  <li>spring-boot-starter-thymeleaf: 타임리프 템플릿 엔진(View)</li>
  <li>spring-boot-starter(공통): 스프링부트 + 스프링 코어 + 로깅
    <ul>
      <li>spring-boot
        <ul>
          <li>spring-core</li>
        </ul>
      </li>
      <li>spring-boot-starter-logging
        <ul>
          <li><code class="language-plaintext highlighter-rouge">logback</code>, <code class="language-plaintext highlighter-rouge">slf4j</code></li>
        </ul>
      </li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">spring-boot-starter-tomcat</code>: 과거엔 웹 서버에 java code를 직접 밀어 넣는 방식이었는데, 지금은 소스 라이브러리에 웹 서버가 내장되어 있다.<br />
<code class="language-plaintext highlighter-rouge">logback</code>, <code class="language-plaintext highlighter-rouge">slf4j</code>: 이 두 라이브러리를 주로 많이 쓴다고 한다.<br />
<code class="language-plaintext highlighter-rouge">log</code>에 대하여: 결과값 출력을 system에 하지 않고 log로 출력하는 이유는 로그 파일도 따로 관리가 되고, 심각한 에러 발생 시에 따로 모아서 볼 수도 있기 때문이다.</p>

<h3 id="--테스트-라이브러리">- 테스트 라이브러리</h3>
<ul>
  <li>spring-boot-starter-test
    <ul>
      <li><code class="language-plaintext highlighter-rouge">junit</code>: 테스트 프레임워크</li>
      <li><code class="language-plaintext highlighter-rouge">mockito</code>: 목 라이브러리</li>
      <li><code class="language-plaintext highlighter-rouge">assertj</code>: 테스트 코드를 좀 더 편하게 작성하게 도와주는 라이브러리</li>
      <li><code class="language-plaintext highlighter-rouge">spring-test</code>: 스프링 통합 테스트 지원</li>
    </ul>
  </li>
</ul>

<p><code class="language-plaintext highlighter-rouge">junit</code>: 자바에서 테스트할 때 주로 쓰는 라이브러리로 요즘 4에서 5로 넘어가는 추세라고 한다.</p>

<h2 id="3-welcome-page를-통해-동작-과정을-알아보자">3. Welcome Page를 통해 동작 과정을 알아보자</h2>
<p><img src="/assets/images/section1.png" alt="image" />
<br />
<br />
1st. 웹 브라우저가 서버에 요청하면<br />
2nd. Mapping 되어 있는 것을 찾아서<br />
3rd. 해당 controller에 있는 메소드를 실행한다.<br />
4th. controller가 반환한 값을 받아 viewResolver가 화면을 찾아 처리해준다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Spring" /><category term="Java" /><summary type="html"><![CDATA[프로젝트를 만들어봅시다.]]></summary></entry></feed>