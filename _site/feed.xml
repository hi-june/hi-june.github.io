<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-09-29T14:58:37+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 01 - Let’s Start Java</title><link href="http://localhost:4000/java%20lang/Chap01/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 01 - Let’s Start Java" /><published>2022-09-29T00:00:00+09:00</published><updated>2022-09-29T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap01</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap01/"><![CDATA[<h2 id="01-1-자바의-세계로-오신-여러분을-환영합니다">01-1. 자바의 세계로 오신 여러분을 환영합니다.</h2>
<h3 id="--jdk">- JDK</h3>
<p>자바로 프로그램을 만들기 위해서는 그에 따른 기본 도구가 필요하다.<br />
이 도구를 가리켜 <code class="language-plaintext highlighter-rouge">JDK(Java Development Kit)</code>라고 한다.<br />
쉽게 말하면 자바 프로그램 개발을 위한 도구들의 모임 정도로 보면 될 것 같다.<br />
<a href="https://www.oracle.com">https://www.oracle.com</a>로 가서 받도록 하자!</p>

<h3 id="--환경변수">- 환경변수</h3>
<p>명령 프롬프트의 어느 경로에서든 실행 가능하도록 환경변수 Path에 등록해준다.<br />
환경변수 Path는 운영체제가 명령 프롬프트에서 입력된 실행파일을 찾는 경로의 정보가 된다.<br />
따라서 명령 프롬프트에서 디렉토리 경로에 상관없이 실행되기를 원하는 실행파일이 있다면<br />
<u>이 실행파일이 저장되어 있는 경로 정보를 환경변수 Path에 등록해야 한다.</u></p>

<p>본인은 Mac OS를 사용중이기 때문에 zprofile에 Java SDK 경로를 추가해줬다.</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># java SDK path
export JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk-11.0.16.jdk/Contents/Home
</code></pre></div></div>

<h2 id="01-2-자바-프로그램과-실행의-원리에-대한-이해">01-2. 자바 프로그램과 실행의 원리에 대한 이해</h2>
<h3 id="--자바-프로그램의-실행-구조와-자바-가상머신">- 자바 프로그램의 실행 구조와 자바 가상머신</h3>
<ul>
  <li><b>일반적인 프로그램의 실행 구조</b><br />
<img src="/assets/images/java-lang/1-1.png" alt="image" width="40%" height="40%" /><br />
    <ol>
      <li>하드웨어를 기반으로</li>
      <li>운영체제가 동작하고,</li>
      <li>그 위에서 프로그램이 실행되는 구조이다.</li>
    </ol>

    <p>즉, 하드웨어 위에서 실행되는 운영체제가 프로그램을 실행시키는 구조이다.</p>
  </li>
  <li><b>자바 프로그램의 실행 구조</b><br />
<img src="/assets/images/java-lang/1-2.png" alt="image" width="40%" height="40%" /><br />
    <ol>
      <li>운영체제는 자바 가상머신을 실행시키고,</li>
      <li>자바 가상머신이 자바 프로그램을 실행시키는 구조로 동작한다.<br />
  <br /></li>
    </ol>
  </li>
  <li><b>자바 가상머신(JVM)이란?</b><br />
  운영체제 위에서 동작하는 일종의 소프트웨어이다.<br />
  <img src="/assets/images/java-lang/1-3.png" alt="image" width="50%" height="50%" /><br />
  이처럼 운영체제가 직접 실행시키는 구조가 아닌 자바 가상머신에 의해 실행되는 구조를 선택할 경우,<br />
  <u>자바 프로그램을 운영체제에 상관없이 실행시킬 수 있다.</u></li>
</ul>

<h3 id="--자바-컴파일러와-자바-바이트코드">- 자바 컴파일러와 자바 바이트코드</h3>
<blockquote>
  <p>자바 컴파일러는 자바 가상머신이 이해할 수 있는 코드를 생성해닌다.</p>
</blockquote>

<p><img src="/assets/images/java-lang/1-4.png" alt="image" width="80%" height="80%" /><br /></p>

<p>자바 컴파일러(javac.exe): 소스파일에 저장된 소스코드를 자바 가상머신이 이해할 수 있는 ‘자바 바이트코드’로 변환하는 프로그램<br />
자바 런처(java.exe): 자바 가상머신을 구동하고 그 위에 자바 프로그램이 실행되도록 돕는 프로그램이다.</p>

<h2 id="01-3-첫-번째-자바-프로그램의-관찰과-응용">01-3. 첫 번째 자바 프로그램의 관찰과 응용</h2>
<h3 id="--프로그램의-골격과-구성">- 프로그램의 골격과 구성</h3>
<p><img src="/assets/images/java-lang/1-5.png" alt="image" width="60%" height="60%" /><br /></p>

<blockquote>
  <p>자바는 중괄호를 이용해서 클래스와 메소드의 영역을 구분한다.<br /></p>
</blockquote>

<blockquote>
  <p>문장의 끝에는 반드시 세미콜론을 붙여서 문장의 끝을 표시한다.</p>
</blockquote>

<h2 id="01-4-들여쓰기와-컴파일의-대상에서-제외되는-주석">01-4. 들여쓰기와 컴파일의 대상에서 제외되는 주석!</h2>
<h3 id="--블록-단위-주석">- 블록 단위 주석</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/*
안녕하세요?
블록 단위 주석입니다.
*/</span>
</code></pre></div></div>

<h3 id="--행-단위-주석">- 행 단위 주석</h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 안녕하세요? 행 단위 주석입니다.</span>
</code></pre></div></div>

<h3 id="--들여쓰기indent">- 들여쓰기(Indent)</h3>
<p>영역 또는 의미의 구분을 위해서 일정 간격 왼쪽에서 띄운 후에 문장을 입력하는 것을 말한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SystemOutPrintln</span><span class="o">{</span>
    <span class="c1">// 4칸 정도 오른쪽으로 들여쓰기 되었다.</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="c1">// main 메소드 내에서 4칸 정도 오른쪽으로 들여쓰기 되었다.</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hi~ June!"</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--중괄호를-열고-닫는-방식에-대하여">- 중괄호를 열고 닫는 방식에 대하여</h3>
<p>일반적인 중괄호 처리 방식은 다음과 같이<br />
클래스의 이름 오른편에, 그리고 메소드의 이름 오른편에 여는 중괄호를 위치시킨다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">SystemOutPrintln</span><span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">){</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"hi~ June!"</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><category term="language" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[스프링 부트와 JPA 활용 1] Section 01 - 프로젝트 환경설정</title><link href="http://localhost:4000/springboot-jpa/Section01/" rel="alternate" type="text/html" title="[스프링 부트와 JPA 활용 1] Section 01 - 프로젝트 환경설정" /><published>2022-09-14T00:00:00+09:00</published><updated>2022-09-27T00:00:00+09:00</updated><id>http://localhost:4000/springboot-jpa/Section01</id><content type="html" xml:base="http://localhost:4000/springboot-jpa/Section01/"><![CDATA[<h2 id="개발-순서-안내">개발 순서 안내</h2>
<p>일반적인 개발의 순서와 같은 방식으로 진행한다.</p>

<ol>
  <li>개발 환경 세팅</li>
  <li>요구사항 분석</li>
  <li>도메인 모델 설계</li>
  <li>엔티티 설계</li>
  <li>테이블 설계</li>
  <li>JPA로 엔티티와 테이블을 ORM 메핑</li>
  <li>애플리케이션 아키텍처 구성</li>
  <li>핵심 비즈니스 로직 개발</li>
</ol>

<h2 id="프로젝트-생성">프로젝트 생성</h2>
<p>스프링 부트 스타터를 이용하여 초기 세팅을 한다. -&gt; <a href="https://start.spring.io/">https://start.spring.io/</a></p>

<p>사용 기능: web, thymeleaf, jpa, h2, lombok(반복 코드를 줄여주는 라이브러리), validation</p>

<h2 id="jpa와-db-설정">JPA와 DB 설정</h2>
<p>yml 파일을 이용하여 설정을 해준다.</p>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># main/resources/application.yml</span><span class="w">

</span><span class="n">spring</span><span class="o">:</span><span class="w">
  </span><span class="n">datasource</span><span class="o">:</span><span class="w">
    </span><span class="n">url</span><span class="o">:</span><span class="w">  </span><span class="n">jdbc</span><span class="o">:</span><span class="n">h2</span><span class="o">:</span><span class="n">tcp</span><span class="o">://</span><span class="n">localhost</span><span class="o">/~/</span><span class="n">Study</span><span class="o">/</span><span class="n">springboot</span><span class="o">-</span><span class="n">jpa</span><span class="o">/</span><span class="n">jpashop</span><span class="w">
    </span><span class="n">username</span><span class="o">:</span><span class="w"> </span><span class="n">sa</span><span class="w">
    </span><span class="n">password</span><span class="o">:</span><span class="w">
    </span><span class="n">driver</span><span class="o">-</span><span class="n">class</span><span class="o">-</span><span class="n">name</span><span class="o">:</span><span class="w"> </span><span class="n">org.h2.Driver</span><span class="w">

  </span><span class="n">jpa</span><span class="o">:</span><span class="w">
    </span><span class="n">hibernate</span><span class="o">:</span><span class="w">
      </span><span class="n">ddl</span><span class="o">-</span><span class="n">auto</span><span class="o">:</span><span class="w"> </span><span class="n">create</span><span class="w">  </span><span class="c1"># 애플리케이션 실행 시점에 테이블을 drop하고, 다시 생성한다.</span><span class="w">
    </span><span class="n">properties</span><span class="o">:</span><span class="w"> </span><span class="c1"># hibernate와 관련된 특정한 properties를 쓸 수 있음</span><span class="w">
      </span><span class="n">hibernate</span><span class="o">:</span><span class="w">
        </span><span class="n">format_sql</span><span class="o">:</span><span class="w"> </span><span class="n">true</span><span class="w">
        </span><span class="c1">#show_sql: true</span><span class="w">

</span><span class="n">logging.level</span><span class="o">:</span><span class="w">
  </span><span class="n">org.hibernate.SQL</span><span class="o">:</span><span class="w"> </span><span class="n">debug</span><span class="w">
  </span><span class="n">org.hibernate.type</span><span class="o">:</span><span class="w"> </span><span class="n">trace</span><span class="w">
</span></code></pre></div></div>

<h2 id="실제-동작-확인">실제 동작 확인</h2>
<p>간단한 회원 엔티티와 리포지토리를 만들고, 테스트 코드를 통해 동작을 확인해보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Member.java</span>

<span class="kn">package</span> <span class="nn">jpabook.jpashop</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">lombok.Getter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Setter</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>

<span class="nd">@Entity</span>
<span class="nd">@Getter</span> <span class="nd">@Setter</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>

    <span class="nd">@Id</span> <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberRepository.java</span>

<span class="kn">package</span> <span class="nn">jpabook.jpashop</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.EntityManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.PersistenceContext</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberRepository</span> <span class="o">{</span>

    <span class="nd">@PersistenceContext</span> <span class="c1">// spring-boot가 이 어노테이션이 있으면 entity manager를 주입해준다.</span>
    <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">// command성이기 때문에 return값을 따로 안 만든다.</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>  <span class="c1">// 왜 member를 반환하지 않나: command랑 query를 분리해라..</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">find</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberRepositoryTest.java</span>

<span class="kn">package</span> <span class="nn">jpabook.jpashop</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.assertj.core.api.Assertions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.Test</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.runner.RunWith</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.boot.test.context.SpringBootTest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.annotation.Rollback</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.test.context.junit4.SpringRunner</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.Transactional</span><span class="o">;</span>


<span class="nd">@RunWith</span><span class="o">(</span><span class="nc">SpringRunner</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>    <span class="c1">// JUnit에게 spring과 관련된 것으로 테스트를 할 것이라고 알려줌</span>
<span class="nd">@SpringBootTest</span> <span class="c1">// spring-boot로 테스트 할 거니까 추가</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberRepositoryTest</span> <span class="o">{</span>

    <span class="nd">@Autowired</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="nd">@Test</span>
    <span class="nd">@Transactional</span>  <span class="c1">// EntityManager를 통한 모든 데이터 변경은 항상 Transaction 안에서 이루어져야 함!</span>
    <span class="c1">// @Rollback(false)    // 기본적으로 test의 반복적 수행을 위해 한 번 수행 이후 roll back 되지만 눈으로 확인하고 싶다면 이 옵션을 사용하면 됨!</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">testMember</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// given</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>   <span class="c1">// member를 생성하고</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="s">"memberA"</span><span class="o">);</span>  <span class="c1">// 이름 설정 후</span>

        <span class="c1">// when</span>
        <span class="nc">Long</span> <span class="n">savedId</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>   <span class="c1">// save한 뒤</span>
        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">savedId</span><span class="o">);</span> <span class="c1">// id를 기반으로 찾아봤을 때</span>

        <span class="c1">// then</span>
        <span class="nc">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>    <span class="c1">// member의 id 기반 확인</span>
        <span class="nc">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getUsername</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>    <span class="c1">// member의 username 기반 확인</span>

        <span class="c1">// 같은 transaction 안에서 저장하고 조회하면 영속성 context가 똑같음. 같은 영속성 context 안에서는 id 값이 같으면 같은 엔티티로 인식</span>
        <span class="nc">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">(</span><span class="n">findMember</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"findMember == member: "</span><span class="o">+(</span><span class="n">findMember</span> <span class="o">==</span> <span class="n">member</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="SpringBoot-JPA" /><category term="java" /><category term="spring boot" /><summary type="html"><![CDATA[Spring Boot web application]]></summary></entry><entry><title type="html">[스프링 입문] Section 07 - AOP</title><link href="http://localhost:4000/spring-tutorial/Section07/" rel="alternate" type="text/html" title="[스프링 입문] Section 07 - AOP" /><published>2022-09-13T00:00:00+09:00</published><updated>2022-09-14T00:00:00+09:00</updated><id>http://localhost:4000/spring-tutorial/Section07</id><content type="html" xml:base="http://localhost:4000/spring-tutorial/Section07/"><![CDATA[<h2 id="aop란">AOP란?</h2>
<p>AOP는 Aspect Oriented Programming의 약자로 ‘관점 지향 프로그래밍’이라고 불린다.<br />
관점 지향은 어떤 로직을 기준으로 핵심적인 관점, 부가적인 관점으로 나누어서 보고 그 관점을 기준으로 각각 모듈화하겠다는 것이다.</p>

<p>AOP에서 각 관점을 기준으로 로직을 모듈화한다는 것은 코드들을 부분적으로 나누어서 모듈화하겠다는 의미다.<br />
이때, 소스 코드상에서 다른 부분에 계속 반복해서 쓰는 코드들을 발견할 수 있는 데 이것을 흩어진 관심사 (Crosscutting Concerns)라 부른다. </p>

<p>위와 같이 흩어진 관심사를 Aspect로 모듈화하고 핵심적인 비즈니스 로직에서 분리하여 재사용하겠다는 것이 AOP의 취지다.</p>

<h2 id="aop가-필요한-상황">AOP가 필요한 상황</h2>
<p>‘모든 메소드의 호출 시간을 측정하고 싶다!’는 상황을 가정해보자.<br />
<u>시간 측정 로직</u>은 ‘핵심 관심 사항’과 ‘공통 관심 사항’ 중 <u>공통 관심 사항</u>에 해당할 것이다.</p>

<h3 id="--그냥-해보자">- <u>그냥 해보자..</u></h3>
<p><img src="/assets/images/Spring-Tutorial/7-1.png" alt="Image" width="80%" height="80%" /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.hellospring.service</span><span class="o">;</span>

<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>
    
    <span class="cm">/**
    * 회원가입
    */</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">join</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="n">validateDuplicateMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">//중복 회원 검증</span>
            <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">finish</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
            <span class="kt">long</span> <span class="n">timeMs</span> <span class="o">=</span> <span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"join "</span> <span class="o">+</span> <span class="n">timeMs</span> <span class="o">+</span> <span class="s">"ms"</span><span class="o">);</span>
        <span class="o">}</span> 
    <span class="o">}</span>

    <span class="cm">/**
    *전체 회원 조회
    */</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findMembers</span><span class="o">()</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">finish</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
            <span class="kt">long</span> <span class="n">timeMs</span> <span class="o">=</span> <span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"findMembers "</span> <span class="o">+</span> <span class="n">timeMs</span> <span class="o">+</span> <span class="s">"ms"</span><span class="o">);</span>
        <span class="o">}</span> 
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>자, 이렇게 되면 문제가 무엇이냐?<br />
일단, 기능 별로 하나 하나씩 직접 코드를 넣어준다는 것은 말이 안 된다.<br />
또, 시간을 측정하는 기능은 핵심 관심 사항이 아닌 공통 관심 사항이다.<br />
따라서, 이렇게 시간 측정 로직과 핵심 비즈니스 로식이 섞이게 되면 추후 유지보수가 힘들어진다.</p>

<h3 id="--aop를-적용-해보자">- <u>AOP를 적용 해보자..!</u></h3>
<p><img src="/assets/images/Spring-Tutorial/7-2.png" alt="Image" width="80%" height="80%" /><br />
<br />앞선 문제 상황을 공통 관심 사항과 핵심 관심 사항을 분리하여 해결해보자!</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.hellospring.aop</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.aspectj.lang.ProceedingJoinPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Around</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.aspectj.lang.annotation.Aspect</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="nd">@Component</span>
<span class="nd">@Aspect</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TimeTraceAop</span> <span class="o">{</span>
    
    <span class="nd">@Around</span><span class="o">(</span><span class="s">"execution(* hello.hellospring..*(..))"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">Object</span> <span class="nf">execute</span><span class="o">(</span><span class="nc">ProceedingJoinPoint</span> <span class="n">joinPoint</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Throwable</span> <span class="o">{</span>
        <span class="kt">long</span> <span class="n">start</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"START: "</span> <span class="o">+</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">proceed</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="kt">long</span> <span class="n">finish</span> <span class="o">=</span> <span class="nc">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">();</span>
            <span class="kt">long</span> <span class="n">timeMs</span> <span class="o">=</span> <span class="n">finish</span> <span class="o">-</span> <span class="n">start</span><span class="o">;</span>

            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"END: "</span> <span class="o">+</span> <span class="n">joinPoint</span><span class="o">.</span><span class="na">toString</span><span class="o">()+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">timeMs</span> <span class="o">+</span> <span class="s">"ms"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>시간을 측정하는 로직을 별도의 공통 로직으로 만들었다.<br />
이렇게 구성할 경우,</p>

<p>핵심 관심사항을 깔끔하게 유지할 수 있고,<br />
변경이 필요할 경우 이 로직만 변경하면 되며,<br />
원하는 적용 대상을 선택할 수도 있게 되었다!</p>

<h2 id="스프링의-aop-동작-방식">스프링의 AOP 동작 방식</h2>
<h3 id="--aop-적용-전">- <u>AOP 적용 전</u></h3>
<p><img src="/assets/images/Spring-Tutorial/7-3.png" alt="Image" width="75%" height="75%" /></p>

<h3 id="--aop-적용-후">- <u>AOP 적용 후</u></h3>
<p><img src="/assets/images/Spring-Tutorial/7-4.png" alt="Image" width="75%" height="75%" /></p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://www.inflearn.com/questions/48156">https://www.inflearn.com/questions/48156</a><br />
[AOP(TimeTraceAop)를 @Component 로 선언 vs SpringConfig에 @Bean으로 등록]<br />
2) <a href="https://engkimbs.tistory.com/746">https://engkimbs.tistory.com/746</a> [[Spring] 스프링 AOP (Spring AOP) 총정리 : 개념, 프록시 기반 AOP, @AOP]</p>]]></content><author><name>hi~ June!!</name></author><category term="Spring-Tutorial" /><category term="java" /><category term="spring" /><summary type="html"><![CDATA[Spring Introduction]]></summary></entry><entry><title type="html">[스프링 입문] Section 05 - 회원 관리 예제(웹 MVC 개발)</title><link href="http://localhost:4000/spring-tutorial/Section05/" rel="alternate" type="text/html" title="[스프링 입문] Section 05 - 회원 관리 예제(웹 MVC 개발)" /><published>2022-09-05T00:00:00+09:00</published><updated>2022-09-06T00:00:00+09:00</updated><id>http://localhost:4000/spring-tutorial/Section05</id><content type="html" xml:base="http://localhost:4000/spring-tutorial/Section05/"><![CDATA[<h2 id="file-tree-참고하기">File Tree 참고하기</h2>
<p><img src="/assets/images/Spring-Tutorial/5-1.png" alt="Image" width="65%" height="65%" /></p>

<h2 id="홈-화면">홈 화면</h2>
<p>홈 컨트롤러를 추가해준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// HomeController.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.GetMapping</span><span class="o">;</span>

<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HomeController</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">home</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"home"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Q) ‘/’ 요청 시, index.html 대신 hello.html이 호출되는 이유?<br />
A) 컨트롤러가 정적 파일보다 우선순위가 높기 때문이다.</p>

<h2 id="회원-등록">회원 등록</h2>
<p>1) 웹 등록 화면에서 데이터를 전달 받을 폼 객체를 만들어야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberForm.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.controller</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberForm</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span> 
<span class="o">}</span>
</code></pre></div></div>
<p><br />
2) 회원 등록용 폼 컨트롤러 제작</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberController.java</span>
<span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">MemberController</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/members/new"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">createForm</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"members/createMemberForm"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
3) 회원 컨트롤러에서 회원을 실제 등록하는 기능을 구현</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberController.java</span>
<span class="nd">@PostMapping</span><span class="o">(</span><span class="n">value</span> <span class="o">=</span> <span class="s">"/members/new"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">create</span><span class="o">(</span><span class="nc">MemberForm</span> <span class="n">form</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>   <span class="c1">// 멤버를 생성하고</span>
    
    <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">form</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span> <span class="c1">// 폼으로부터 이름을 가져와 member의 이름을 설정하고</span>
    <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member</span><span class="o">);</span> <span class="c1">// memberService를 통해 생성한 member를 저장한다.</span>
    
    <span class="k">return</span> <span class="s">"redirect:/"</span><span class="o">;</span>    <span class="c1">// 회원 가입 완료 후 다시 home 화면으로 돌아가도록 만든다.</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="회원-조회">회원 조회</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberController.java</span>
<span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/members"</span><span class="o">)</span>
<span class="kd">public</span> <span class="nc">String</span> <span class="nf">list</span><span class="o">(</span><span class="nc">Model</span> <span class="n">model</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findMembers</span><span class="o">();</span>
    <span class="n">model</span><span class="o">.</span><span class="na">addAttribute</span><span class="o">(</span><span class="s">"members"</span><span class="o">,</span> <span class="n">members</span><span class="o">);</span>
    <span class="k">return</span> <span class="s">"members/memberList"</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Spring-Tutorial" /><category term="java" /><category term="spring" /><summary type="html"><![CDATA[Spring Introduction]]></summary></entry><entry><title type="html">[스프링 입문] Section 06 - 스프링 DB 접근 기술</title><link href="http://localhost:4000/spring-tutorial/Section06/" rel="alternate" type="text/html" title="[스프링 입문] Section 06 - 스프링 DB 접근 기술" /><published>2022-09-05T00:00:00+09:00</published><updated>2022-09-13T00:00:00+09:00</updated><id>http://localhost:4000/spring-tutorial/Section06</id><content type="html" xml:base="http://localhost:4000/spring-tutorial/Section06/"><![CDATA[<h2 id="spring-db-접근-기술의-발전">spring DB 접근 기술의 발전</h2>
<p><img src="/assets/images/Spring-Tutorial/6-1.png" alt="Image" width="75%" height="75%" /><br />
<br />
application과 DB의 연결을 sql을 통해 한다.<br />
자바 진영에서 DB에 sql을 통해 접근 하기 위한 기술들을 간략히 알아보자!</p>

<h3 id="--순수-jdbc-기술">- <u>순수 Jdbc 기술</u></h3>
<p>말 그대로 <code class="language-plaintext highlighter-rouge">JDBC API</code>로 직접 코딩하는 것을 말한다. 직접 필요한 자원들을 가지고 connection을 얻고, db에 sql을 쏘고, 사용한 자원을 반환하는 등 필요한 과정을 하나하나 직접 만드는 기술이다.</p>

<h3 id="--jdbc-template">- <u>JDBC Template</u></h3>
<p>순수 <code class="language-plaintext highlighter-rouge">JDBC</code> 기술에서 <code class="language-plaintext highlighter-rouge">spring</code>이 편의를 제공해준 것으로, 반복되는 코드를 줄이고, application에서 DB로 sql을 편리하게 날려준다. 다만, 아직까지는 sql을 개발자가 직접 짜야한다.</p>

<h3 id="--jpa">- <u>JPA</u></h3>
<p>sql조차도 개발자들이 직접 짜는게 아니라 sql을 <code class="language-plaintext highlighter-rouge">JPA</code>라는 기술이 DB에 직접 등록, 수정, 삭제, 조회 등의 query를 날려준다. 객체를 바로 DB에 query없이 저장이 가능하다.</p>

<h3 id="--spring-data-jpa">- <u>Spring Data JPA</u></h3>
<p><code class="language-plaintext highlighter-rouge">spring</code>에 맞춰 더 사용하기 편리하도록 감싼 기술이다.</p>

<h2 id="h2-데이터베이스-설치">H2 데이터베이스 설치</h2>
<p>먼저 h2 데이터베이스를 설치하고 member 테이블을 만들자.</p>

<div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">-- ddl.sql</span>

<span class="k">drop</span> <span class="k">table</span> <span class="n">if</span> <span class="k">exists</span> <span class="n">member</span> <span class="k">CASCADE</span><span class="p">;</span>
    <span class="k">create</span> <span class="k">table</span> <span class="n">member</span>
    <span class="p">(</span>
        <span class="n">id</span>   <span class="nb">bigint</span> <span class="k">generated</span> <span class="k">by</span> <span class="k">default</span> <span class="k">as</span> <span class="k">identity</span><span class="p">,</span>   <span class="c1">-- id 필드를 추가 안 했을 시 자동으로 추가해줌</span>
        <span class="n">name</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span>
        <span class="k">primary</span> <span class="k">key</span> <span class="p">(</span><span class="n">id</span><span class="p">)</span>
<span class="p">);</span>
</code></pre></div></div>

<h2 id="spring--db-사전-설정">spring &amp; DB 사전 설정</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// build.gradle</span>
<span class="n">dependencies</span><span class="o">{</span>
    <span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">jdbc</span><span class="err">'</span>  <span class="c1">// // java는 DB랑 붙으려면 jdbc 드라이버가 꼭 있어야 함</span>
    <span class="n">runtimeOnly</span> <span class="err">'</span><span class="n">com</span><span class="o">.</span><span class="na">h2database</span><span class="o">:</span><span class="n">h2</span><span class="err">'</span> <span class="c1">// DB랑 붙을 때 DB가 제공하는 클라이언트가 필요해서 넣어줌</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># application.properties</span><span class="w">
</span><span class="c1"># 스프링 부트를 이용한 접속 정보 등록</span><span class="w">
</span><span class="n">spring.datasource.url</span><span class="o">=</span><span class="n">jdbc</span><span class="o">:</span><span class="n">h2</span><span class="o">:</span><span class="n">tcp</span><span class="o">://</span><span class="n">localhost</span><span class="o">/~/</span><span class="n">Study</span><span class="o">/</span><span class="n">spring</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">test</span><span class="w">
</span><span class="n">spring.datasource.driver</span><span class="o">-</span><span class="n">class</span><span class="o">-</span><span class="n">name</span><span class="o">=</span><span class="n">org.h2.Driver</span><span class="w">
</span><span class="n">spring.datasource.username</span><span class="o">=</span><span class="n">sa</span><span class="w">
</span></code></pre></div></div>

<h2 id="springconfig와-ocp">springConfig와 OCP</h2>
<h3 id="--ocp란">- <u>OCP란?</u></h3>
<p><code class="language-plaintext highlighter-rouge">OCP</code>, 개방-폐쇄 원칙(OCP, Open-Closed Principle)이란, 확장에는 열려있고, 수정, 변경에는 닫혀있다는 내용!<br />
스프링의 <code class="language-plaintext highlighter-rouge">DI</code> (Dependencies Injection)을 사용하면 기존 코드를 전혀 손대지 않고, 설정만으로 구현 클래스를 변경할 수 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>

    <span class="cm">/*
    DataSource는 데이터베이스 커넥션을 획득할 때 사용하는 객체이다.
    스프링 부트는 데이터베이스 커넥션 정보를 바탕으로 DataSource를 생성하고 스프링 빈으로 만들어둔다. 그래서 DI를 받을 수 있다.
     */</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">SpringConfig</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// MemberRepository의 코드 변경 없이 SpringConfig의 수정만으로 Repository의 종류를 바꿀 수 있다!</span>
        <span class="c1">//return new MemoryMemberRepository();</span>
        <span class="c1">//return new JdbcMemberRepository(dataSource);</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JdbcTemplateMemberRepository</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="순수-jdbc">순수 Jdbc</h2>
<p>JDBC API로 직접 코딩하는 것은 옛날 이야기라고 한다. 참고만 하고 넘어가자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JdbcMemberRepository.java</span>

<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.datasource.DataSourceUtils</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.sql.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcMemberRepository</span> <span class="kd">implements</span> <span class="nc">MemberRepository</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>    <span class="c1">// DB에 붙으려면 DataSource가 필요</span>

    <span class="kd">public</span> <span class="nf">JdbcMemberRepository</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>    <span class="c1">// 스프링이 DB 접속 정보를 통해 DataSource를 만들어 놓으면 spring을 통해 DataSource를 주입받으면 됨</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"insert into member(name) values(?)"</span><span class="o">;</span>
        <span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">conn</span> <span class="o">=</span> <span class="n">getConnection</span><span class="o">();</span> <span class="c1">// connection 가져오고</span>
            <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span>
                    <span class="nc">Statement</span><span class="o">.</span><span class="na">RETURN_GENERATED_KEYS</span><span class="o">);</span>   <span class="c1">// connection에 sql 쏘고</span>
            <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
            <span class="n">pstmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>  <span class="c1">// DB에 쿼리가 날아감</span>
            <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">getGeneratedKeys</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="mi">1</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">SQLException</span><span class="o">(</span><span class="s">"id 조회 실패"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">close</span><span class="o">(</span><span class="n">conn</span><span class="o">,</span> <span class="n">pstmt</span><span class="o">,</span> <span class="n">rs</span><span class="o">);</span> <span class="c1">// 작업이 끝나고 사용한 자원들 release</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"select * from member where id = ?"</span><span class="o">;</span>
        <span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">conn</span> <span class="o">=</span> <span class="n">getConnection</span><span class="o">();</span>
            <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
            <span class="n">pstmt</span><span class="o">.</span><span class="na">setLong</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
            <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
                <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">));</span>
                <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
                <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">close</span><span class="o">(</span><span class="n">conn</span><span class="o">,</span> <span class="n">pstmt</span><span class="o">,</span> <span class="n">rs</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"select * from member"</span><span class="o">;</span>
        <span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">conn</span> <span class="o">=</span> <span class="n">getConnection</span><span class="o">();</span>
            <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
            <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">members</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="k">while</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
                <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">));</span>
                <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
                <span class="n">members</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">members</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">close</span><span class="o">(</span><span class="n">conn</span><span class="o">,</span> <span class="n">pstmt</span><span class="o">,</span> <span class="n">rs</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"select * from member where name = ?"</span><span class="o">;</span>
        <span class="nc">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">PreparedStatement</span> <span class="n">pstmt</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="nc">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="n">conn</span> <span class="o">=</span> <span class="n">getConnection</span><span class="o">();</span>
            <span class="n">pstmt</span> <span class="o">=</span> <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">);</span>
            <span class="n">pstmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">name</span><span class="o">);</span>
            <span class="n">rs</span> <span class="o">=</span> <span class="n">pstmt</span><span class="o">.</span><span class="na">executeQuery</span><span class="o">();</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
                <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">));</span>
                <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span>
                <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="n">e</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">finally</span> <span class="o">{</span>
            <span class="n">close</span><span class="o">(</span><span class="n">conn</span><span class="o">,</span> <span class="n">pstmt</span><span class="o">,</span> <span class="n">rs</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">Connection</span> <span class="nf">getConnection</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">DataSourceUtils</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>   <span class="c1">// DataSource로부터 connection을 얻고, 닫아야 함</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">(</span><span class="nc">Connection</span> <span class="n">conn</span><span class="o">,</span> <span class="nc">PreparedStatement</span> <span class="n">pstmt</span><span class="o">,</span> <span class="nc">ResultSet</span> <span class="n">rs</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">rs</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">rs</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">pstmt</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">pstmt</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">conn</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">close</span><span class="o">(</span><span class="n">conn</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SQLException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">e</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">close</span><span class="o">(</span><span class="nc">Connection</span> <span class="n">conn</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">SQLException</span> <span class="o">{</span>
        <span class="nc">DataSourceUtils</span><span class="o">.</span><span class="na">releaseConnection</span><span class="o">(</span><span class="n">conn</span><span class="o">,</span> <span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="스프링-jdbc-template">스프링 JDBC Template</h2>
<p>JDBC API의 반복 코드를 대부분 제거해준다. 다만 아직 SQL은 직접 작성해야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JdbcTemplateMemberRepository</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.JdbcTemplate</span><span class="o">;</span>  <span class="c1">// JdbcTemplate이나 MyBatis 같은 라이브러리는 JDBC API에서 본 반복 코드를 대부분 제거해준다. 다만, 여전히 sql은 직접 작성해야한다.</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.RowMapper</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.namedparam.MapSqlParameterSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.jdbc.core.simple.SimpleJdbcInsert</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JdbcTemplateMemberRepository</span> <span class="kd">implements</span> <span class="nc">MemberRepository</span><span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">JdbcTemplate</span> <span class="n">jdbcTemplate</span><span class="o">;</span>

    <span class="c1">// @Autowired   // 생성자가 하나일 경우 Autowired 생략 가능</span>
    <span class="kd">public</span> <span class="nf">JdbcTemplateMemberRepository</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">jdbcTemplate</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JdbcTemplate</span><span class="o">(</span><span class="n">dataSource</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SimpleJdbcInsert</span> <span class="n">jdbcInsert</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SimpleJdbcInsert</span><span class="o">(</span><span class="n">jdbcTemplate</span><span class="o">);</span>
        <span class="n">jdbcInsert</span><span class="o">.</span><span class="na">withTableName</span><span class="o">(</span><span class="s">"member"</span><span class="o">).</span><span class="na">usingGeneratedKeyColumns</span><span class="o">(</span><span class="s">"id"</span><span class="o">);</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">parameters</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">parameters</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>

        <span class="nc">Number</span> <span class="n">key</span> <span class="o">=</span> <span class="n">jdbcInsert</span><span class="o">.</span><span class="na">executeAndReturnKey</span><span class="o">(</span><span class="k">new</span> <span class="nc">MapSqlParameterSource</span><span class="o">(</span><span class="n">parameters</span><span class="o">));</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">longValue</span><span class="o">());</span>

        <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"select * from member where id = ?"</span><span class="o">,</span> <span class="n">memberRowMapper</span><span class="o">(),</span> <span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">findAny</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"select * from member where name = ?"</span><span class="o">,</span> <span class="n">memberRowMapper</span><span class="o">(),</span> <span class="n">name</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">findAny</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">jdbcTemplate</span><span class="o">.</span><span class="na">query</span><span class="o">(</span><span class="s">"select * from member"</span><span class="o">,</span> <span class="n">memberRowMapper</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">RowMapper</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">memberRowMapper</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">rs</span><span class="o">,</span> <span class="n">rowNum</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
            <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="s">"id"</span><span class="o">));</span> <span class="c1">// query문에서 id랑</span>
            <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">getString</span><span class="o">(</span><span class="s">"name"</span><span class="o">));</span> <span class="c1">// name을 뽑아냄</span>
            <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
        <span class="o">};</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="jpa">JPA</h2>
<p>JPA는 표준 인터페이스이다. hibernate, eclipse 등이 구현체로 있다.(여러 업체들이 구현한다고 보면 된다.)<br />
JPA를 사용하면 ‘SQL과 데이터 중심의 설계’에서 ‘객체 중심의 설계’로 패러다임을 전환할 수 있다.</p>

<h3 id="--buildgradle-파일에-jpa-h2-데이터베이스-관련-라이브러리-추가">- <u>build.gradle 파일에 JPA, h2 데이터베이스 관련 라이브러리 추가</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// build.gradle</span>

<span class="n">dependencies</span> <span class="o">{</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">thymeleaf</span><span class="err">'</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">web</span><span class="err">'</span>
	<span class="c1">// implementation 'org.springframework.boot:spring-boot-starter-jdbc'	// java는 DB랑 붙으려면 jdbc 드라이버가 꼭 있어야 함</span>
	<span class="n">implementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">data</span><span class="o">-</span><span class="n">jpa</span><span class="err">'</span>	<span class="c1">// JPA 사용을 위한 구문 추가. 내부에 jdbc 관련 라이브러리를 포함하기 때문에 윗 줄은 제거해도 됨</span>

	<span class="n">testImplementation</span> <span class="err">'</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">boot</span><span class="o">:</span><span class="n">spring</span><span class="o">-</span><span class="n">boot</span><span class="o">-</span><span class="n">starter</span><span class="o">-</span><span class="n">test</span><span class="err">'</span>

	<span class="n">runtimeOnly</span> <span class="err">'</span><span class="n">com</span><span class="o">.</span><span class="na">h2database</span><span class="o">:</span><span class="n">h2</span><span class="err">'</span>	<span class="c1">// DB랑 붙을 때 DB가 제공하는 클라이언트가 필요해서 넣어줌</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--스프링-부트에-jpa-설정-추가">- <u>스프링 부트에 JPA 설정 추가</u></h3>
<div class="language-s highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># application.properties</span><span class="w">

</span><span class="c1"># 스프링 부트를 이용한 접속 정보 등록</span><span class="w">
</span><span class="n">spring.datasource.url</span><span class="o">=</span><span class="n">jdbc</span><span class="o">:</span><span class="n">h2</span><span class="o">:</span><span class="n">tcp</span><span class="o">://</span><span class="n">localhost</span><span class="o">/~/</span><span class="n">Study</span><span class="o">/</span><span class="n">spring</span><span class="o">-</span><span class="n">tutorial</span><span class="o">/</span><span class="n">test</span><span class="w">
</span><span class="n">spring.datasource.driver</span><span class="o">-</span><span class="n">class</span><span class="o">-</span><span class="n">name</span><span class="o">=</span><span class="n">org.h2.Driver</span><span class="w">
</span><span class="n">spring.datasource.username</span><span class="o">=</span><span class="n">sa</span><span class="w">

</span><span class="c1"># JPA 관련 설정 추가</span><span class="w">
</span><span class="c1"># jpa가 날리는 sql을 볼 수 있음</span><span class="w">
</span><span class="n">spring.jpa.show</span><span class="o">-</span><span class="n">sql</span><span class="o">=</span><span class="n">true</span><span class="w">
</span><span class="c1"># jpa를 쓰면 객체를 보고 테이블을 자동으로 생성해줌. 하지만 예제에서는 이미 만들어진 테이블을 사용할 것이기 때문에 none으로 설정함(create를 사용하면 엔티티 정보를 바탕으로 테이블도 직접 생성해준다.)</span><span class="w">
</span><span class="n">spring.jpa.hibernate.ddl</span><span class="o">-</span><span class="n">auto</span><span class="o">=</span><span class="n">none</span><span class="w">
</span></code></pre></div></div>

<h3 id="--jpa-엔티티-매핑">- <u>JPA 엔티티 매핑</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Member.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.domain</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.Entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.GeneratedValue</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.GenerationType</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.persistence.Id</span><span class="o">;</span>

<span class="nd">@Entity</span> <span class="c1">// JPA가 관리하는 엔티티라고 표시함</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span> <span class="c1">// db에 추가하면 id를 자동으로 만들어주는 전략(strategy)을 Identity라고 함</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>    <span class="c1">// 사용자 지정이 아닌 시스템이 지정해주는 id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div></div>

<h3 id="--jpa-회원-리포지토리">- <u>JPA 회원 리포지토리</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// JpaMemberRepository.java</span>

<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.EntityManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JpaMemberRepository</span> <span class="kd">implements</span> <span class="nc">MemberRepository</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>
    <span class="cm">/**
    JPA는 Entity Manager를 이용하여 모든 동작을 함.
    data-jpa로부터 spring boot가 현재 database랑 연결을 하여 자동으로 EntityManager를 생성해주니까 그냥 주입받아서 쓰면 됨
    */</span>

    <span class="kd">public</span> <span class="nf">JpaMemberRepository</span><span class="o">(</span><span class="nc">EntityManager</span> <span class="n">em</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">em</span> <span class="o">=</span> <span class="n">em</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">em</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span>  <span class="n">em</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">id</span><span class="o">);</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// jpql이라는 객체지향쿼리언어를 사용(테이블 대상 쿼리문이 아닌 객체를 대상으로 하는 쿼리문이다.)</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select m from Member m where m.name = :name"</span><span class="o">,</span> <span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"name"</span><span class="o">,</span> <span class="n">name</span><span class="o">)</span>
                <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">findAny</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">em</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span><span class="s">"select m from Member m"</span><span class="o">,</span> <span class="nc">Member</span><span class="o">.</span><span class="na">class</span><span class="o">).</span><span class="na">getResultList</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="-서비스-계층에-트랜잭션-추가">-<u>서비스 계층에 트랜잭션 추가</u></h3>
<p>스프링은 해당 클래스의 메서드를 실행할 때 트랜잭션을 시작하고,<br />
메서드가 정상 종료되면 트랜색션을 커밋한다.<br />
만약 런타임 예외가 발생하면 롤백한다.</p>

<blockquote>
  <p>JPA를 통한 모든 데이터 변경은 트랜잭션 안에서 실행해야 한다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberService.java</span>

<span class="kn">import</span> <span class="nn">org.springframework.transaction.annotation.Transactional</span><span class="o">;</span>

<span class="nd">@Transactional</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{}</span>
</code></pre></div></div>

<h3 id="-jpa를-사용하도록-스프링-설정-변경">-<u>JPA를 사용하도록 스프링 설정 변경</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SpringConfig.java</span>

<span class="kn">package</span> <span class="nn">hello.hellospring</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.repository.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.service.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.EntityManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">SpringConfig</span><span class="o">(</span><span class="nc">DataSource</span> <span class="n">dataSource</span><span class="o">,</span> <span class="nc">EntityManager</span> <span class="n">em</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dataSource</span> <span class="o">=</span> <span class="n">dataSource</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">em</span> <span class="o">=</span> <span class="n">em</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">());</span>
    <span class="o">}</span>

   <span class="nd">@Bean</span>
   <span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository</span><span class="o">()</span> <span class="o">{</span>    <span class="c1">// MemberRepository의 코드 변경 없이 SpringConfig의 수정만으로 Repository의 종류를 바꿀 수 있다!</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">JpaMemberRepository</span><span class="o">(</span><span class="n">em</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="스프링-데이터-jpa">스프링 데이터 JPA</h2>
<blockquote>
  <p>스프링 데이터 JPA는 JPA를 편리하게 사용하도록 도와주는 기술이다.</p>
</blockquote>

<p>스프링 데이터 JPA를 이용하면,<br />
리포지토리에 구현 클래스 없이 인터페이스 만으로 개발을 완료할 수 있고, 기본 CRUD 기능도 제공해준다.</p>

<h3 id="--스프링-데이터-jpa-회원-리포지토리">- <u>스프링 데이터 JPA 회원 리포지토리</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// SpringDataJpaMemberRepository.java</span>

<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.data.jpa.repository.JpaRepository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="c1">// spring data jpa가 jpaRepository를 갖고 있으면, 구현체를 자동으로 만들어주고 spring bean에 자동으로 등록해줌</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SpringDataJpaMemberRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;,</span> <span class="nc">MemberRepository</span> <span class="o">{</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--스프링-설정-변경">- <u>스프링 설정 변경</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.hellospring</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.repository.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.service.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.persistence.EntityManager</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.sql.DataSource</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">SpringConfig</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Spring-Tutorial" /><category term="java" /><category term="spring" /><category term="h2" /><summary type="html"><![CDATA[Spring Introduction]]></summary></entry><entry><title type="html">[스프링 입문] Section 04 - 스프링 빈과 의존관계</title><link href="http://localhost:4000/spring-tutorial/Section04/" rel="alternate" type="text/html" title="[스프링 입문] Section 04 - 스프링 빈과 의존관계" /><published>2022-09-04T00:00:00+09:00</published><updated>2022-09-04T00:00:00+09:00</updated><id>http://localhost:4000/spring-tutorial/Section04</id><content type="html" xml:base="http://localhost:4000/spring-tutorial/Section04/"><![CDATA[<h2 id="들어가며">들어가며…</h2>
<p>화면을 붙이고 싶음 -&gt; 컨트롤러와 뷰 템플릿 필요<br />
‘멤버 컨트롤러’가 ‘멤버 서비스’를 통해서 회원가입 하고, 데이터를 조회할 수 있어야 함<br />
‘멤버 컨트롤러’와 ‘멤버 서비스’ -&gt; 서로 의존관계가 있다.(멤버 컨트롤러가 멤버 서비스를 의존한다.)</p>

<h2 id="spring의-주요-개념-ioc--di">spring의 주요 개념 IOC &amp; DI</h2>
<p>앞으로 등장할 스프링 컨테이너와 스프링 빈을 이해하기 위해선 Spring의 가장 큰 특징인 <code class="language-plaintext highlighter-rouge">IOC</code>와 <code class="language-plaintext highlighter-rouge">DI</code>에 대해서 알아야 한다.</p>

<h3 id="--제어의-역전-ioc-inversion-of-control">- <u>제어의 역전 (`IOC`, Inversion Of Control)</u></h3>
<p>일반적인 자바 프로그램에서는 각 객체들이 ‘프로그램의 흐름을 결정’하고 ‘각 객체를 직접 생성하고 조작하는 작업(객체를 직접 생성하여 메소드 호출)’을 했다.</p>
<blockquote>
  <p>즉, 모든 작업을 사용자가 제어하는 구조!</p>
</blockquote>

<p>예를 들어 A 객체에서 B 객체에 있는 메소드를 사용하고 싶으면, B 객체를 직접 A 객체 내에서 생성하고 메소드를 호출한다.</p>

<p>하지만 <code class="language-plaintext highlighter-rouge">IOC</code>가 적용된 경우, 객체의 생성을 ‘특별한 관리 위임 주체’에게 맡긴다.<br />
이 경우 사용자는 객체를 직접 생성하지 않고, 객체의 생명주기를 컨트롤하는 주체는 다른 주체가 된다.</p>
<blockquote>
  <p>즉, 사용자의 제어권을 다른 주체에게 넘기는 것을 <code class="language-plaintext highlighter-rouge">IOC</code>(제어의 역전) 라고 한다.</p>
</blockquote>

<p>요약하면 Spring의 <code class="language-plaintext highlighter-rouge">Ioc</code>란<br />
클래스 내부의 객체 생성 -&gt; 의존성 객체의 메소드 호출이 아닌,<br />
‘스프링에게 제어를 위임’하여 스프링이 만든 객체를 주입 -&gt; 의존성 객체의 메소드 호출 구조이다.</p>

<p>스프링에서는 모든 의존성 객체를 스프링이 실행될때 만들어주고 필요한 곳에 주입해준다.</p>

<h3 id="--의존성-주입-di-dependency-injection">- <u>의존성 주입 (`DI`, Dependency Injection)</u></h3>
<p>어떤 객체(B)를 사용하는 주체(A)가 객체(B)를 직접 생성하는게 아니라</p>
<blockquote>
  <p>객체를 외부(Spring)에서 생성해서 사용하려는 주체 객체(A)에 주입시켜주는 방식이다.</p>
</blockquote>

<p>사용하는 주체(A)가 사용하려는 객체(B)를 직접 생성하는 경우 의존성(변경사항이 있는 경우 서로에게 영향을 많이 준다)이 높아진다.</p>
<blockquote>
  <p>하지만, 외부(Spring)에서 직접 생성하여 관리하는 경우에는 A와 B의 의존성이 줄어든다.</p>
</blockquote>

<p>자세한 건 뒤 쪽 코드를 보며 살펴보자.</p>

<h2 id="스프링-컨테이너와-스프링-빈">스프링 컨테이너와 스프링 빈</h2>
<h3 id="--스프링-컨테이너">- <u>스프링 컨테이너</u></h3>
<p>‘스프링 컨테이너’는 ‘스프링 빈’의 생명 주기를 관리하며, 생성된 스프링 빈들에게 추가적인 기능을 제공하는 역할을 한다. <code class="language-plaintext highlighter-rouge">IoC</code>와 <code class="language-plaintext highlighter-rouge">DI</code>의 원리가 스프링 컨테이너에 적용된다.</p>

<p>개발자는 new 연산자, 인터페이스 호출, 팩토리 호출 방식으로 객체를 생성하고 소멸하지만, 스프링 컨테이너를 사용하면 해당 역할을 대신해 준다. 즉, 제어 흐름을 외부에서 관리하게 된다. 또한, 객체들 간의 의존 관계를 스프링 컨테이너가 런타임 과정에서 알아서 만들어 준다.</p>

<h3 id="--스프링-빈">- <u>스프링 빈</u></h3>
<p>Spring에서는 직접 new를 이용하여 생성한 객체가 아니라, Spring에 의하여 관리당하는 자바 객체를 사용한다. 이렇게 Spring에 의하여 생성되고 관리되는 자바 객체를 Bean이라고 한다.</p>

<h2 id="스프링-빈을-등록하는-방법">스프링 빈을 등록하는 방법</h2>
<p><img src="/assets/images/Spring-Tutorial/4-1.png" alt="Image" /><br /><br />
스프링은 스프링이 뜰 때, 스프링 컨테이너에 객체를 생성해서 넣어두고 관리한다.</p>
<blockquote>
  <p>이것을 <u>스프링 컨테이너에서 스프링 빈이 관리된다.</u>고 한다.</p>
</blockquote>

<h3 id="--컴포넌트-스캔과-자동-의존관계-설정">- <u>컴포넌트 스캔과 자동 의존관계 설정</u></h3>
<p><code class="language-plaintext highlighter-rouge">@Component</code> 애노테이션이 있으면 스프링 빈으로 자동 등록된다.</p>

<p>1) <code class="language-plaintext highlighter-rouge">@Controller</code><br />
2) <code class="language-plaintext highlighter-rouge">@Service</code><br />
3) <code class="language-plaintext highlighter-rouge">@Repository</code></p>

<p>위의 세 가지 애노테이션 모두 <code class="language-plaintext highlighter-rouge">@Component</code>을 포함하기 때문에 스프링 빈으로 자동 등록된다.<br />
생성자에 <code class="language-plaintext highlighter-rouge">@Autowired</code>를 사용하면 객체 생성 시점에서 스프링 컨테이너에서 해당 스프링 빈을 찾아서 주입한다.</p>

<blockquote>
  <p>주로 정형화된 컨트롤러, 서비스, 리포리토리 같은 코드는 컴포넌트 스캔을 사용한다.</p>
</blockquote>

<p>코드를 살펴보자!</p>

<p>1) MemberController</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberController.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.service.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>

<span class="nd">@Controller</span> <span class="c1">// Controller라는 어노테이션이 있으면, 스프링이 스프링 컨테이너(스프링 뜰 때 생김)에 객체를 생성해서 넣어두고 관리 == 스프링 컨테이너에서 스프링 빈이 관리된다</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="cm">/*
    컨트롤러가 MemberService를 가져다 써야하는데..

    private final MemberService memberService = new MemberService();
    스프링이 관리를 하게 되면, 다 스프링 컨테이너에 등록을 하고, 스프링 컨테이너로부터 받아서 쓰도록 바꾸어야 함
    이런 식으로 new 해서 인스턴스를 직접 생성해서 쓴다면, 다른 여러 컨트롤러가 MemberService를 가져다 쓰는 등의 상황에서 각각 다른 인스턴스를 사용하는 것이 되기 때문에
    하나만 생성해놓고 공유해서 쓰는 것이 좋다.
     */</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="cm">/*
    1. 스프링이 뜸
    2. 스프링 컨테이너 생김
    3. 생성자 호출
    4. 스프링이 스프링 컨테이너에 있는 memberService를 컨트롤러에 자동으로 연결해줌(Autowired)
     */</span>
    <span class="kd">public</span> <span class="nf">MemberController</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// 오류 뜨는 이유: 서비스에 어노테이션이 등록되어 있지 않다.</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
2) MemberService</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberService.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="nd">@Service</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>
    <span class="c1">// private final MemberRepository memberRepository = new MemoryMemberRepository(); // 기존 방식: MemberService가 MemoryMemberRepository를 직접 생성하게 함</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">MemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// MemberService 코드를 DI 가능하게 변경한다.</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 회원가입
     */</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">join</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">validateDuplicateMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>    <span class="c1">// 중복 회원 검증</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">validateDuplicateMember</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>   <span class="c1">// 회원 리포지토리에서 멤버 이름으로 찾아서</span>
                <span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="o">{</span>   <span class="c1">// 만약 존재한다면</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"이미 존재하는 회원입니다."</span><span class="o">);</span>  <span class="c1">// 이미 존재한다고 예외를 던지게끔 설계</span>
                <span class="o">});</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 전체 회원 조회
     */</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findMembers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findOne</span><span class="o">(</span><span class="nc">Long</span> <span class="n">memberId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br />
3) MemoryMemberRepository</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemoryMemberRepository.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryMemberRepository</span> <span class="kd">implements</span> <span class="nc">MemberRepository</span><span class="o">{</span>

    <span class="c1">// 실무에서는 동시성 문제가 있을 수 있어서 이렇게 공유되는 변수일 때는...</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Member</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>   <span class="c1">// ConcurrentHashMap을 사용함</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">sequence</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>  <span class="c1">// AtomicLong을 사용함</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(++</span><span class="n">sequence</span><span class="o">);</span>   <span class="c1">// sequence로 id 설정</span>
        <span class="n">store</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">);</span>  <span class="c1">// store라는 map 객체에 &lt;id, member&gt;인 객체 추가</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">store</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>  <span class="c1">// 해당 id를 가진 객체가 없는데 조회를 할 경우, null 처리를 위해 ofNullable로 감싸줌</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>  <span class="c1">// 3. 반환</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">member</span> <span class="o">-&gt;</span> <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>    <span class="c1">// 1. member.getName() 과 name이 같은지 확인하여</span>
                <span class="o">.</span><span class="na">findAny</span><span class="o">();</span> <span class="c1">// 2. 같은 걸 하나라도 찾으면</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// store는 map인데, 반환은 리스트로 되어 있음 -&gt; java에서 실무할 땐 루프 돌리기도 쉽고 해서 리스트를 많이 쓴다고 함</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clearStore</span><span class="o">(){</span>
        <span class="n">store</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--자바-코드로-직접-스프링-빈-등록하기">- <u>자바 코드로 직접 스프링 빈 등록하기</u></h3>
<p>SpringConfig 파일을 만들어 자바 코드로 직접 스프링 빈을 등록할 수 있다.</p>

<blockquote>
  <p>상황에 따라 구현 클래스를 변경해야 하면 설정을 통해 스프링 빈으로 등록한다.</p>
</blockquote>

<p>예를 들자면, MemoryMemberRepository 를 DB와 연결하는 repository로 바꾸는 등의 상황이 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">hello.hellospring</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.service.MemberService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Bean</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>

<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConfig</span> <span class="o">{</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberService</span> <span class="nf">memberService</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">MemberRepository</span> <span class="nf">memberRepository</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">MemoryMemberRepository</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="di-3가지-방법">DI 3가지 방법</h2>
<p>1) 필드 주입<br />
추천하지 않음. 뭔가 중간에 바꿀 수 있는 방법이 아예 없음.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="nd">@Autowired</span> <span class="kd">private</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<p>2) setter 주입<br />
누군가가 MemberController를 호출했을 때 public으로 열려있어야 함.<br />
setMemberService를 한 번 세팅을 하면 중간에 바꿀 이유가 없는데도 불구하고 public하게 노출되어야 한다는 단점이 있음.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setMemberService</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>3) 생성자 주입<br />
생성자를 통해 memberService가 memberController에 주입되고 있다.<br />
이처럼 생성자를 통해서 방법을 생성자 주입이라고 한다.<br />
의존관계가 실행중에 동적으로 변하는 경우는 거의 없으므로 생성자 주입을 권장한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Controller</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberController</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="nf">MemberController</span><span class="o">(</span><span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberService</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://steady-coding.tistory.com/594">https://steady-coding.tistory.com/594</a> [Spring Bean 총 정리]<br />
2) <a href="https://melonicedlatte.com/2021/07/11/232800.html">https://melonicedlatte.com/2021/07/11/232800.html</a> [스프링 빈(Spring Bean)이란? 개념 정리]</p>]]></content><author><name>hi~ June!!</name></author><category term="Spring-Tutorial" /><category term="java" /><category term="spring" /><summary type="html"><![CDATA[Spring Introduction]]></summary></entry><entry><title type="html">[스프링 입문] Section 03 - 회원 관리 예제(백엔드 개발)</title><link href="http://localhost:4000/spring-tutorial/Section03/" rel="alternate" type="text/html" title="[스프링 입문] Section 03 - 회원 관리 예제(백엔드 개발)" /><published>2022-09-03T00:00:00+09:00</published><updated>2022-09-03T00:00:00+09:00</updated><id>http://localhost:4000/spring-tutorial/Section03</id><content type="html" xml:base="http://localhost:4000/spring-tutorial/Section03/"><![CDATA[<h2 id="비즈니스-요구사항-정리">비즈니스 요구사항 정리</h2>
<ul>
  <li>데이터: 회원 ID, 이름</li>
  <li>기능: 회원 등록, 조회</li>
  <li>아직 Database를 결정하지 않았다고 가정</li>
</ul>

<h3 id="--일반적인-web-application-계층-구조">- <u>일반적인 Web Application 계층 구조</u></h3>
<p><img src="/assets/images/Spring-Tutorial/3-1.png" alt="Image" /><br /></p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">Controller</code>: 웹 MVC의 컨트롤러 역할</li>
  <li><code class="language-plaintext highlighter-rouge">Service</code>: 핵심 비즈니스 로직 구현, 비즈니스 도메인 객체를 가지고 서비스 로직이 돌아가도록 구현한 계층(ex. 회원은 중복 가입이 안 된다거나 하는 등의 것들)</li>
  <li><code class="language-plaintext highlighter-rouge">Repository</code>: 데이터베이스에 접근, 도메인 객체를 DB에 저장하고 관리함</li>
  <li><code class="language-plaintext highlighter-rouge">Domain</code>: 비즈니스 도메인 객체 (ex. 회원, 주문, 쿠폰 등등 주로 데이터베이스에 저장하고 관리됨)</li>
</ul>

<h3 id="--클래스-의존관계">- <u>클래스 의존관계</u></h3>
<p><img src="/assets/images/Spring-Tutorial/3-2.png" alt="Image" width="75%" height="75%" /><br /></p>
<ul>
  <li>아직 Database가 선정되지 않은 상황이므로, Interface로 구현 클래스롤 변경할 수 있도록 설계</li>
  <li>Database는 RDB, NoSQL 등등 다양한 경우를 고민중인 상황으로 가정</li>
  <li>개발을 진행하기 위해서 초기 개발 단계에서는 구현체로 가벼운 메모리 기반의 데이터 저장소 사용</li>
</ul>

<h2 id="file-tree-참고하기">File Tree 참고하기</h2>
<p><img src="/assets/images/Spring-Tutorial/3-3.png" alt="Image" width="75%" height="75%" /></p>

<h2 id="회원-도메인과-리포지토리-만들기">회원 도메인과 리포지토리 만들기</h2>
<h3 id="--member-객체">- <u>Member 객체</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Member.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.domain</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Member</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">id</span><span class="o">;</span>    <span class="c1">// 사용자 지정이 아닌 시스템이 지정해주는 id</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setId</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">setName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--memberrepository-인터페이스">- <u>MemberRepository 인터페이스</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberRepository.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">MemberRepository</span> <span class="o">{</span>
    <span class="nc">Member</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">);</span>

    <span class="c1">// 회원의 id나 name이 없을 경우, 단순히 null을 반환하는 대신, optional로 감싸서 반환하는 방식이 요즘 더 선호됨</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">);</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">);</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--memorymemberrepository-구현체">- <u>MemoryMemberRepository 구현체</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemoryMemberRepository.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemoryMemberRepository</span> <span class="kd">implements</span> <span class="nc">MemberRepository</span><span class="o">{</span>

    <span class="c1">// 실무에서는 동시성 문제가 있을 수 있어서 이렇게 공유되는 변수일 때는...</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Long</span><span class="o">,</span> <span class="nc">Member</span><span class="o">&gt;</span> <span class="n">store</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>   <span class="c1">// ConcurrentHashMap을 사용함</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">long</span> <span class="n">sequence</span> <span class="o">=</span> <span class="mi">0L</span><span class="o">;</span>  <span class="c1">// AtomicLong을 사용함</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Member</span> <span class="nf">save</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setId</span><span class="o">(++</span><span class="n">sequence</span><span class="o">);</span>   <span class="c1">// sequence로 id 설정</span>
        <span class="n">store</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">member</span><span class="o">);</span>  <span class="c1">// store라는 map 객체에 &lt;id, member&gt;인 객체 추가</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findById</span><span class="o">(</span><span class="nc">Long</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="n">store</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">id</span><span class="o">));</span>  <span class="c1">// 해당 id를 가진 객체가 없는데 조회를 할 경우, null 처리를 위해 ofNullable로 감싸줌</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findByName</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">().</span><span class="na">stream</span><span class="o">()</span>  <span class="c1">// 3. 반환</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">member</span> <span class="o">-&gt;</span> <span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">name</span><span class="o">))</span>    <span class="c1">// 1. member.getName() 과 name이 같은지 확인하여</span>
                <span class="o">.</span><span class="na">findAny</span><span class="o">();</span> <span class="c1">// 2. 같은 걸 하나라도 찾으면</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span> <span class="c1">// store는 map인데, 반환은 리스트로 되어 있음 -&gt; java에서 실무할 땐 루프 돌리기도 쉽고 해서 리스트를 많이 쓴다고 함</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="n">store</span><span class="o">.</span><span class="na">values</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">clearStore</span><span class="o">(){</span>
        <span class="n">store</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="회원-서비스-개발">회원 서비스 개발</h2>
<h3 id="--memberservice-객체">- <u>MemberService 객체</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberService.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemoryMemberRepository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MemberService</span> <span class="o">{</span>
    <span class="c1">// private final MemberRepository memberRepository = new MemoryMemberRepository(); // 기존 방식: MemberService가 MemoryMemberRepository를 직접 생성하게 함</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">MemberService</span><span class="o">(</span><span class="nc">MemberRepository</span> <span class="n">memberRepository</span><span class="o">)</span> <span class="o">{</span>   <span class="c1">// MemberService 코드를 DI 가능하게 변경한다.</span>
        <span class="k">this</span><span class="o">.</span><span class="na">memberRepository</span> <span class="o">=</span> <span class="n">memberRepository</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 회원가입
     */</span>
    <span class="kd">public</span> <span class="nc">Long</span> <span class="nf">join</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">validateDuplicateMember</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>    <span class="c1">// 중복 회원 검증</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">void</span> <span class="nf">validateDuplicateMember</span><span class="o">(</span><span class="nc">Member</span> <span class="n">member</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>   <span class="c1">// 회원 리포지토리에서 멤버 이름으로 찾아서</span>
                <span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">m</span> <span class="o">-&gt;</span> <span class="o">{</span>   <span class="c1">// 만약 존재한다면</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalStateException</span><span class="o">(</span><span class="s">"이미 존재하는 회원입니다."</span><span class="o">);</span>  <span class="c1">// 이미 존재한다고 예외를 던지게끔 설계</span>
                <span class="o">});</span>
    <span class="o">}</span>

    <span class="cm">/**
     * 전체 회원 조회
     */</span>
    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findMembers</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="nf">findOne</span><span class="o">(</span><span class="nc">Long</span> <span class="n">memberId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">memberRepository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">memberId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="java에서-테스트를-실행하는-방법">java에서 테스트를 실행하는 방법</h2>
<p>개발한 기능을 실행해서 테스트 할 때<br />
1) 자바의 main 메서드<br />
2) 웹 애플리케이션의 컨트롤러<br />
등을 통해 해당 기능을 실행한다.</p>

<p>앞선 방법은 <u>준비 및 실행하는데 오래 걸리고</u>, <u>반복 실행이 어려우며</u>, <u>여러 테스트를 한번에 실행하기 어렵다</u>는 단점이 있다.</p>

<blockquote>
  <p>따라서, 자바는 <code class="language-plaintext highlighter-rouge">JUnit</code>이라는 프레임워크로 테스트를 실행해서 이러한 문제를 해결한다!</p>
</blockquote>

<h3 id="--테스트-작성-시-주의사항">- <u>테스트 작성 시 주의사항!</u></h3>
<p>한번에 여러 테스트를 실행하면 메모리 DB에 직전 테스트의 결과가 남을 수 있어 제대로 테스트 케이스가 실행되지 않을 수 있다. 따라서, 메모리 DB에 저장된 데이터를 삭제해주어야 한다.</p>

<p><code class="language-plaintext highlighter-rouge">@BeforeEach</code>: 각 테스트가 실행되기 전 마다 이 기능 실행<br />
<code class="language-plaintext highlighter-rouge">@AfterEach</code>: 각 테스트가 종료될 때 마다 이 기능 실행</p>

<blockquote>
  <p>테스트는 각각 독립적으로 실행되어야 한다. 테스트 순서에 의존관계가 있는 것은 좋은 테스트가 아님!</p>
</blockquote>

<ul>
  <li>참고 1: Test를 먼저 만들고 구현코드를 만드는 것을 ‘테스트 주도 개발(TDD)’라고 한다.</li>
  <li>참고 2: 실무에서는 Test를 build tool이랑 엮어서 Test case를 통과하지 못하면 아예 빌드가 되지 않게끔 만든다고 한다.</li>
</ul>

<h2 id="memberrepository-테스트-케이스-작성">MemberRepository 테스트 케이스 작성</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemoryMemberRepositoryTest.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.repository</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.AfterEach</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Assertions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>  <span class="c1">// junit 프레임워크로 테스트</span>

<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.*;</span>    <span class="c1">// static import를 통해 assertThat을 바로 쓸 수 있다.</span>

<span class="kd">class</span> <span class="nc">MemoryMemberRepositoryTest</span> <span class="o">{</span>
    <span class="nc">MemoryMemberRepository</span> <span class="n">repository</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryMemberRepository</span><span class="o">();</span>

    <span class="nd">@AfterEach</span>  <span class="c1">// 테스트는 각각 독립적으로 실행되어야 한다. 테스트 순서에 의존관계가 있는 것은 좋은 테스트가 아니다.</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">clearStore</span><span class="o">();</span>    <span class="c1">// 한 번에 여러 테스트를 실행하면 메모리 DB에 직전 테스트의 결과가 남을 수 있다. 따라서 메모리 DB에 저장된 데이터를 삭제해준다.</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">save</span><span class="o">(){</span>
        <span class="nc">Member</span> <span class="n">member</span>  <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring"</span><span class="o">);</span>   <span class="c1">// 1. 이름을 세팅하고</span>

        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>    <span class="c1">// 2. member repository에 저장한 뒤</span>

        <span class="nc">Member</span> <span class="n">result</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">findById</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getId</span><span class="o">()).</span><span class="na">get</span><span class="o">();</span>  <span class="c1">// 3. id로 찾아낸 member와 비교</span>
        <span class="c1">// System.out.println("result = " + (result == member));   // 4. 비교 결과를 콘솔에 출력..할 수도 있지만 항상 콘솔에서 볼 수는 없으니</span>
        <span class="c1">//Assertions.assertEquals(result, member);    // 5. junit에서 제공하는 assertions를 통해 검증(앞: expected, 뒤: actual)</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">member</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>   <span class="c1">// 5. assertj에서 제공하는 assertThat을 사용</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findByName</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// given</span>
        <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring1"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring2"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="nc">Member</span> <span class="n">result</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">findByName</span><span class="o">(</span><span class="s">"spring1"</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>

        <span class="c1">// then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">member1</span><span class="o">).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">findAll</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// given</span>
        <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring1"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring2"</span><span class="o">);</span>
        <span class="n">repository</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">member2</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Member</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">repository</span><span class="o">.</span><span class="na">findAll</span><span class="o">();</span>

        <span class="c1">// then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">result</span><span class="o">.</span><span class="na">size</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="memberservice-테스트-케이스-작성">MemberService 테스트 케이스 작성</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// MemberServiceTest.java</span>
<span class="kn">package</span> <span class="nn">hello.hellospring.service</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">hello.hellospring.domain.Member</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">hello.hellospring.repository.MemoryMemberRepository</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.assertj.core.api.Assertions</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.AfterEach</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.BeforeEach</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.junit.jupiter.api.Test</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">jupiter</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.*;</span>

<span class="kd">class</span> <span class="nc">MemberServiceTest</span> <span class="o">{</span>
<span class="cm">/*
    MemberService memberService = new MemberService();
    MemoryMemberRepository memberRepository = new MemoryMemberRepository();
*/</span>

    <span class="nc">MemberService</span> <span class="n">memberService</span><span class="o">;</span>
    <span class="nc">MemoryMemberRepository</span> <span class="n">memberRepository</span><span class="o">;</span>

    <span class="nd">@BeforeEach</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">beforeEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">memberRepository</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemoryMemberRepository</span><span class="o">();</span>
        <span class="n">memberService</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">MemberService</span><span class="o">(</span><span class="n">memberRepository</span><span class="o">);</span>    <span class="c1">// DI 방식으로 memberRepository를 미리 생성하고 생성자에서 받게 함</span>
    <span class="o">}</span>

    <span class="nd">@AfterEach</span>  <span class="c1">// 테스트는 각각 독립적으로 실행되어야 한다. 테스트 순서에 의존관계가 있는 것은 좋은 테스트가 아니다.</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">afterEach</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">memberRepository</span><span class="o">.</span><span class="na">clearStore</span><span class="o">();</span>    <span class="c1">// 한 번에 여러 테스트를 실행하면 메모리 DB에 직전 테스트의 결과가 남을 수 있다. 따라서 메모리 DB에 저장된 데이터를 삭제해준다.</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="n">회원가입</span><span class="o">()</span> <span class="o">{</span>   <span class="c1">// join()</span>
        <span class="c1">// given</span>
        <span class="nc">Member</span> <span class="n">member</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"hello"</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="nc">Long</span> <span class="n">saveId</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member</span><span class="o">);</span>

        <span class="c1">// then</span>
        <span class="nc">Member</span> <span class="n">findMember</span> <span class="o">=</span> <span class="n">memberService</span><span class="o">.</span><span class="na">findOne</span><span class="o">(</span><span class="n">saveId</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">member</span><span class="o">.</span><span class="na">getName</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">findMember</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kt">void</span> <span class="n">중복_회원_예외</span><span class="o">()</span> <span class="o">{</span>   <span class="c1">// validateDuplicateMember() 검증</span>
        <span class="c1">// given</span>
        <span class="nc">Member</span> <span class="n">member1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member1</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring"</span><span class="o">);</span>

        <span class="nc">Member</span> <span class="n">member2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Member</span><span class="o">();</span>
        <span class="n">member2</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"spring"</span><span class="o">);</span>

        <span class="c1">// when</span>
        <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member1</span><span class="o">);</span>
        <span class="nc">IllegalStateException</span> <span class="n">e</span> <span class="o">=</span> <span class="n">assertThrows</span><span class="o">(</span><span class="nc">IllegalStateException</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="n">memberService</span><span class="o">.</span><span class="na">join</span><span class="o">(</span><span class="n">member2</span><span class="o">));</span> <span class="c1">// 예외 메시지를 변수 e로 받아서</span>

        <span class="c1">// then</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">e</span><span class="o">.</span><span class="na">getMessage</span><span class="o">()).</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"이미 존재하는 회원입니다."</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Spring-Tutorial" /><category term="java" /><category term="spring" /><summary type="html"><![CDATA[Spring Introduction]]></summary></entry><entry><title type="html">[Team_ForV] 프로젝트의 활용 가능성</title><link href="http://localhost:4000/team_forv/Team_ForV09/" rel="alternate" type="text/html" title="[Team_ForV] 프로젝트의 활용 가능성" /><published>2022-08-29T00:00:00+09:00</published><updated>2022-08-29T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV09</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV09/"><![CDATA[<h2 id="프로젝트를-실제로-배포하고-운영까지-한다고-가정해보자">프로젝트를 실제로 배포하고 운영까지 한다고 가정해보자..</h2>
<p>앞서 설명했듯이 client에서 각각의 서버로 다른 요청을 보낸다.</p>

<p>각 서버는 client로부터 요청을 받아,<br />
<code class="language-plaintext highlighter-rouge">django api server</code>에서는 사용자들의 요청에 대한 정보를 수집하여 데이터베이스에 저장하고,<br />
<code class="language-plaintext highlighter-rouge">flask model server</code>에서는 사용자의 요청에 따라 만든 wav파일을 gcs에 업로드한다.</p>

<blockquote>
  <p>홍보를 하는 입장에서는 소비자에 대한 정보와 니즈파악이 중요하다.</p>
</blockquote>

<p>이것들이 앞으로의 ‘사업의 방향성’을 제시해줄 수 있기 때문인데, 이 서비스는 사용자의 이용정보들을 데이터베이스와 gcs에 차곡차곡 쌓게 되어, 이렇게 수집된 데이터들을 활용할 수 있는 측면이 많다고 생각한다.<br />
하나하나 살펴보자!</p>

<h2 id="활용할-데이터의-종류">활용할 데이터의 종류</h2>
<h3 id="--django-api-server">- <u>django api server</u></h3>
<p><img src="/assets/images/Team_ForV/9-2.png" alt="image" width="60%" height="60%" /><br /></p>

<p>uuid, text(사용자에게 입력받은 문장), created_at(사용자의 요청이 들어온 시간),<br />
member_id(사용자가 원하는 그룹 멤버의 정보) 등의 정보를 데이터베이스에 저장해둔다.</p>

<h3 id="--flask-model-server">- <u>flask model server</u></h3>
<p><img src="/assets/images/Team_ForV/9-3.png" alt="image" /><br /></p>

<p>uuid와 요청시간, 멤버 정보를 갖고 음성파일의 이름을 지어 버켓에 저장해둔다.</p>

<h2 id="사용자-이용-데이터의-활용방안">사용자 이용 데이터의 활용방안!</h2>
<p><img src="/assets/images/Team_ForV/9-1.png" alt="image" width="90%" height="90%" class="align-center" /></p>

<h3 id="--활동시간">- <u>활동시간</u></h3>
<p>client에서 서버로 요청을 보낼 때 api 구성에 요청 시간에 대한 정보도 포함되어있다.<br />
이를 통해서<br />
1) <u>팬들의 주 활동시간</u>을 유추하거나,<br />
2) <u>사용자의 요청이 몰리는 시간</u>을 미리 파악하여 특정 시간에만 서버를 더 증설할 수도 있고,<br />
3) <u>광고나 이벤트 등의 효율적인 운영시간</u>을 유추해볼 수 있다.</p>

<h3 id="--요청한-문구">- <u>요청한 문구</u></h3>
<p>요청한 text 문구들을 분석해보면 <u>팬들의 관심사</u>나 <u>유행하는 밈</u>들도 파악해 볼 수 있다.</p>

<h3 id="--그룹-내-맴버-별-통계">- <u>그룹 내 맴버 별 통계</u></h3>
<p>또, 멤버 별 사용자들의 요청의 빈도수를 통해 <u>그룹 내에 맴버 별 인기의 척도</u>를 가늠할 수도 있겠다.<br />
이를 통해 <u>멤버 별 홍보의 방향성</u>을 결정할 수 있다.</p>

<h3 id="--음성-파일">- <u>음성 파일</u></h3>
<p>로그인 기능이 추가된다면, <u>생성된 음성파일들을 사용자에게 제공해주는</u> 등의 활용을 할 수도 있다.</p>

<blockquote>
  <p>이렇게 이 프로젝트를 통해 단순한 홍보효과를 넘어서 <u>새로운 가치를 발견하는 것</u>도 기대해볼 수 있다.</p>
</blockquote>

<h2 id="한-걸음-더-나아가기">한 걸음 더 나아가기</h2>
<blockquote>
  <p>그렇다면 더 나아가서 이 데이터들를 활용하기 위해 추가하면 좋은 기술들이 무엇이 있을까?</p>
</blockquote>

<h3 id="--elastic-search">- <u>Elastic Search!!</u></h3>
<p><code class="language-plaintext highlighter-rouge">Elasticsearch</code>는 Apache Lucene(아파치 루씬) 기반의 Java 오픈소스 분산 검색 엔진이다.<br />
<code class="language-plaintext highlighter-rouge">Elasticsearch</code>를 통해 루씬 라이브러리를 단독으로 사용할 수 있게 되었으며, 방대한 양의 데이터를 신속하게, 거의 실시간(NRT, Near Real Time)으로 저장, 검색, 분석할 수 있다.<br />
<code class="language-plaintext highlighter-rouge">Elasticsearch</code>는 검색을 위해 단독으로 사용되기도 하며, <code class="language-plaintext highlighter-rouge">ELK</code>(Elasticsearch / Logstatsh / Kibana)스택으로 사용되기도 하는데, ELK 스택이란 다음과 같다.</p>

<p><img src="/assets/images/Team_ForV/9-4.png" alt="image" width="80%" height="80%" /></p>

<p>1) <code class="language-plaintext highlighter-rouge">Logstash</code>: 다양한 소스(DB, csv파일 등)의 로그 또는 트랜잭션 데이터를 수집, 집계, 파싱하여 <code class="language-plaintext highlighter-rouge">Elasticsearch</code>로 전달<br />
2) <code class="language-plaintext highlighter-rouge">Elasticsearch</code>: <code class="language-plaintext highlighter-rouge">Logstash</code>로부터 받은 데이터를 검색 및 집계를 하여 필요한 관심 있는 정보를 획득<br />
3) <code class="language-plaintext highlighter-rouge">Kibana</code>: <code class="language-plaintext highlighter-rouge">Elasticsearch</code>의 빠른 검색을 통해 데이터를 시각화 및 모니터링<br />
<br /></p>

<p>이 프로젝트에서 사용된 데이터베이스는 <code class="language-plaintext highlighter-rouge">mysql</code> 즉, RDBMS의 일종이다.<br />
관계형 DB는 Elasticsearch에서 각각 다음과 같이 대응시킬 수 있다.<br />
<img src="/assets/images/Team_ForV/9-5.jpeg" alt="image" width="60%" height="60%" />
<img src="/assets/images/Team_ForV/9-6.png" alt="image" width="30%" height="30%" /><br /></p>

<p>이렇게 이 프로젝트에 <code class="language-plaintext highlighter-rouge">Elasticsearch</code>를 추가한다면 앞서 말한 데이터들을 사용하는 데 유용하게 쓰일 것 같다!</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://victorydntmd.tistory.com/308">https://victorydntmd.tistory.com/308</a> [Elasticsearch 기본 개념잡기]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="Info" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] AI Models</title><link href="http://localhost:4000/team_forv/Team_ForV08/" rel="alternate" type="text/html" title="[Team_ForV] AI Models" /><published>2022-08-26T00:00:00+09:00</published><updated>2022-08-29T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV08</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV08/"><![CDATA[<h2 id="음성-합성은-어떻게-이루어질까">음성 합성은 어떻게 이루어질까?</h2>
<p>대부분의 음성 합성 네트워크는 두 단계로 이루어진다!</p>

<p>1) Mel-spectrogram 생성<br />
2) waveform 생성</p>

<p>이 프로젝트에서는 <code class="language-plaintext highlighter-rouge">Glow-TTS</code>와 <code class="language-plaintext highlighter-rouge">HiFi-GAN</code>을 사용하여 위의 두 가지 단계를 수행하고, 그 결과물을 이용하여 음성 합성 과정을 수행한다.</p>

<p>각각에 대해서 차근차근 알아보자!</p>

<h2 id="mel-spectrogram의-생성">Mel-spectrogram의 생성</h2>
<p>학습에 필요한 음성 녹음을 마쳤다면, 녹음한 음성 데이터들로 목소리 학습을 진행해야 한다.</p>

<p>음성 데이터를 raw data를 그대로 사용하면 <u>파라미터가 너무 많아지기도</u> 하고 <u>데이터 용량이 너무 커지므로</u><br />
보통 <code class="language-plaintext highlighter-rouge">Mel-spectrogram</code>을 많이 사용한다고 한다.</p>

<p>음성파일에서 의미있는 정보를 얻기 위해선 음성 데이터를 컴퓨터가 다루기 쉽도록 가공해주어야 하는데, 여기서부터 ‘신호처리’의 영역으로 들어간다.</p>

<h3 id="--신호signals란">- <u>신호(Signals)란?</u></h3>
<p>Signal은 시간에 따른 특정 양의 변화이다.<br />
Audio같은 경우 공기의 압력이 이에 해당하는데,<br />
이 정보를 디지털 방식으로 얻는 방법은 시간에 변화에 따른 기압 sample을 채취하는 것으로, 데이터를 샘플링하는 속도를 조절하여 얻을 수 있다.<br />
이렇게 얻어낸 파형 신호에 대해 컴퓨터로 해석하고, 분석 및 수정을 하는 것이다.<br />
아래 예시는 librosa 라이브러리를 이용하여 wav파일로부터 파형 신호를 얻어내는 예제이다.</p>

<p><img src="/assets/images/Team_ForV/8-1.png" alt="image" width="40%" height="40%" /><br /></p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">librosa</span>
<span class="kn">import</span> <span class="nn">librosa.display</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">y</span><span class="p">,</span> <span class="n">sr</span> <span class="o">=</span> <span class="n">librosa</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="s">'./example_data/blues.00000.wav'</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">y</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Signal'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Time (samples)'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Amplitude'</span><span class="p">)</span>
</code></pre></div></div>

<p>이렇게 얻어낸 signal 자체만으로는 의미가 없고, 이로부터 유용한 정보를 뽑아내기 위해 ‘푸리에 변환’이라는 개념이 등장한다.</p>

<h3 id="--푸리에-변환fourier-transform이란">- <u>푸리에 변환(Fourier Transform)이란?</u></h3>
<p>푸리에 변환을 간단히 말하자면 ‘입력 신호를 다양한 주파수를 가지는 주기함수들로 분해하는 것’이다.</p>

<p><img src="/assets/images/Team_ForV/8-2.png" alt="image" width="40%" height="40%" /><br /></p>

<p>오디오 신호는 여러 개의 단일 주파수 음파들로 구성되는데,<br />
<code class="language-plaintext highlighter-rouge">time domain</code>에서는 진폭(amplitude)만 얻어낼 것을 ‘푸리에 변환’을 통해<br />
<code class="language-plaintext highlighter-rouge">frequency domain</code>에서 주파수(frequency)와 진폭(amplitude)를 가지는 주기함수를 얻어내는 것이다.<br />
이렇게 나온 결과를 <code class="language-plaintext highlighter-rouge">spectrum</code>이라고 한다.</p>

<h3 id="--fast-fourier-transformfft">- <u>Fast Fourier Transform(FFT)</u></h3>
<p>푸리에 변환의 한 예로 fast Fourier transform (FFT)는 신호처리에서 널리 쓰이는 알고리즘인데,<br />
다음 예제를 보자.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="n">n_fft</span> <span class="o">=</span> <span class="mi">2048</span>
<span class="n">ft</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">librosa</span><span class="p">.</span><span class="n">stft</span><span class="p">(</span><span class="n">y</span><span class="p">[:</span><span class="n">n_fft</span><span class="p">],</span> <span class="n">hop_length</span> <span class="o">=</span> <span class="n">n_fft</span><span class="o">+</span><span class="mi">1</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">ft</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Spectrum'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Frequency Bin'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'Amplitude'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/assets/images/Team_ForV/8-3.png" alt="image" width="40%" height="40%" /><br /></p>

<p>자, 그런데 뭔가 좀 이상하다.<br />
FFT를 통해 얻은 spectrum에는 시간 정보가 없다!<br />
음악이나 speech같은 non periodic한 audio signal은 주파수 정보가 시간마다 달라지기 때문에 FFT만 가지고는 사용할 수는 없다.</p>

<p>따라서, ‘음성 데이터를 시간 단위로 짧게 쪼개서 FFT를 해주자!’라는 해결책이 나왔고,<br />
이것이 Short Time Fourier Transform이다.</p>

<h3 id="--short-time-fourier-transformstft--spectrogram">- <u>Short Time Fourier Transform(STFT) &amp; Spectrogram</u></h3>
<p>STFT를 통해 나오는 spectrogram은 서로의 위에 쌓인 FFT들의 묶음으로 생각할 수 있다.<br />
각각 다른 주파수에 대해 시간이 지남에 따라 달라지기 때문에, spectrogram은 신호의 크기 또는 진폭을 시각적으로 보여줄 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">spec</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">abs</span><span class="p">(</span><span class="n">librosa</span><span class="p">.</span><span class="n">stft</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">hop_length</span><span class="o">=</span><span class="mi">512</span><span class="p">))</span>
<span class="n">spec</span> <span class="o">=</span> <span class="n">librosa</span><span class="p">.</span><span class="n">amplitude_to_db</span><span class="p">(</span><span class="n">spec</span><span class="p">,</span> <span class="n">ref</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">)</span>

<span class="n">librosa</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">specshow</span><span class="p">(</span><span class="n">spec</span><span class="p">,</span> <span class="n">sr</span><span class="o">=</span><span class="n">sr</span><span class="p">,</span> <span class="n">x_axis</span><span class="o">=</span><span class="s">'time'</span><span class="p">,</span> <span class="n">y_axis</span><span class="o">=</span><span class="s">'log'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="nb">format</span><span class="o">=</span><span class="s">'%+2.0f dB'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Spectrogram'</span><span class="p">)</span>
</code></pre></div></div>
<p><img src="/assets/images/Team_ForV/8-4.png" alt="image" width="50%" height="50%" /><br /></p>

<p>자, 먼 길 왔는데, 그래서 Mel-Spectrogram은 뭐냐..?</p>

<h3 id="--mel-spectrogram">- <u>Mel-Spectrogram</u></h3>
<p>사람들은 음성 신호를 인식할 때 주파수를 linear scale로 인식하는게 아니라고 한다.<br />
또, 낮은 주파수를 높은 주파수보다 더 예민하게 받아들이는데, 예를 들어 500 ~ 1000 Hz 가 바뀌는건 예민하게 인식하는데 10000Hz ~ 20000 Hz가 바뀌는 것은 잘 인식 못한다는 것이다.</p>

<p><img src="/assets/images/Team_ForV/8-5.gif" alt="image" width="30%" height="30%" /><br /></p>

<p>동일한 pitch distance면 듣는 사람으로 하여금 동일한 정도로 멀리 들리도록하는 pitch 단위를 제안했는데, 이를 mel scale이라고 하고, 이 주파수를 mel scale로 볼 수 있게 한 것이다.</p>

<p>앞선 spectrogram에 mel scale을 적용하면 Mel-Spectrogram을 만들 수 있다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mel_spect</span> <span class="o">=</span> <span class="n">librosa</span><span class="p">.</span><span class="n">feature</span><span class="p">.</span><span class="n">melspectrogram</span><span class="p">(</span><span class="n">y</span><span class="o">=</span><span class="n">y</span><span class="p">,</span> <span class="n">sr</span><span class="o">=</span><span class="n">sr</span><span class="p">,</span> <span class="n">n_fft</span><span class="o">=</span><span class="mi">2048</span><span class="p">,</span> <span class="n">hop_length</span><span class="o">=</span><span class="mi">1024</span><span class="p">)</span>
<span class="n">mel_spect</span> <span class="o">=</span> <span class="n">librosa</span><span class="p">.</span><span class="n">power_to_db</span><span class="p">(</span><span class="n">spect</span><span class="p">,</span> <span class="n">ref</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="nb">max</span><span class="p">)</span>
<span class="n">librosa</span><span class="p">.</span><span class="n">display</span><span class="p">.</span><span class="n">specshow</span><span class="p">(</span><span class="n">mel_spect</span><span class="p">,</span> <span class="n">y_axis</span><span class="o">=</span><span class="s">'mel'</span><span class="p">,</span> <span class="n">fmax</span><span class="o">=</span><span class="mi">8000</span><span class="p">,</span> <span class="n">x_axis</span><span class="o">=</span><span class="s">'time'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">'Mel Spectrogram'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">colorbar</span><span class="p">(</span><span class="nb">format</span><span class="o">=</span><span class="s">'%+2.0f dB'</span><span class="p">)</span>
</code></pre></div></div>
<p><img src="/assets/images/Team_ForV/8-6.png" alt="image" width="50%" height="50%" /><br /></p>

<h2 id="wave-form의-생성">wave form의 생성</h2>
<p><img src="/assets/images/Team_ForV/8-7.png" alt="image" width="60%" height="60%" /><br /><br />
Glow-TTS와 Hifi-Gan에 대해서 이해하기 위해서는 먼저 Gan 모델에 대한 전반적인 이해가 필요하다.</p>

<h3 id="--gan-model">- <u>Gan Model</u></h3>
<p>GAN은 생성자와 구분자로 구성되어있다. 구분자는 가짜 데이터가 포함된 전체데이터에서 실제 데이터를 구분해내는 학습을, 생성자는 실제와 비슷한 데이터를 생성해서 서로간 상호학습을 하는 방식이다.</p>

<h3 id="--flow-based-generative-models">- <u>Flow-based generative models</u></h3>
<p>연속적인 역변환을 통해서 생성하는 방식으로, 데이터의 분포에서 학습하는 방식이다.<br />
그림을 보면 GAN과 VAE는 각각 구분자와 인코더 부분이 사다리꼴 모양인데, 이는 원본 데이터를 압축하는 것을 의미하고, 압축 및 확장하는 과정에서 데이터의 손실이 발생할 수 있다.<br />
하지만 Flow-based 생성모델은 그림에서도 볼 수 있듯이 역함수 변환을 통해 데이터의 손실을 줄일 수 있다.</p>

<h2 id="glow-tts--hifi-gan">Glow-TTS &amp; Hifi-Gan</h2>
<p><img src="/assets/images/Team_ForV/8-0.png" alt="image" width="90%" height="90%" class="align-center" /><br />
<code class="language-plaintext highlighter-rouge">Glow-TTS</code> 모델은 ‘Flow-based generative model’ for parallel TTS를 제안한다.<br />
<code class="language-plaintext highlighter-rouge">Hifi-Gan</code> 모델은 ‘Gan Model’에서 discriminator를 sub-discriminators로 만들어 기존의 것보다 성능을 높인 것이 특징이다.</p>

<p>각각의 모델을 처음 제안한 ‘카카오엔터프라이즈의 기술블로그’에 자세히 설명되어있으니 그 내용을 인용하겠다.</p>

<h3 id="--glow-tts">- <u>Glow-TTS</u></h3>
<blockquote>
  <p>FastSpeech와 ParaNet 같은 최신 음성합성(TTS) 모델은 발화를 병렬적으로 합성(non-Autoregressive)해 그 속도를 높인  새로운 보코더(vocoder)를 제안했습니다. 하지만 이런 병렬 모델이 텍스트를 구성하는 음소 순서대로 오디오를 정렬하기 위해서는 따로 훈련된 Autoregressive 모델의 지원이 반드시 필요합니다.</p>
</blockquote>

<blockquote>
  <p>이에 AI Lab은 정렬 모델을 따로 구축하지 않고도 이를 보다 정확하게 추정하는 새로운 TTS 모델인 Glow-TTS를 제안했습니다. Glow-TTS는 플로우 기반 생성 모델(flow-based generative models)과 동적 프로그래밍(dynamic programming)의 속성을 활용해 입력된 텍스트 순서에 따라 발화를 차례대로 정렬합니다(monotonic alignment).</p>
</blockquote>

<blockquote>
  <p>그 결과, 매우 긴 텍스트로 빠르게 합성함은 물론, 서로 다른 강세와 억양을 갖춘 발화를 생성할 수 있습니다. 자체 실험에서 Glow-TTS는 autoregressive 모델인 Tacotron 2과 비교해 비슷한 품질의 음성을 약 15배 더 빠르게 생성했습니다. 또한 Glow-TTS가 다화자 음성합성 태스크에도 쉽게 적용될 수 있음을 확인했습니다.</p>
</blockquote>

<h3 id="--hifi-gan">- <u>Hifi-Gan</u></h3>
<blockquote>
  <p>최근 음성합성 연구에서는 GAN(generative adversarial networks) 구조를 활용해 보코더(vocoder)의 음성 합성 속도와 메모리 효율을 높이는 시도가 있었습니다. 하지만 이런 방식의 보코더가 합성한 음성의 품질은 Autoregressive 모델이나 플로우 기반의 생성 모델(flow-based generative model)에 미치지 못했습니다. 이에 AI Lab은 음성 오디오의 주기적 신호를 구별해내는 방식으로 기존 제안된 모델보다 월등히 좋은 품질의 오디오를 빠르게 합성하는 HiFi-GAN을 제안했습니다.</p>
</blockquote>

<blockquote>
  <p>AI Lab은 메모리 효율성 및 속도와 관련된 초매개변수(hyperparameter)를 조정하고, 이 값을 조합한 3가지 버전의 세부 모델로 실험을 진행했습니다. 첫 번째 버전은 인간과 비슷한 수준의 고품질 오디오를 실시간의 167.9배 속도로 합성합니다. 두번째 버전은 비교 모델 중 가장 적은 매개변수를 사용하면서도 가장 좋은 음질을 생성합니다. 세 번째 버전은 GPU에서 실시간의 1,186.8배, CPU에서 13.4배 더 빠르게 기존 모델과 비슷한 품질의 오디오를 합성합니다.</p>
</blockquote>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>사실 사용된 AI 기술에 대해서 깊게 들어가면 논문도 살펴봐야되고 끝없이 들어가야하지만, 이 프로젝트는 AI 기술 자체에 초점을 맞춘 것은 아니라서 간단하게만 다뤄보았다.<br />
새삼 다시 느낀거지만 AI는 컴퓨터랑 관련이 있다기보단 그 자체로 다른 하나의 학문이라는 생각이 든다..</p>

<p>다음 글에서는 이 프로젝트를 배포하고 난 뒤, 쌓이게 되는 사용자들의 데이터를 어떻게 활용할 수 있는지를 살펴보자!</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://sce-tts.github.io/#/v2/train">https://sce-tts.github.io/#/v2/train</a> [TTS 모델학습]<br />
2) <a href="https://medium.com/analytics-vidhya/understanding-the-mel-spectrogram-fca2afa2ce53">https://medium.com/analytics-vidhya/understanding-the-mel-spectrogram-fca2afa2ce53</a><br />
[Understanding the Mel Spectrogram]<br />
3) <a href="https://sofar-sogood.tistory.com/entry/Glow-TTS-Glow-TTS-A-Generative-Flow-for-Text-to-Speech-via-Monotonic-Alignment-Search-NIPS-20">https://sofar-sogood.tistory.com/entry/Glow-TTS-Glow-TTS-A-Generative-Flow-for-Text-to-Speech-via-Monotonic-Alignment-Search-NIPS-20</a><br />
[Glow-TTS: A Generative Flow for Text-to-Speech via Monotonic Alignment Search (NIPS 20)]<br />
4) <a href="https://sofar-sogood.tistory.com/entry/Hifi-GAN-HiFi-GAN-Generative-Adversarial-Networks-for-Efficient-and-High-Fidelity-Speech-Synthesis-NIPS-20">https://sofar-sogood.tistory.com/entry/Hifi-GAN-HiFi-GAN-Generative-Adversarial-Networks-for-Efficient-and-High-Fidelity-Speech-Synthesis-NIPS-20</a><br />
[HiFi-GAN: Generative Adversarial Networks for Efficient and High Fidelity Speech Synthesis (NIPS 20)]
5) <a href="https://tech.kakaoenterprise.com/94">https://tech.kakaoenterprise.com/94</a> [카카오엔터프라이즈 기술블로그 Tech&amp;(테크앤):티스토리]<br />
6) <a href="https://tech.kakaoenterprise.com/96">https://tech.kakaoenterprise.com/96</a> [카카오엔터프라이즈 기술블로그 Tech&amp;(테크앤):티스토리]
7) <a href="https://medium.com/@sunwoopark/slow-paper-glow-generative-flow-with-invertible-1x1-convolutions-837710116939">https://medium.com/@sunwoopark/slow-paper-glow-generative-flow-with-invertible-1x1-convolutions-837710116939</a><br />
[Glow: Generative Flow with Invertible 1x1 Convolutions]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="AI" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry><entry><title type="html">[Team_ForV] Docker Setting</title><link href="http://localhost:4000/team_forv/Team_ForV07/" rel="alternate" type="text/html" title="[Team_ForV] Docker Setting" /><published>2022-08-25T00:00:00+09:00</published><updated>2022-08-26T00:00:00+09:00</updated><id>http://localhost:4000/team_forv/Team_ForV07</id><content type="html" xml:base="http://localhost:4000/team_forv/Team_ForV07/"><![CDATA[<h2 id="문제상황-발생">문제상황 발생!</h2>
<p><img src="/assets/images/Team_ForV/7-1.png" alt="image" width="90%" height="90%" class="align-center" /><br />
음성파일 합성을 위해선 TTS 라는 라이브러리와 g2pk라는 라이브러리가 필요하다.</p>

<p>g2pk는 영어가 입력되었을 시 보이는 것처럼 한국어 발음에 맞춰서 변환해주고,<br />
-&gt; 최종적으로 변환된 문장을 TTS라이브러리를 통해 음성으로 만들어준다.</p>

<p>그래, 여기까지는 그렇다 치는데 이 라이브러리들을 사용하는데에 2가지 문제가 있었다.</p>

<ol>
  <li>위 라이브러리들은 3.6 ~ 3.7 사이의 파이썬 버전을 요구했다. 하지만 API Server가 이미 먼저 만들어진 상태였고, API Server는 최신 버전의 파이썬을 사용중이었기 때문에 버전이 맞지 않았다.</li>
  <li>결정적으로 g2pk 라이브러리를 사용하기 위해 설치되는 서브 모듈 중 ‘mecab’이라는 라이브러리가 당최 가상환경에서 설치되지를 않았다(아마 M1 환경에서 제대로 설치가 되지 않는 것 같다). 구글링해보니 이미 악명 높은 라이브러리인 것 같더라..</li>
</ol>

<h2 id="docker를-이용하여-문제를-해결해보자">Docker를 이용하여 문제를 해결해보자!!</h2>
<p><img src="/assets/images/Team_ForV/7-2.png" alt="image" width="70%" height="70%" /><br /></p>

<p>Docker는 ‘컨테이너 기반의 오픈소스 가상화 플랫폼’이다.</p>

<p>여기에서 말하는 ‘컨테이너’는 다양한 프로그램, 실행환경을 컨테이너로 추상화하고 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해준다.<br />
백엔드 프로그램, 데이터베이스 서버, 메시지 큐등 어떤 프로그램도 컨테이너로 추상화할 수 있고 AWS, Azure, Google cloud등 어디에서든 실행할 수 있다.</p>

<p>Docker의 컨테이너 개념을 이용해서 필요한 각각의 실행환경들을 컨테이너로 분리하여 Docker 위에서 돌아가도록 구성하게 되었다.<br />
이렇게 구성할 경우, model server와 api server의 실행환경이 다르더라도 하나의 서버에 여러개의 컨테이너를 실행하면서 서로 영향을 미치지 않고 독립적으로 실행되어 마치 가벼운 Virtual Machine을 사용하는 느낌을 줄 수 있다.</p>

<h2 id="docker-composeyml--dockerfile">docker-compose.yml &amp; DockerFile</h2>
<h3 id="--docker-composeyml">- docker-compose.yml</h3>
<p>frontend(react), api server(django), model server(flask), mysql, rabbitMQ, celery<br />
이렇게 총 6개의 컨테이너를 구성했다.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># docker-compose.yml</span>
<span class="na">version</span><span class="pi">:</span> <span class="s2">"</span><span class="s">3"</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">frontend</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./frontend</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span> <span class="s2">"</span><span class="s">npm"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">start"</span> <span class="pi">]</span> 
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">3000:3000</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./frontend/:/frontend</span>
      <span class="pi">-</span> <span class="s">./frontend/node_modules/:/frontend/node_modules</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">CI=true</span>
      <span class="pi">-</span> <span class="s">CHOKIDAR_USEPOLLING=true</span>
      <span class="pi">-</span> <span class="s">REACT_APP_BACKEND_URL=http://localhost:5000</span>
    <span class="na">tty</span><span class="pi">:</span> <span class="no">true</span>
  
  <span class="na">apiserver</span><span class="pi">:</span>
    <span class="na">build</span><span class="pi">:</span>
      <span class="na">context</span><span class="pi">:</span> <span class="s">./backend/apiserver</span>
      <span class="na">args</span><span class="pi">:</span>
        <span class="na">DJANGO_ALLOWED_HOSTS</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
        <span class="na">DJANGO_SECRET_KEY</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
        <span class="na">DJANGO_CORS_ORIGIN_WHITELIST</span><span class="pi">:</span> <span class="s2">"</span><span class="s">*"</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">sh -c "/wait &amp;&amp; python ./apiserver/manage.py makemigrations &amp;&amp; python ./apiserver/manage.py makemigrations mainApp &amp;&amp; python ./apiserver/manage.py migrate &amp;&amp; python ./apiserver/db_init.py &amp;&amp; python ./apiserver/model_init.py &amp;&amp; python ./apiserver/manage.py runserver 0.0.0.0:8000"</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">on-failure</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">8000:8000</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/backend</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">ttsmysql</span>

  <span class="na">ttsmysql</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">mysql</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">--lower_case_table_names=1</span>
    <span class="na">container_name</span><span class="pi">:</span> <span class="s">ttsmysql</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">3306:3306"</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">MYSQL_DATABASE=tts</span>
      <span class="pi">-</span> <span class="s">MYSQL_USER = root</span>
      <span class="pi">-</span> <span class="s">MYSQL_ROOT_PASSWORD=1234</span>
      <span class="pi">-</span> <span class="s">TZ=Asia/Seoul</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>

  <span class="na">modelserver</span><span class="pi">:</span>
    <span class="na">platform</span><span class="pi">:</span> <span class="s">linux/amd64</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./backend/modelserver</span>
    <span class="na">ports</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">5000:5000</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">FLASK_APP=app</span>
      <span class="pi">-</span> <span class="s">FLASK_ENV=development</span>
    <span class="na">command</span><span class="pi">:</span> <span class="s">flask run --host=0.0.0.0</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/backend</span>

  <span class="na">rabbit</span><span class="pi">:</span>
      <span class="na">hostname</span><span class="pi">:</span> <span class="s">tts_host</span>
      <span class="na">image</span><span class="pi">:</span> <span class="s">rabbitmq:3-management</span>
      <span class="na">command</span><span class="pi">:</span> <span class="s">rabbitmq-server</span>
      <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
      <span class="na">environment</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">RABBITMQ_DEFAULT_USER=tts</span>
        <span class="pi">-</span> <span class="s">RABBITMQ_DEFAULT_PASS=tts123</span>
        <span class="pi">-</span> <span class="s">RABBITMQ_DEFAULT_VHOST=tts_host</span>
      <span class="na">ports</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">5672:5672</span>  
        <span class="pi">-</span> <span class="s">15672:15672</span>
      <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/var/lib/rabbitmq</span>
      <span class="na">networks</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">tts</span>
      <span class="na">depends_on</span><span class="pi">:</span>
        <span class="pi">-</span> <span class="s">modelserver</span>

  <span class="na">celery</span><span class="pi">:</span>
    <span class="na">platform</span><span class="pi">:</span> <span class="s">linux/amd64</span>
    <span class="na">build</span><span class="pi">:</span> <span class="s">./backend/modelserver</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">unless-stopped</span>
    <span class="na">depends_on</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">apiserver"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">rabbit"</span>
      <span class="pi">-</span> <span class="s2">"</span><span class="s">modelserver"</span>
    <span class="na">networks</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">tts</span>
    <span class="na">command</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">celery"</span><span class="pi">,</span><span class="s2">"</span><span class="s">-A"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">celery_app"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">worker"</span><span class="pi">,</span> <span class="s2">"</span><span class="s">--loglevel=info"</span><span class="pi">]</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">./backend:/backend</span>

<span class="na">networks</span><span class="pi">:</span>
  <span class="na">tts</span><span class="pi">:</span>
    <span class="na">driver</span><span class="pi">:</span> <span class="s">bridge</span>
</code></pre></div></div>

<h3 id="--dockerfile">- Dockerfile</h3>
<p><img src="/assets/images/Team_ForV/7-3.png" alt="image" width="70%" height="70%" /><br /></p>

<p>Dockerfile을 이해하기 위해선 docker 이미지라는 개념을 먼저 알아야한다.</p>

<p>도커 이미지란, 서비스 운영에 필요한 서버 프로그램, 소스 코드, 컴파일된 실행 파일을 묶은 형태로써 기존에 있는 이미지에 추가적인 구성을 더해 또 다른 이미지를 만들 수 있다.<br />
도커 허브와 같은 컨테이너 레지스트리에서 pull 받아서 사용하거나, dockerfile을 직접 작성해 이미지를 만들어서 push할 수 있다.</p>

<p>다 살펴보진 않고, 문제의 핵심부분인 model server에 쓰인 Dockerfile만 보자.</p>
<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Dockerfile</span>
<span class="k">FROM</span><span class="s"> python:3.6.15</span>

<span class="c"># Python</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> apt-utils <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nt">-y</span> <span class="nb">install </span>software-properties-common <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get update <span class="nt">--fix-missing</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nt">-y</span> <span class="nb">install</span> <span class="nt">--fix-missing</span> python3-pip <span class="o">&amp;&amp;</span> <span class="se">\
</span>  python3 <span class="nt">-m</span> pip <span class="nb">install </span>pip <span class="nt">--upgrade</span>

<span class="k">RUN </span>apt-get update <span class="nt">-y</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> build-essential gcc <span class="se">\
</span>  libsndfile1

<span class="c"># mecab start</span>
<span class="k">RUN </span>apt-get update <span class="o">&amp;&amp;</span> <span class="se">\
</span>  apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="nt">--no-install-recommends</span> tzdata g++ git curl
<span class="k">RUN </span>apt-get <span class="nb">install </span>python3-setuptools
<span class="k">RUN </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> default-jdk default-jre
<span class="c"># mecab end</span>

<span class="k">WORKDIR</span><span class="s"> /backend/modelserver</span>

<span class="k">COPY</span><span class="s"> requirements.txt .</span>
<span class="k">COPY</span><span class="s"> requirements_TTS.txt .</span>

<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
<span class="k">RUN </span>pip <span class="nb">install</span> <span class="nt">-r</span> requirements_TTS.txt

<span class="k">RUN </span>pip <span class="nb">install </span>celery
<span class="k">RUN </span>pip <span class="nb">install </span>google-cloud-storage

<span class="k">RUN </span>pip <span class="nb">install </span><span class="nv">nltk</span><span class="o">==</span>3.6.7
<span class="k">RUN </span>pip <span class="nb">install </span><span class="nv">konlpy</span><span class="o">==</span>0.6.0
<span class="k">RUN </span>pip <span class="nb">install </span>mecab-ko<span class="o">==</span>1.0.0
<span class="k">RUN </span>pip <span class="nb">install </span>mecab-python<span class="o">==</span>1.0.0
<span class="k">RUN </span>pip <span class="nb">install </span>python-mecab-ko<span class="o">==</span>1.0.14
<span class="k">RUN </span>pip <span class="nb">install </span><span class="nv">g2pk</span><span class="o">==</span>0.9.4

<span class="c"># mecab start</span>
<span class="c"># RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2</span>
<span class="c"># RUN update-alternatives --config python3</span>
<span class="k">RUN </span><span class="nb">cd</span> <span class="nb">.</span> <span class="o">&amp;&amp;</span> <span class="se">\
</span>  curl <span class="nt">-s</span> https://raw.githubusercontent.com/konlpy/konlpy/master/scripts/mecab.sh | bash <span class="nt">-s</span>
<span class="c"># mecab end</span>

<span class="k">RUN </span><span class="nb">export </span><span class="nv">LC_ALL</span><span class="o">=</span>C.UTF-8
<span class="k">ENV</span><span class="s"> LANG=C.UTF-8</span>
<span class="k">ENV</span><span class="s"> LANGUAGE=C.UTF-8</span>

<span class="k">COPY</span><span class="s"> . .</span>
<span class="k">USER</span><span class="s"> root</span>
</code></pre></div></div>

<h2 id="다음-글-소개">다음 글 소개</h2>
<p>도커의 개념과 프로젝트에 사용한 도커 세팅에 대해 간단히 알아보았다.<br />
다음 글에서는 ‘음성 학습’과 ‘음성 합성’에 필요한 AI 학습 모델과 라이브러리들에 대해 좀 더 자세히 알아보도록 하자.</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html">https://subicura.com/2017/01/19/docker-guide-for-beginners-1.html</a><br />
[초보를 위한 도커 안내서 - 도커란 무엇인가?]<br />
2) <a href="https://somjang.tistory.com/entry/Docker-ubuntu1604-%EA%B8%B0%EB%B0%98%EC%97%90%EC%84%9C-mecab-ko-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95">https://somjang.tistory.com/entry/Docker-ubuntu1604-%EA%B8%B0%EB%B0%98%EC%97%90%EC%84%9C-mecab-ko-%ED%99%9C%EC%9A%A9%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95</a><br />
[ubuntu16.04 기반에서 mecab-ko 활용하는 방법]<br />
3) <a href="https://github.com/litsynp/flask-g2pk">https://github.com/litsynp/flask-g2pk</a> [flask-g2pk]</p>]]></content><author><name>hi~ June!!</name></author><category term="Team_ForV" /><category term="docker" /><summary type="html"><![CDATA[Team_ForV의 프로젝트]]></summary></entry></feed>