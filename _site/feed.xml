<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-12T18:47:12+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 30 - 스트림 2</title><link href="http://localhost:4000/java%20lang/Chap30/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 30 - 스트림 2" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap30</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap30/"><![CDATA[<h2 id="30-1-스트림의-생성과-연결">30-1. 스트림의 생성과 연결</h2>
<h3 id="--스트림의-생성-스트림-생성에-필요한-데이터를-직접-전달">- <u>스트림의 생성: 스트림 생성에 필요한 데이터를 직접 전달</u></h3>
<p>스트림 생성과 관련하여 Stream&lt;T&gt; 인터페이스에 정의되어 있는 static 메소드가 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Stream</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">StreamOfStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// ex 1</span>
        <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">11</span><span class="o">,</span> <span class="mi">22</span><span class="o">,</span> <span class="mi">33</span><span class="o">,</span> <span class="mi">44</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// ex 2</span>
        <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"So Simple"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// ex 3</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">sl</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Toy"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">,</span> <span class="s">"Box"</span><span class="o">);</span>
        <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">sl</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">w</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">w</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// ex 4</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">sr</span> <span class="o">=</span> <span class="o">{</span><span class="s">"Toy"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">,</span> <span class="s">"Box"</span><span class="o">};</span>
        <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">sr</span><span class="o">)</span>
                <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/30-1.png" alt="image" width="40%" height="40%" /><br /></p>

<p>실행결과를 보면 알겠지만 전달한 인스턴스를 대상으로 스트림이 생성된다.</p>

<p>(추가)<br />
4번 예시와 같이 Wrapper 클래스 배열이 인자로 전달될 경우에는 하나의 배열로 이뤄진 스트림이 생성되는 것이 아니라, 배열에 저장된 요소로 이뤄진 스트림이 생성된다.</p>

<h3 id="--기본-자료형을-지원하는-스트림">- <u>기본 자료형을 지원하는 스트림</u></h3>
<p>오토박싱을 생략하기 위해 기본 자료형을 지원하는 스트림 인터페이스가 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">CreateIntStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showIntStream</span><span class="o">(</span><span class="nc">IntStream</span> <span class="n">is</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">is</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">n</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 인자로 전달하는 값을 스트림으로</span>
        <span class="nc">IntStream</span> <span class="n">is3</span> <span class="o">=</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">7</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span> 
        <span class="n">showIntStream</span><span class="o">(</span><span class="n">is3</span><span class="o">);</span>

        <span class="c1">// 숫자 5 부터 8 이전까지 스트림으로</span>
        <span class="nc">IntStream</span> <span class="n">is4</span> <span class="o">=</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">8</span><span class="o">);</span> 
        <span class="n">showIntStream</span><span class="o">(</span><span class="n">is4</span><span class="o">);</span>
     <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--병렬-스트림으로-변경">- <u>병렬 스트림으로 변경</u></h3>
<p>이미 스트림을 생성한 상태에서 이를 기반으로 병렬 스트림을 생성할 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Stream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.BinaryOperator</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ToParallelStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Simple"</span><span class="o">,</span> <span class="s">"Complex"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">);</span>
        <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ss</span> <span class="o">=</span> <span class="n">ls</span><span class="o">.</span><span class="na">stream</span><span class="o">();</span>
        
        <span class="nc">BinaryOperator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">lc</span> <span class="o">=</span> 
            <span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> 
               <span class="k">if</span><span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
                   <span class="k">return</span> <span class="n">s1</span><span class="o">;</span>
               <span class="k">else</span> 
                   <span class="k">return</span> <span class="n">s2</span><span class="o">;</span>                   
            <span class="o">};</span>
        
        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">ss</span><span class="o">.</span><span class="na">parallel</span><span class="o">()</span>
                      <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="n">lc</span><span class="o">);</span>
      
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--스트림의-연결">- <u>스트림의 연결</u></h3>
<p>두 개의 스트림을 연결하여 하나의 스트림을 생성할 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Stream</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ConcateStringStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ss1</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Cake"</span><span class="o">,</span> <span class="s">"Milk"</span><span class="o">);</span>
        <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ss2</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Lemon"</span><span class="o">,</span> <span class="s">"Jelly"</span><span class="o">);</span>
        
        <span class="c1">// 스트림을 하나로 묶은 후 출력</span>
        <span class="nc">Stream</span><span class="o">.</span><span class="na">concat</span><span class="o">(</span><span class="n">ss1</span><span class="o">,</span> <span class="n">ss2</span><span class="o">).</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>
     <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="30-2-스트림의-중간-연산">30-2. 스트림의 중간 연산</h2>
<h3 id="--맵핑mapping에-대한-추가-정리">- <u>맵핑(Mapping)에 대한 추가 정리</u></h3>
<p>Stream&lt;T&gt;의 map 메소드와 flatMap 메소드의 차이는 1:1 매핑이냐 1:* 매핑이나에 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// map</span>
<span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="nf">map</span><span class="o">(</span><span class="nc">Function</span><span class="o">&lt;</span><span class="no">T</span><span class="o">,</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">mapper</span><span class="o">)</span>

<span class="c1">// flatMap (stream을 반환한다.)</span>
<span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="nf">flatMap</span><span class="o">(</span><span class="nc">Function</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="nc">Stream</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="no">R</span><span class="o">&gt;&gt;</span> <span class="n">mapper</span><span class="o">)</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Collectors</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Stream</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">FlatMapStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">ss</span> <span class="o">=</span> <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"MY_AGE"</span><span class="o">,</span> <span class="s">"YOUR_LIFE"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">split</span><span class="o">(</span><span class="s">"_"</span><span class="o">)))</span>
                <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">"/"</span><span class="o">));</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ss</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/30-2.png" alt="image" width="90%" height="90%" /><br /></p>

<p>위의 예제보다 좀 더 현실적인 예제를 풀어보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ReportCard</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">kor</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">eng</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">math</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ReportCard</span><span class="o">(</span><span class="kt">int</span> <span class="n">kor</span><span class="o">,</span> <span class="kt">int</span> <span class="n">eng</span><span class="o">,</span> <span class="kt">int</span> <span class="n">math</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">kor</span> <span class="o">=</span> <span class="n">kor</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">eng</span> <span class="o">=</span> <span class="n">eng</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">math</span> <span class="o">=</span> <span class="n">math</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getKor</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">kor</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getEng</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">eng</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getMath</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">math</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">GradeAverage</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ReportCard</span><span class="o">[]</span> <span class="n">cards</span> <span class="o">=</span> <span class="o">{</span>
                <span class="k">new</span> <span class="nf">ReportCard</span><span class="o">(</span><span class="mi">70</span><span class="o">,</span> <span class="mi">80</span><span class="o">,</span> <span class="mi">90</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">ReportCard</span><span class="o">(</span><span class="mi">90</span><span class="o">,</span> <span class="mi">80</span><span class="o">,</span> <span class="mi">70</span><span class="o">),</span>
                <span class="k">new</span> <span class="nf">ReportCard</span><span class="o">(</span><span class="mi">80</span><span class="o">,</span> <span class="mi">80</span><span class="o">,</span> <span class="mi">80</span><span class="o">)</span>
        <span class="o">};</span>

        <span class="c1">// 학생들의 전과목 평균 구하기</span>
        <span class="kt">double</span> <span class="n">avg</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">cards</span><span class="o">)</span>
                <span class="o">.</span><span class="na">flatMapToInt</span><span class="o">(</span><span class="n">c</span> <span class="o">-&gt;</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">getKor</span><span class="o">(),</span> <span class="n">c</span><span class="o">.</span><span class="na">getEng</span><span class="o">(),</span> <span class="n">c</span><span class="o">.</span><span class="na">getMath</span><span class="o">()))</span>   <span class="c1">// 점수들이 담긴 스트림들</span>
                <span class="o">.</span><span class="na">average</span><span class="o">()</span>  <span class="c1">// IntStream, LongStream, DoubleStream에만 존재하는 메소드, OptionalDouble을 반환</span>
                <span class="o">.</span><span class="na">getAsDouble</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"avg. "</span> <span class="o">+</span> <span class="n">avg</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--정렬">- <u>정렬</u></h3>
<p>정렬 기능을 제공하는 중간 연산자 메소드들도 있다.</p>

<ul>
  <li>Comparable&lt;T&gt;
    <ul>
      <li>compareTo</li>
    </ul>
  </li>
  <li>Comparable&lt;T&gt;
    <ul>
      <li>compare</li>
    </ul>
  </li>
</ul>

<p>정렬을 위해서는 스트림을 구성하는 인스턴스가 Comparable&lt;T&gt;의 compareTo를 구현하고 있어야한다.<br />
또, 일시적으로 정렬의 기준을 마련해주어야할 때 Comparable&lt;T&gt;의 compare 메소드 구현에 해당하는 람다식을 전달해야 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 인스턴스 대상 정렬</span>
<span class="kn">import</span> <span class="nn">java.util.stream.Stream</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">InstSortedStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Apple"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">sorted</span><span class="o">()</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="sc">'\t'</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
        
        <span class="nc">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Apple"</span><span class="o">,</span> <span class="s">"Rabbit"</span><span class="o">)</span>
            <span class="o">.</span><span class="na">sorted</span><span class="o">((</span><span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="sc">'\t'</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 기본 타입 대상 정렬</span>
<span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.DoubleStream</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">PrimitiveSortedStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">IntStream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
            <span class="o">.</span><span class="na">sorted</span><span class="o">()</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">d</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">DoubleStream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mf">3.3</span><span class="o">,</span> <span class="mf">6.2</span><span class="o">,</span> <span class="mf">1.5</span><span class="o">,</span> <span class="mf">8.3</span><span class="o">)</span>
            <span class="o">.</span><span class="na">sorted</span><span class="o">()</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">d</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--루핑looping">- <u>루핑(Looping)</u></h3>
<blockquote>
  <p>루핑: 스트림을 이루는 모든 데이터 각각을 대상으로 특정 연산을 진행하는 행위</p>
</blockquote>

<p>대표적으로는 forEach가 있다.<br />
이는 최종 연산이지만, 중간 연산에도 루핑을 위한 메소드가 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nc">Stream</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">peek</span><span class="o">(</span><span class="nc">Consumer</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.stream.IntStream</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">LazyOpStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 최종 연산이 생략된 스트림의 파이프라인</span>
        <span class="nc">IntStream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">)</span>
            <span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">d</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
  
        <span class="c1">// 최종 연산이 존재하는 스트림의 파이프라인</span>
        <span class="nc">IntStream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">5</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">1</span><span class="o">)</span>
            <span class="o">.</span><span class="na">peek</span><span class="o">(</span><span class="n">d</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">d</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">sum</span><span class="o">();</span>            
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/30-3.png" alt="image" width="40%" height="40%" /><br />
실행 결과를 통해 스트림의 지연 처리 특성을 볼 수 있고, peek 연산이 중간 연산임을 알 수 있다.</p>

<h2 id="30-3-스트림의-최종-연산">30-3. 스트림의 최종 연산</h2>
<h3 id="--">- <u></u></h3>
<h3 id="---1">- <u></u></h3>
<h3 id="---2">- <u></u></h3>
<h3 id="---3">- <u></u></h3>
<h3 id="---4">- <u></u></h3>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[2960] 에라토스테네스의 체</title><link href="http://localhost:4000/boj/2960/" rel="alternate" type="text/html" title="[2960] 에라토스테네스의 체" /><published>2023-03-12T00:00:00+09:00</published><updated>2023-03-12T00:00:00+09:00</updated><id>http://localhost:4000/boj/2960</id><content type="html" xml:base="http://localhost:4000/boj/2960/"><![CDATA[<h2 id="silver-iv-에라토스테네스의-체---2960">[Silver IV] 에라토스테네스의 체 - 2960</h2>

<p><a href="https://www.acmicpc.net/problem/2960">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14464 KB, 시간: 128 ms</p>

<h3 id="분류">분류</h3>

<p>구현(implementation), 수학(math), 정수론(number_theory), 소수 판정(primality_test), 에라토스테네스의 체(sieve)</p>

<h3 id="문제-설명">문제 설명</h3>

<p>에라토스테네스의 체는 N보다 작거나 같은 모든 소수를 찾는 유명한 알고리즘이다.</p>

<p>이 알고리즘은 다음과 같다.</p>

<ol>
	<li>2부터 N까지 모든 정수를 적는다.</li>
	<li>아직 지우지 않은 수 중 가장 작은 수를 찾는다. 이것을 P라고 하고, 이 수는 소수이다.</li>
	<li>P를 지우고, 아직 지우지 않은 P의 배수를 크기 순서대로 지운다.</li>
	<li>아직 모든 수를 지우지 않았다면, 다시 2번 단계로 간다.</li>
</ol>

<p>N, K가 주어졌을 때, K번째 지우는 수를 구하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 N과 K가 주어진다. (1 ≤ K &lt; N, max(1, K) &lt; N ≤ 1000)</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에 K번째 지워진 수를 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<p>알고리즘 설명대로 구현하면 된다.<br />
배열을 생성할 때 인덱스와 숫자가 같도록 초기화하면 편하다.<br />
배수를 세는 것은 그 숫자만큼 더하면서 건너뛰면 된다.<br />
버퍼에 출력할 때는 toString이 없기 때문에 숫자 출력할 시 형변환해주어야한다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span> <span class="o">=</span> <span class="nc">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">).</span><span class="na">toArray</span><span class="o">();</span>   <span class="c1">// 인덱스와 숫자가 똑같도록 만들기 위해 0부터 배열 초기화</span>

        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span> <span class="o">+=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// 배수 세기 == 그 숫자만큼 더하면서 건너뛰기</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span> <span class="c1">// 이미 지워진 경우는 pass</span>

                <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">count</span> <span class="o">==</span> <span class="n">k</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="nc">String</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]));</span>
                    <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
                    <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">nums</span><span class="o">[</span><span class="n">j</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 29 - 스트림 1</title><link href="http://localhost:4000/java%20lang/Chap29/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 29 - 스트림 1" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-11T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap29</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap29/"><![CDATA[<h2 id="29-1-스트림의-이해와-스트림의-생성">29-1. 스트림의 이해와 스트림의 생성</h2>
<h3 id="--스트림stream의-이해">- <u>스트림(Stream)의 이해</u></h3>
<blockquote>
  <p>배열 또는 컬렉션 인스턴스에 저장된 데이터를 꺼내서 파이프에 흘려보낸다.</p>
</blockquote>

<p>파이프에 흘려보내는 데이터의 흐름을 가리켜 ‘스트림’이라 한다.<br />
그리고 데이터를 흘려보낼 파이프(연산)의 종류는 다음 두 가지로 나뉜다.</p>

<ul>
  <li>중간 연산(Intermediate Operation): 마지막이 아닌 위치에서 진행 되어야 하는 연산</li>
  <li>최종 연산(Terminal Operation): 마지막에 진행이 되어야 하는 연산</li>
</ul>

<h3 id="--스트림stream의-첫-번째-예제">- <u>스트림(Stream)의 첫 번째 예제</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.strea.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">MyFirstStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">ar</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">};</span>

        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">ar</span><span class="o">)</span> <span class="c1">// 스트림 생성(IntStream)</span>
                        <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>    <span class="c1">// 중간 연산 진행(IntStream)</span>
                        <span class="o">.</span><span class="na">sum</span><span class="o">();</span> <span class="c1">// 최종 연산 진행(int)</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--스트림stream의-특성">- <u>스트림(Stream)의 특성</u></h3>
<p>위의 작성한 코드를 부분 부분 살펴보자!</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">ar</span><span class="o">)</span> <span class="c1">// 스트림 생성하고,</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span>    <span class="c1">// filter 통과시키고,</span>
                <span class="o">.</span><span class="na">sum</span><span class="o">();</span> <span class="c1">// sum을 통과 시켜 그 결과 반환</span>
</code></pre></div></div>

<p>스트림의 연산은 효율과 성능을 고려하여 ‘지연(Lazy) 처리’ 방식으로 동작한다.<br />
즉 최종 연산인 sum이 호출되어야 filter의 호출 결과가 스트림에 반영되고, 이어서 sum의 호출 결과가 스트림에 반영된다.</p>

<h3 id="--스트림-생성하기-배열">- <u>스트림 생성하기: 배열</u></h3>
<blockquote>
  <p>Arrays 클래스의 static 메소드인 Arrays.stream()에 배열 참조값을 전달하면 된다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">stream</span><span class="o">(</span><span class="no">T</span><span class="o">[]</span> <span class="n">array</span><span class="o">)</span>
</code></pre></div></div>

<p>다음의 예시를 보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">StringStream</span> <span class="o">{</span>
    <span class="cm">/*
    forEach(Consumer&lt;? super T&gt; action)
    Consumer&lt;T&gt; voice accept(T t)
    */</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">names</span> <span class="o">=</span> <span class="o">{</span><span class="s">"YOON"</span><span class="o">,</span> <span class="s">"LEE"</span><span class="o">,</span> <span class="s">"PARK"</span><span class="o">};</span>

        <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stm</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">names</span><span class="o">);</span>  <span class="c1">// 스트림 생성</span>
        <span class="n">stm</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>    <span class="c1">// 최종 연산 진행</span>
        <span class="c1">// stm.forEach(System.out::println);    // 메소드 참조 방식</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>대상 배열의 특정 부분만 뽑아내서 스트림으로 생성하는 방법도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">IntStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">intArray</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">4</span><span class="o">,</span><span class="mi">5</span><span class="o">};</span>

        <span class="nc">IntStream</span> <span class="n">ism</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">insArray</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>  <span class="c1">// 인덱스 1부터 3 이전 까지</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--스트림-생성하기-컬렉션-인스턴스">- <u>스트림 생성하기: 컬렉션 인스턴스</u></h3>
<blockquote>
  <p>컬렉션 인스턴스를 대상으로 인스턴스 메소드 stream()을 호출</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ListStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Toy"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">,</span> <span class="s">"Box"</span><span class="o">);</span>
        <span class="nc">Stream</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">stm</span> <span class="o">=</span> <span class="n">ls</span><span class="o">.</span><span class="na">stream</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="29-2-필터링filtering과-맵핑mapping">29-2. 필터링(Filtering)과 맵핑(Mapping)</h2>
<h3 id="--필터링filtering">- <u>필터링(Filtering)</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Predicate&lt;T&gt;  boolean test(T t)</span>
<span class="nc">Stream</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">filter</span><span class="o">(</span><span class="nc">Predicate</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">predicate</span><span class="o">)</span>
</code></pre></div></div>

<p>filter 메소드는 내부적으로 스트림의 데이터를 하나씩 인자로 전달하면서 test를 호출한다.<br />
그리고 그 결과가 true가 반환되면 해당 데이터는 스트림에 남긴다.</p>

<h3 id="--맵핑mapping">- <u>맵핑(Mapping)</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Function&lt;T, R&gt;  R apply(T t)</span>
<span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="nc">Stream</span><span class="o">&lt;</span><span class="no">R</span><span class="o">&gt;</span> <span class="nf">map</span><span class="o">(</span><span class="nc">Function</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="no">R</span><span class="o">&gt;</span> <span class="n">mapper</span><span class="o">)</span>
</code></pre></div></div>

<p>map은 내부적으로 스트림의 데이터를 하나씩 인자로 전달하며 apply 메소드를 호출한다.<br />
그리고 그 결과로 반환되는 값을 모아 새로운 스트림을 생성한다.</p>

<p>추가)<br />
map의 인자로 apply 함수에 대한 람다식이 전달되기 때문에 반환과정에서 오토 박싱이 진행된다.<br />
따라서 기본 자료형의 값을 반환하는 경우를 고려한 메소드도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">MapToInt</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">,</span> <span class="s">"Simple"</span><span class="o">);</span>

        <span class="c1">// 오토 박싱 진행</span>
        <span class="n">ls</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">" "</span><span class="o">));</span>

        <span class="c1">// 오토 박싱 생략</span>
        <span class="n">ls</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
            <span class="o">.</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
            <span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">" "</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--종합-예제">- <u>종합 예제</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ToyPriceInfo</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">model</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">price</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">ToyPriceInfo</span><span class="o">(</span><span class="nc">String</span> <span class="n">model</span><span class="o">,</span> <span class="kt">int</span> <span class="n">price</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">model</span> <span class="o">=</span> <span class="n">model</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">price</span> <span class="o">=</span> <span class="n">price</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getPrice</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">price</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ToyStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">ToyPriceInfo</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">ls</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ToyPriceInfo</span><span class="o">(</span><span class="s">"GUN"</span><span class="o">,</span> <span class="mi">200</span><span class="o">));</span>
        <span class="n">ls</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ToyPriceInfo</span><span class="o">(</span><span class="s">"TEDDY"</span><span class="o">,</span> <span class="mi">350</span><span class="o">));</span>
        <span class="n">ls</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ToyPriceInfo</span><span class="o">(</span><span class="s">"CAR"</span><span class="o">,</span> <span class="mi">550</span><span class="o">));</span>

        <span class="c1">// 정가 500원 미만인 장난감 가격의 총 합</span>
        <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">ls</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span><span class="o">.</span><span class="na">getPrice</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mi">500</span><span class="o">)</span>
                <span class="o">.</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">t</span> <span class="o">-&gt;</span> <span class="n">t</span><span class="o">.</span><span class="na">getPrice</span><span class="o">())</span>
                <span class="o">.</span><span class="na">sum</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sum</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="29-3-리덕션reduction-병렬-스트림parallel-streams">29-3. 리덕션(Reduction), 병렬 스트림(Parallel Streams)</h2>
<h3 id="--리덕션과-reduce-메소드">- <u>리덕션과 reduce 메소드</u></h3>
<blockquote>
  <p>리덕션(Reduction): 데이터를 축소하는 연산</p>
</blockquote>

<p>앞서 보인 sum도 리덕션 연산에 해당한다.<br />
다른 리덕션 연산의 경우 연산의 내용이 이미 정해진 상태지만<br />
다음 메소드를 통해 전달하는 람다식에 의해 연산의 내용을 결정지을 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// BinaryOperator&lt;T&gt;  T apply(T t1, T t2)</span>
<span class="no">T</span> <span class="nf">reduce</span><span class="o">(</span><span class="no">T</span> <span class="n">identity</span><span class="o">,</span> <span class="nc">BinaryOperator</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">accumulator</span><span class="o">)</span>
</code></pre></div></div>

<p>reduce는 내부적으로 apply 메소드를 호출하면서 스트림에 저장된 데이터를 다음과 같은 방식으로 줄여 나간다.<br />
<img src="/assets/images/java-lang/29-1.png" alt="image" width="60%" height="60%" /><br /></p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ReductionStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Simple"</span><span class="o">,</span> <span class="s">"Complex"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">);</span>

        <span class="c1">// 길이가 더 긴 문자열을 반환하는 람다식</span>
        <span class="nc">BinaryOperator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">lc</span> <span class="o">=</span> <span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">s1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">s2</span><span class="o">;</span>
        <span class="o">};</span>

        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">ls</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                        <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="n">lc</span><span class="o">);</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>reduce 메소드는 ‘첫 번째 인자로 전달된 값’을 스트림이 빈 경우에 반환을 한다.<br />
뿐만 아니라 스트림이 비어 있지 않은 경우에는 이를 스트림의 첫 번째 데이터로 간주하고 리덕션을 진행한다.</p>

<h3 id="--병렬-스트림parallel-streams">- <u>병렬 스트림(Parallel Streams)</u></h3>
<p>하나의 작업을 둘 이상의 작업으로 나누어서 동시에 진행하는 것을 가리켜 ‘병렬 처리’라 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ReductionStream</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Simple"</span><span class="o">,</span> <span class="s">"Complex"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">);</span>

        <span class="c1">// 길이가 더 긴 문자열을 반환하는 람다식</span>
        <span class="nc">BinaryOperator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">lc</span> <span class="o">=</span> <span class="o">(</span><span class="n">s1</span><span class="o">,</span> <span class="n">s2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">return</span> <span class="n">s1</span><span class="o">;</span>
            <span class="o">}</span>
            <span class="k">return</span> <span class="n">s2</span><span class="o">;</span>
        <span class="o">};</span>

        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">ls</span><span class="o">.</span><span class="na">parallelStream</span><span class="o">()</span>    <span class="c1">// 병렬 처리를 위한 스트림 생성</span>
                        <span class="o">.</span><span class="na">reduce</span><span class="o">(</span><span class="s">""</span><span class="o">,</span> <span class="n">lc</span><span class="o">);</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>병렬 스트림을 생성하면 이어지는 연산들은 CPU의 코어 수를 고려하여 적절하게 병렬로 처리된다.</p>

<p><img src="/assets/images/java-lang/29-1.png" alt="image" width="60%" height="60%" /><br /></p>

<p>이렇게 병렬처리의 핵심은 연산의 횟수를 줄이는데 있지 않고 연산의 단계를 줄이는데 있다.<br />
다만, 작업을 어떻게 나눌 것인지, 몇 개로 나눌 것인지 등에 따라 효율이 달라지기 때문에 무조건적으로 병렬처리가 좋다고 할 수 없음에 주의하자.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[2609] 최대공약수와 최소공배수</title><link href="http://localhost:4000/boj/2609/" rel="alternate" type="text/html" title="[2609] 최대공약수와 최소공배수" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-11T00:00:00+09:00</updated><id>http://localhost:4000/boj/2609</id><content type="html" xml:base="http://localhost:4000/boj/2609/"><![CDATA[<h2 id="bronze-i-최대공약수와-최소공배수---2609">[Bronze I] 최대공약수와 최소공배수 - 2609</h2>

<p><a href="https://www.acmicpc.net/problem/2609">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 16212 KB, 시간: 152 ms</p>

<h3 id="분류">분류</h3>

<p>유클리드 호제법(euclidean), 수학(math), 정수론(number_theory)</p>

<h3 id="문제-설명">문제 설명</h3>

<p>두 개의 자연수를 입력받아 최대 공약수와 최소 공배수를 출력하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에는 두 개의 자연수가 주어진다. 이 둘은 10,000이하의 자연수이며 사이에 한 칸의 공백이 주어진다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에는 입력으로 주어진 두 수의 최대공약수를, 둘째 줄에는 입력으로 주어진 두 수의 최소 공배수를 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<ul>
  <li>최대공약수 구하기
    <ul>
      <li>i를 1부터 n까지 for문을 이용하여 1씩 증가시키며 나누어 떨어지는지 검사한다.</li>
      <li>loop의 수를 줄이기 위해 두 숫자 중 더 작은 숫자를 넘기 전까지만 수행한다.(최대공약수는 작은 수보다 더 클 수 없음)</li>
    </ul>
  </li>
  <li>최소공배수
    <ul>
      <li>두 수의 곱 나누기 최대공약수</li>
    </ul>
  </li>
</ul>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// 최대공약수: 약수들끼리 겹치는 수</span>
        <span class="c1">// 최소공배수: 두 수의 곱 / 최대공약수</span>

        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
        
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>    <span class="c1">// 최대공약수</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">y</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="n">max</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="o">)</span> <span class="o">/</span> <span class="n">max</span><span class="o">;</span>    <span class="c1">// 최소 공배수</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">max</span> <span class="o">+</span> <span class="s">"\n"</span> <span class="o">+</span> <span class="n">min</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[9506] 약수들의 합</title><link href="http://localhost:4000/boj/9506/" rel="alternate" type="text/html" title="[9506] 약수들의 합" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-11T00:00:00+09:00</updated><id>http://localhost:4000/boj/9506</id><content type="html" xml:base="http://localhost:4000/boj/9506/"><![CDATA[<h2 id="bronze-i-약수들의-합---9506">[Bronze I] 약수들의 합 - 9506</h2>

<p><a href="https://www.acmicpc.net/problem/9506">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 16512 KB, 시간: 176 ms</p>

<h3 id="분류">분류</h3>

<p>구현(implementation), 수학(math), 정수론(number_theory)</p>

<h3 id="문제-설명">문제 설명</h3>

<p>어떤 숫자 n이 자신을 제외한 모든 약수들의 합과 같으면, <span style="line-height:1.6em">그 수를 완전수라고 한다. </span></p>

<p>예를 들어 6은 6 = 1 + 2 + 3 으로 완전수이다.</p>

<p>n이 완전수인지 아닌지 판단해주는 프로그램을 작성하라.</p>

<h3 id="입력">입력</h3>

<p>입력은 테스트 케이스마다 한 줄 간격으로 n이 주어진다. (2 &lt; n &lt; 100,000)</p>

<p>입력의 마지막엔 -1이 주어진다.</p>

<h3 id="출력">출력</h3>

<p>테스트케이스 마다 한줄에 하나씩 출력해야 한다.</p>

<p>n이 완전수라면, n을 n이 아닌 약수들의 합으로 나타내어 출력한다(예제 출력 참고).</p>

<p>이때, 약수들은 오름차순으로 나열해야 한다.</p>

<p>n이 완전수가 아니라면 n is NOT perfect. 를 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<ul>
  <li>
    <p>구현 방법
  각 숫자들의 약수들을 담은 리스트를 만들어<br />
  stream api를 활용하여 총 합을 구한 뒤<br />
  완전수 여부에 따라 결과를 출력한다.</p>
  </li>
  <li>
    <p>약수를 구하는 방법</p>
    <ul>
      <li>1부터 n까지 for문으로 하나씩 증가시키면서 나누어 떨어지는지 검사한다.</li>
      <li>loop의 수를 줄이기 위해 제곱근을 구하는 Math.sqrt()를 사용하였다.</li>
    </ul>
  </li>
</ul>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// 약수들을 담을 리스트</span>

            <span class="kt">int</span> <span class="n">sqrt</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>   <span class="c1">// 제곱수</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">sqrt</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>    <span class="c1">// 약수 중 작은 수</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">/</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// 제곱근 두 번 추가 방지</span>
                        <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span> <span class="o">/</span> <span class="n">i</span><span class="o">);</span>    <span class="c1">// 약수 중 큰 수</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span> <span class="c1">// 약수 모음 오름차순 정렬</span>
            <span class="n">nums</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>   <span class="c1">// 맨 마지막 수(자기 자신) 제거</span>

            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">.</span><span class="na">intValue</span><span class="o">()).</span><span class="na">sum</span><span class="o">();</span>  <span class="c1">// 자기 자신을 제외한 약수들의 총 합</span>
            
            <span class="nc">String</span> <span class="n">result</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">sumString</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>    <span class="c1">// Stream&lt;Integer&gt;</span>
                    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span> <span class="c1">// Stream&lt;String&gt;</span>
                    <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">" + "</span><span class="o">));</span>    <span class="c1">// "1 + 2 + 3"</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span> <span class="n">sumString</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">;</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="s">" is NOT perfect.\n"</span><span class="o">;</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[2750] 수 정렬하기</title><link href="http://localhost:4000/boj/2750/" rel="alternate" type="text/html" title="[2750] 수 정렬하기" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T00:00:00+09:00</updated><id>http://localhost:4000/boj/2750</id><content type="html" xml:base="http://localhost:4000/boj/2750/"><![CDATA[<h2 id="bronze-ii-수-정렬하기---2750">[Bronze II] 수 정렬하기 - 2750</h2>

<p><a href="https://www.acmicpc.net/problem/2750">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14936 KB, 시간: 188 ms</p>

<h3 id="분류">분류</h3>

<p>정렬(sorting), 구현(implementation)</p>

<h3 id="문제-설명">문제 설명</h3>

<p>N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 수의 개수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 수가 주어진다. 이 수는 절댓값이 1,000보다 작거나 같은 정수이다. 수는 중복되지 않는다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<p>입력받은 숫자들을 리스트에 넣어<br />
정렬 후<br />
리스트에 있는 요소들을 출력한다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">bf</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">()));</span>
        <span class="o">}</span>

        <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>
        <span class="n">nums</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[자바 코테] 입출력 방법 정리</title><link href="http://localhost:4000/java%20coding%20test/IO/" rel="alternate" type="text/html" title="[자바 코테] 입출력 방법 정리" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T00:00:00+09:00</updated><id>http://localhost:4000/java%20coding%20test/IO</id><content type="html" xml:base="http://localhost:4000/java%20coding%20test/IO/"><![CDATA[<h2 id="왜-사용하는가">왜 사용하는가?</h2>
<blockquote>
  <p>Scanner나 println 메소드보다 속도가 월등히 빠르다…!</p>
</blockquote>

<h2 id="bufferedreader">BufferedReader</h2>
<p><code class="language-plaintext highlighter-rouge">readLine</code>: 입력으로 들어온 데이터를 한 줄로 읽어서 String으로 바꿔주는 메소드<br />
<code class="language-plaintext highlighter-rouge">close</code>: 입력 스트림을 닫고 사용하던 자원을 해제</p>

<p>보통 readLine()으로 읽고 StringTokenizer나 split()울 통해 값을 배열 등등에 넣는다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="c1">// BufferedReader를 사용하기 위해서는 throws IOException을 해 주어야 함.</span>
		<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

		<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

		<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="bufferedwriter">BufferedWriter</h2>
<p><code class="language-plaintext highlighter-rouge">write</code>: 출력할 내용을 버퍼에 담음<br />
<code class="language-plaintext highlighter-rouge">flush</code>: 버퍼를 비워내는 동시에 콘솔에 출력<br />
<code class="language-plaintext highlighter-rouge">close</code>: 출력 스트림을 닫고 사용하던 자원을 해제</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="c1">// BufferedWriter를 사용하기 위해서는 throws IOException을 해 주어야 함.</span>
		<span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"Hello World"</span><span class="o">);</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> 
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java Coding Test" /><category term="java" /><summary type="html"><![CDATA[코딩 테스트용 자바 정리]]></summary></entry><entry><title type="html">[10798] 새로읽기</title><link href="http://localhost:4000/boj/10798/" rel="alternate" type="text/html" title="[10798] 새로읽기" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T00:00:00+09:00</updated><id>http://localhost:4000/boj/10798</id><content type="html" xml:base="http://localhost:4000/boj/10798/"><![CDATA[<h2 id="bronze-i-세로읽기---10798">[Bronze I] 세로읽기 - 10798</h2>

<p><a href="https://www.acmicpc.net/problem/10798">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14280 KB, 시간: 164 ms</p>

<h3 id="분류">분류</h3>

<p>구현(implementation), 문자열(string)</p>

<h3 id="문제-설명">문제 설명</h3>

<p>아직 글을 모르는 영석이가 벽에 걸린 칠판에 자석이 붙어있는 글자들을 붙이는 장난감을 가지고 놀고 있다. </p>

<p>이 장난감에 있는 글자들은 영어 대문자 ‘A’부터 ‘Z’, 영어 소문자 ‘a’부터 ‘z’, 숫자 ‘0’부터 ‘9’이다. 영석이는 칠판에 글자들을 수평으로 일렬로 붙여서 단어를 만든다. 다시 그 아래쪽에 글자들을 붙여서 또 다른 단어를 만든다. 이런 식으로 다섯 개의 단어를 만든다. 아래 그림 1은 영석이가 칠판에 붙여 만든 단어들의 예이다. </p>

<pre>A A B C D D
a f z z 
0 9 1 2 1
a 8 E W g 6
P 5 h 3 k x</pre>

<p>&lt;그림 1&gt;</p>

<p>한 줄의 단어는 글자들을 빈칸 없이 연속으로 나열해서 최대 15개의 글자들로 이루어진다. 또한 만들어진 다섯 개의 단어들의 글자 개수는 서로 다를 수 있다. </p>

<p>심심해진 영석이는 칠판에 만들어진 다섯 개의 단어를 세로로 읽으려 한다. 세로로 읽을 때, 각 단어의 첫 번째 글자들을 위에서 아래로 세로로 읽는다. 다음에 두 번째 글자들을 세로로 읽는다. 이런 식으로 왼쪽에서 오른쪽으로 한 자리씩 이동 하면서 동일한 자리의 글자들을 세로로 읽어 나간다. 위의 그림 1의 다섯 번째 자리를 보면 두 번째 줄의 다섯 번째 자리의 글자는 없다. 이런 경우처럼 세로로 읽을 때 해당 자리의 글자가 없으면, 읽지 않고 그 다음 글자를 계속 읽는다. 그림 1의 다섯 번째 자리를 세로로 읽으면 D1gk로 읽는다. </p>

<p>그림 1에서 영석이가 세로로 읽은 순서대로 글자들을 공백 없이 출력하면 다음과 같다:</p>

<p>Aa0aPAf985Bz1EhCz2W3D1gkD6x</p>

<p>칠판에 붙여진 단어들이 주어질 때, 영석이가 세로로 읽은 순서대로 글자들을 출력하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>총 다섯줄의 입력이 주어진다. 각 줄에는 최소 1개, 최대 15개의 글자들이 빈칸 없이 연속으로 주어진다. 주어지는 글자는 영어 대문자 ‘A’부터 ‘Z’, 영어 소문자 ‘a’부터 ‘z’, 숫자 ‘0’부터 ‘9’ 중 하나이다. 각 줄의 시작과 마지막에 빈칸은 없다.</p>

<h3 id="출력">출력</h3>

<p>영석이가 세로로 읽은 순서대로 글자들을 출력한다. 이때, 글자들을 공백 없이 연속해서 출력한다. </p>

<h2 id="아이디어">아이디어</h2>
<p>입력을 줄단위로 받아서 string 배열로 저장한 뒤<br />
이중 for문을 돌려서 새로로 쓰되<br />
인덱스가 배열의 길이을 넘어가면 건너뛴다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="nc">String</span><span class="o">[]</span> <span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
        <span class="o">}</span>
        
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 28 - 메소드 참조와 Optional</title><link href="http://localhost:4000/java%20lang/Chap28/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 28 - 메소드 참조와 Optional" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap28</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap28/"><![CDATA[<h2 id="28-1-메소드-참조-method-references">28-1. 메소드 참조 (Method References)</h2>
<blockquote>
  <p>이미 정의되어 있는 메소드가 있다면, 이 메소드의 정의가 람다식을 대신할 수 있지 않을까?</p>
</blockquote>

<p>실제로 메소드 정의는 람다식을 대신할 수 있다.</p>

<h3 id="--메소드-참조의-4가지-유형과-메소드-참조의-장점">- <u>메소드 참조의 4가지 유형과 메소드 참조의 장점</u></h3>
<p>메소드 참조의 유형은 총 4가지이다.</p>
<ul>
  <li>static 메소드의 참조</li>
  <li>참조변수를 통한 인스턴스 메소드 참조</li>
  <li>클래스 이름을 통한 인스턴스 메소드 참조</li>
  <li>생성자 참조</li>
</ul>

<h3 id="--static-메소드의-참조">- <u>static 메소드의 참조</u></h3>
<p>static 메소드 참조 방법<br />
ClassName::staticMethodName</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrangeList</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">9</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>

        <span class="c1">// Consumer&lt;List&lt;Integer&gt;&gt; c = l -&gt; Collections.reverse(l);</span>
        <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="nl">Collections:</span><span class="o">:</span><span class="n">reverse</span><span class="o">;</span>
        <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인스턴스-메소드의-참조1-인스턴스가-존재하는-상황에서-참조">- <u>인스턴스 메소드의 참조1: 인스턴스가 존재하는 상황에서 참조</u></h3>
<p>인스턴스 메소드 참조 방법 - 1<br />
ReferenceName::instanceMethodName</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">JustSort</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrangeList3</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">9</span><span class="o">));</span>

        <span class="nc">JustSort</span> <span class="n">js</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JustSort</span><span class="o">();</span>

        <span class="c1">// Consumer&lt;List&lt;Integer&gt;&gt; c = e -&gt; js.sort(e);</span>
        <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="nl">js:</span><span class="o">:</span><span class="n">sort</span><span class="o">;</span>
        <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>람다식에서 같은 지역 내에 선언된 참조변수 js에 접근하고 있다.<br />
람다식이 인스턴스의 생성으로 이어진다는 사실을 고려하면 특이한 일이지만 결론적으로 람다식에서 같은 지역에 선언된 참조변수에 접근하는 것은 가능하다. 단, 여기에는 조건이 있다.</p>

<blockquote>
  <p>람다식에서 접근 가능한 참조변수는 final로 선언되었거나 effectively final이어야 한다.</p>
</blockquote>

<p>이렇게 제한한 이유는 참조변수가 참조하는 대상이 중간에 바뀔경우 논리적 혼란을 일으키거나 예측 불가능한 상황으로 이어질 수 있기 때문이다.</p>

<p><br />
좀 더 실질적인 상황을 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ForEachDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">);</span>

        <span class="n">ls</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">));</span> <span class="c1">// 람다식 기반</span>
        <span class="n">ls</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>    <span class="c1">// 메소드 참조 기반</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Collection&lt;E&gt; 인터페이스는 Iterable&lt;T&gt;를 상속한다.<br />
이 인터페이스에 정의되어있는 forEach메소드를 살펴보면 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">default</span> <span class="kt">void</span> <span class="nf">forEach</span><span class="o">(</span><span class="nc">Consumer</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="no">T</span> <span class="n">t</span> <span class="o">:</span> <span class="k">this</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">action</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인스턴스-메소드의-참조2-인스턴스-없이-인스턴스-메소드-참조">- <u>인스턴스 메소드의 참조2: 인스턴스 없이 인스턴스 메소드 참조</u></h3>
<p>인스턴스 메소드 참조 방법 - 2<br />
ClassName::instanceMethodName</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.ToIntBiFunction</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">IBox</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">IBox</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">larger</span><span class="o">(</span><span class="nc">IBox</span> <span class="n">box</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">box</span><span class="o">.</span><span class="na">n</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">box</span><span class="o">.</span><span class="na">n</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoObjectMethodRef</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">IBox</span> <span class="n">iBox1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IBox</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="nc">IBox</span> <span class="n">iBox2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IBox</span><span class="o">(</span><span class="mi">7</span><span class="o">);</span>

        <span class="c1">// 두 상자에 저장된 값 비교하여 더 큰 값 반환</span>
        <span class="c1">// ToIntBiFunction&lt;IBox, IBox&gt; bf = (box1, box2) -&gt; box1.larger(box2);</span>
        <span class="nc">ToIntBiFunction</span><span class="o">&lt;</span><span class="nc">IBox</span><span class="o">,</span> <span class="nc">IBox</span><span class="o">&gt;</span> <span class="n">bf</span> <span class="o">=</span> <span class="nl">IBox:</span><span class="o">:</span><span class="n">larger</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">bigNum</span> <span class="o">=</span> <span class="n">bf</span><span class="o">.</span><span class="na">applyAsInt</span><span class="o">(</span><span class="n">iBox1</span><span class="o">,</span> <span class="n">iBox2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bigNum</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 방식처럼 람다를 메소드 참조로 바꿀 수 있는 이유는 larger가 ‘첫 번째 인자로 전달된 인스턴스의 메소드’임에 있고, 이는 일종의 약속이다.<br />
bf가 참조하는 메소드는 IBox::larger이고, 이는 ibox1, ibox2도 갖는 인스턴스 메소드지만, ‘첫 번째 전달인자를 대상으로 이 메소드를 호출하기로 약속하였으므로’ 그에 근거하여 실행이 된다.</p>

<h3 id="--생성자-참조">- <u>생성자 참조</u></h3>
<p>람다식을 작성하다 보면 인스턴스를 생성하고 이의 참조 값을 반환해야 하는 경우가 있다.<br />
ClassName::new</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringMaker</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Function&lt;char[], String&gt; f = ar -&gt; new String(ar);</span>
        <span class="nc">Function</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">[],</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="nl">String:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>

        <span class="kt">char</span><span class="o">[]</span> <span class="n">src</span> <span class="o">=</span> <span class="o">{</span><span class="sc">'R'</span><span class="o">,</span> <span class="sc">'o'</span><span class="o">,</span> <span class="sc">'b'</span><span class="o">,</span> <span class="sc">'o'</span><span class="o">,</span> <span class="sc">'t'</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">src</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="28-2-optional-클래스">28-2. Optional 클래스</h2>
<blockquote>
  <p>Optional 클래스를 사용하여 조건에 따라 코드의 흐름이 나뉘어지는 상황을 막을 수 있음</p>
</blockquote>

<p>클래스를 디자인할 때 가급적 클래스의 인스턴스 변수는 null로 두지 않는 것이 좋다.<br />
다만, 어쩔 수 없이 null을 허용해야 하는 상황에 대한 대비책으로 Otional 클래스가 하나의 대답이 될 수 있다.</p>

<h3 id="--nullpointerexception-예외의-발생-샹황">- <u>NullPointerException 예외의 발생 샹황</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Friend</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nc">Company</span> <span class="n">cmp</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Friend</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="nc">Company</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="n">cmp</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Company</span> <span class="nf">getCmp</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Company</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">cName</span><span class="o">;</span>
    <span class="nc">ContInfo</span> <span class="n">cInfo</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Company</span><span class="o">(</span><span class="nc">String</span> <span class="n">cn</span><span class="o">,</span> <span class="nc">ContInfo</span> <span class="n">ci</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cName</span> <span class="o">=</span> <span class="n">cn</span><span class="o">;</span>
        <span class="n">cInfo</span> <span class="o">=</span> <span class="n">ci</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cName</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">ContInfo</span> <span class="nf">getCInfo</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cInfo</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ContInfo</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>   <span class="c1">// null 일 수 있음</span>
    <span class="nc">String</span> <span class="n">adrs</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">ContInfo</span><span class="o">(</span><span class="nc">String</span> <span class="n">ph</span><span class="o">,</span> <span class="nc">String</span> <span class="n">ad</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">ph</span><span class="o">;</span>
        <span class="n">adrs</span> <span class="o">=</span> <span class="n">ad</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPhone</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">phone</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getAdrs</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">adrs</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">NullPointerCaseStudy</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showCompAddr</span><span class="o">(</span><span class="nc">Friend</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 친구의 회사 주소를 출력하는 메소드</span>
        <span class="nc">String</span> <span class="n">addr</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    
        <span class="k">if</span><span class="o">(</span><span class="n">f</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Company</span> <span class="n">com</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getCmp</span><span class="o">();</span>
            
            <span class="k">if</span><span class="o">(</span><span class="n">com</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">ContInfo</span> <span class="n">info</span> <span class="o">=</span> <span class="n">com</span><span class="o">.</span><span class="na">getCInfo</span><span class="o">();</span>
                
                <span class="k">if</span><span class="o">(</span><span class="n">info</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
                    <span class="n">addr</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="na">getAdrs</span><span class="o">();</span>   
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">addr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">addr</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"There's no address information."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">ContInfo</span> <span class="n">ci</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ContInfo</span><span class="o">(</span><span class="s">"321-444-577"</span><span class="o">,</span> <span class="s">"Republic of Korea"</span><span class="o">);</span>
        <span class="nc">Company</span> <span class="n">cp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Company</span><span class="o">(</span><span class="s">"YaHo Co., Ltd."</span><span class="o">,</span> <span class="n">ci</span><span class="o">);</span>
        <span class="nc">Friend</span> <span class="n">frn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Friend</span><span class="o">(</span><span class="s">"LEE SU"</span><span class="o">,</span> <span class="n">cp</span><span class="o">);</span>

        <span class="c1">// 친구 정보에서 회사 주소를 출력</span>
        <span class="n">showCompAddr</span><span class="o">(</span><span class="n">frn</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음과 같이 클래스의 멤버 변수가 null인 경우 NullPointerException 예외가 발생하는 것을 막기 위해 if-else로 case에 따라 수행 내용을 분리해놓을 경우 코드의 가독성도 떨어지고 불필요하게 코드가 길어진다.<br />
위의 코드를 Optional 클래스를 통해 적절하게 수정해보자</p>

<h3 id="--optional-클래스의-기본적인-사용-방법">- <u>Optional 클래스의 기본적인 사용 방법</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">StringOptional1</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os1</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Toy1"</span><span class="o">));</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os2</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Toy2"</span><span class="o">));</span>

        <span class="k">if</span><span class="o">(</span><span class="n">os1</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="c1">// 내용물이 존재하면 true</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os1</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>  <span class="c1">// get을 통한 내용물 반환</span>

        <span class="k">if</span><span class="o">(</span><span class="n">os2</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os2</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Optional은 멤버에 인스턴스를 저장하는 일종의 래퍼 클래스이다.<br />
<img src="/assets/images/java-lang/28-2.png" alt="image" width="70%" height="70%" /><br /></p>

<p>위의 코드를 Optional의 인스턴스 메소드인 ifPresent 메소드를 통해 간략화시킬 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">StringOptional2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os1</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Toy1"</span><span class="o">));</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os2</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Toy2"</span><span class="o">));</span>

        <span class="cm">/* ifPresent(): Consumer 인스턴스를 입력인자로 받음 */</span>
        <span class="n">os1</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>  <span class="c1">// 람다식 버전</span>
        <span class="n">os2</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span> <span class="c1">// 메소드 참조 버전</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--map-메소드의-소개">- <u>map 메소드의 소개</u></h3>
<blockquote>
  <p>map 메소드는 apply 메소드가 반환하는 대상을 ‘Optional 인스턴스에 담아서’ 반환한다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">OptionalMap</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os1</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Optional String"</span><span class="o">);</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os2</span> <span class="o">=</span> <span class="n">os1</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os2</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>

        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os3</span> <span class="o">=</span> <span class="n">os1</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">' '</span><span class="o">,</span> <span class="sc">'_'</span><span class="o">))</span>
                                  <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os3</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/28-3.png" alt="image" width="70%" height="70%" /><br /></p>

<p>map 함수의 매개변수 형은 Function이다.<br />
apply 함수를 람다식을 통해 구현해주게 되면 그 구현한 내용을 통해 해당 인스턴스를 처리한 뒤<br />
Optional 인스턴스로 한 번 감싸서 반환한다는 것이 특징이다.</p>

<p>따라서 반환한 Optional 인스턴스 안에 값을 가져오기 위해 get 등의 메소드를 사용해주었다.</p>

<h3 id="--orelse-메소드의-소개">- <u>orElse 메소드의 소개</u></h3>
<p>Optional 인스턴스에 저장된 내용물을 반환하는 메소드에는 get과 orElse가 있다.<br />
차이점은 orElse는 저장된 내용물이 없을 때, 대신해서 반환할 대상을 지정할 수 있다는 점이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">OptionalOrElse</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os1</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os2</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"So Basic"</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">os1</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
                       <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"Empty"</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">os2</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
                       <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"Empty"</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--nullpointercasestudyjava의-개선-결과">- <u>NullPointerCaseStudy.java의 개선 결과</u></h3>
<p>map과 orElse 메소드를 통해 처음 봤던 코드를 간략히 줄여보았다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Friend</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nc">Company</span> <span class="n">cmp</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Friend</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="nc">Company</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="n">cmp</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Company</span> <span class="nf">getCmp</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Company</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">cName</span><span class="o">;</span>
    <span class="nc">ContInfo</span> <span class="n">cInfo</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Company</span><span class="o">(</span><span class="nc">String</span> <span class="n">cn</span><span class="o">,</span> <span class="nc">ContInfo</span> <span class="n">ci</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cName</span> <span class="o">=</span> <span class="n">cn</span><span class="o">;</span>
        <span class="n">cInfo</span> <span class="o">=</span> <span class="n">ci</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cName</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">ContInfo</span> <span class="nf">getCInfo</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cInfo</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ContInfo</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>   <span class="c1">// null 일 수 있음</span>
    <span class="nc">String</span> <span class="n">adrs</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">ContInfo</span><span class="o">(</span><span class="nc">String</span> <span class="n">ph</span><span class="o">,</span> <span class="nc">String</span> <span class="n">ad</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">ph</span><span class="o">;</span>
        <span class="n">adrs</span> <span class="o">=</span> <span class="n">ad</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPhone</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">phone</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getAdrs</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">adrs</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">NullPointerCaseStudy2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showCompAddr</span><span class="o">(</span><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Friend</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Friend:</span><span class="o">:</span><span class="n">getCmp</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Company:</span><span class="o">:</span><span class="n">getCInfo</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">ContInfo:</span><span class="o">:</span><span class="n">getAdrs</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"There's no address information."</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">addr</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">ContInfo</span> <span class="n">ci</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ContInfo</span><span class="o">(</span><span class="s">"321-444-577"</span><span class="o">,</span> <span class="s">"Republic of Korea"</span><span class="o">);</span>
        <span class="nc">Company</span> <span class="n">cp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Company</span><span class="o">(</span><span class="s">"YaHo Co., Ltd."</span><span class="o">,</span> <span class="n">ci</span><span class="o">);</span>
        <span class="nc">Friend</span> <span class="n">frn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Friend</span><span class="o">(</span><span class="s">"LEE SU"</span><span class="o">,</span> <span class="n">cp</span><span class="o">);</span>

        <span class="c1">// 친구 정보에서 회사 주소를 출력</span>
        <span class="n">showCompAddr</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">frn</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--optional-클래스의-flatmap-메소드">- <u>Optional 클래스의 flatMap 메소드</u></h3>
<p>map은 람다식이 반환하는 내용물을 Optional로 감싸서 반환한다.<br />
flatMap은 그냥 반환한다.</p>

<p>클래스의 멤버를 Optional로 두면 이 멤버와 관련된 코드 전반에 걸쳐서 코드의 개선을 기대할 수 있다.<br />
이렇게 멤버를 Optional로 두는 경우에는 map보다 flatMap이 더 어울린다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Friend</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">cmp</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Friend</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="n">cmp</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="nf">getCmp</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Company</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">cName</span><span class="o">;</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">ContInfo</span><span class="o">&gt;</span> <span class="n">cInfo</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Company</span><span class="o">(</span><span class="nc">String</span> <span class="n">cn</span><span class="o">,</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">ContInfo</span><span class="o">&gt;</span> <span class="n">ci</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cName</span> <span class="o">=</span> <span class="n">cn</span><span class="o">;</span>
        <span class="n">cInfo</span> <span class="o">=</span> <span class="n">ci</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cName</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">ContInfo</span><span class="o">&gt;</span> <span class="nf">getCInfo</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cInfo</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ContInfo</span> <span class="o">{</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">phone</span><span class="o">;</span>   <span class="c1">// null 일 수 있음</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">adrs</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">ContInfo</span><span class="o">(</span><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ph</span><span class="o">,</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ad</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">ph</span><span class="o">;</span>
        <span class="n">adrs</span> <span class="o">=</span> <span class="n">ad</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getPhone</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">phone</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getAdrs</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">adrs</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">NullPointerCaseStudy3</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showCompAddr</span><span class="o">(</span><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Friend</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">String</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Friend:</span><span class="o">:</span><span class="n">getCmp</span><span class="o">)</span>
                <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Company:</span><span class="o">:</span><span class="n">getCInfo</span><span class="o">)</span>
                <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">ContInfo:</span><span class="o">:</span><span class="n">getAdrs</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"There's no address information."</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">addr</span><span class="o">);</span>    
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">ContInfo</span><span class="o">&gt;</span> <span class="n">ci</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                    <span class="k">new</span> <span class="nf">ContInfo</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="kc">null</span><span class="o">),</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Republic of Korea"</span><span class="o">))</span>
        <span class="o">);</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">cp</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">Company</span><span class="o">(</span><span class="s">"YaHo Co., Ltd."</span><span class="o">,</span> <span class="n">ci</span><span class="o">));</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Friend</span><span class="o">&gt;</span> <span class="n">frn</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">Friend</span><span class="o">(</span><span class="s">"LEE SU"</span><span class="o">,</span> <span class="n">cp</span><span class="o">));</span>

        <span class="c1">// 친구 정보에서 회사 주소를 출력</span>
        <span class="n">showCompAddr</span><span class="o">(</span><span class="n">frn</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="28-3-optionalint-optionallong-optionaldouble-클래스">28-3. OptionalInt, OptionalLong, OptionalDouble 클래스</h2>
<p>Optional 클래스는 제네릭 클래스이다.<br />
따라서 기본 자료형을 다루기 위해서는 다른 방식이 필요하다.</p>

<h3 id="--optional과-optionalxxx와의-차이점">- <u>Optional과 OptionalXXX와의 차이점</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.OptionalInt</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">OptionalIntBase</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">OptionalInt</span> <span class="n">oi1</span> <span class="o">=</span> <span class="nc">OptionalInt</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="nc">OptionalInt</span> <span class="n">oi2</span> <span class="o">=</span> <span class="nc">OptionalInt</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"[Step 1.] : "</span><span class="o">);</span>
        <span class="n">oi1</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="n">oi2</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"[Step 2.] : "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">oi1</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">oi2</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>기본적인 코드구성은 동일하다.<br />
단, OptionalXXX 클래스들에는 map과 flatMap 메소드가 정의되어 있지 않다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 27 - 람다와 함수형 인터페이스</title><link href="http://localhost:4000/java%20lang/Chap27/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 27 - 람다와 함수형 인터페이스" /><published>2023-03-07T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap27</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap27/"><![CDATA[<h2 id="27-1-람다와-함수형-인터페이스">27-1. 람다와 함수형 인터페이스</h2>
<h3 id="--인스턴스보다-기능-하나가-필요한-상황을-위한-람다">- <u>인스턴스보다 기능 하나가 필요한 상황을 위한 람다</u></h3>
<blockquote>
  <p>기능 하나를 정의해서 전달해야 하는 상황</p>
</blockquote>

<p>자바는 객체지향언어이기 때문에 인스턴스를 전달하는 형태이지만 내용을 보면 메소드, 즉 기능을 전달하는 상황이 생기곤 한다.<br />
이러한 상황에서 람다가 유용하게 쓰일 수 있다.</p>

<h3 id="--매개변수가-있고-반환하지-않는-람다식">- <u>매개변수가 있고 반환하지 않는 람다식</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">LambdaExample</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OneParamNoReturn</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">LambdaExample</span> <span class="n">l</span><span class="o">;</span>

        <span class="c1">// 줄임 없는 표현</span>
        <span class="n">l</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span> <span class="o">};</span>

        <span class="c1">// 중괄호 생략</span>
        <span class="n">l</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>

        <span class="c1">// 매개변수 형 생략</span>
        <span class="n">l</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>

        <span class="c1">// 매개변수 소괄호 생략</span>
        <span class="n">l</span> <span class="o">=</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>

        <span class="n">l</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Lambda example!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Calculate</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">cal</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TwoParamNoReturn</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Calculate</span> <span class="n">c</span><span class="o">;</span>    <span class="c1">// 매개변수가 둘 이상인 경우, 괄호를 생략하는 것은 불가능하다.</span>

        <span class="c1">// 덧셈 진행</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">);</span>
        <span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>

        <span class="c1">// 뺄셈 진행</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="o">);</span>
        <span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>

        <span class="c1">// 곱셈 진행</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="o">);</span>
        <span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--매개변수가-있고-반환하는-람다식">- <u>매개변수가 있고 반환하는 람다식</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">RCalculate</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">cal</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TwoParamAndReturn</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RCalculate</span> <span class="n">c</span><span class="o">;</span>

        <span class="c1">// 몸체에 return이 들어가면 중괄호 생략 불가</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span> <span class="o">};</span>    <span class="c1">// c = (a, b) -&gt; { a + b; }; 불가능</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">3</span><span class="o">));</span>

        <span class="c1">// return 문이 메소드의 몸체를 이루는 유일한 경우</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--매개변수가-없는-람다식">- <u>매개변수가 없는 람다식</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kd">interface</span> <span class="nc">Generator</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">rand</span><span class="o">();</span> <span class="c1">// 매개변수 없는 메소드</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoParamAndReturn</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Generator</span> <span class="n">g</span><span class="o">;</span>

        <span class="n">g</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
            <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
        <span class="o">};</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">rand</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--함수형-인터페이스와-어노테이션">- <u>함수형 인터페이스와 어노테이션</u></h3>
<blockquote>
  <p>함수형 인터페이스: 추상 메소드가 딱 하나만 존재하는 인터페이스</p>
</blockquote>

<p>@FunctionsalInterface 어노테이션 타입을 통해 함수형 인터페이스에 부합하는지를 확인할 수 있다.<br />
인터페이스에 둘 이상의 추상 메소드가 존재하면, 컴파일 오류로 이어진다.<br />
그러나 static, default 선언이 붙은 메소드의 정의는 함수형 인터페이스의 정의에 아무런 영향을 미치지 않는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">Calculate</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">cal</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
    <span class="k">default</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">sub</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--람다식과-제네릭">- <u>람다식과 제네릭</u></h3>
<p>인터페이스는 제네릭으로 정의하는 것이 가능하다.<br />
따라서 제네릭으로 정의된 함수형 인터페이스를 대상으로 람다식을 작성할 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">Calculator</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">T</span> <span class="nf">cal</span><span class="o">(</span><span class="no">T</span> <span class="n">a</span><span class="o">,</span> <span class="no">T</span> <span class="n">b</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LambdaGeneric</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 참조변수의 형을 지정해서 문장을 구성하면 된다.</span>
        <span class="nc">Calculator</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">intCalculator</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">intCalculator</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>

        <span class="nc">Calculator</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">doubleCalculator</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doubleCalculator</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mf">4.32</span><span class="o">,</span> <span class="mf">3.45</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="27-2-정의되어-있는-함수형-인터페이스">27-2. 정의되어 있는 함수형 인터페이스</h2>
<blockquote>
  <p>표준 함수형 인터페이스의 추상 메소드 정의에 해당하는 람다식을 작성해서 전달해야한다.</p>
</blockquote>

<h3 id="--미리-정의되어-있는-함수형-인터페이스">- <u>미리 정의되어 있는 함수형 인터페이스</u></h3>
<p><img src="/assets/images/java-lang/27-1.png" alt="image" width="80%" height="80%" /><br /></p>

<p>‘미리 정의해 놓은’ 함수형 인터페이스들이 있다.<br />
메소드의 반환형과 매개변수 선언에 차이를 둔 다양한 함수형 인터페이스들을 표준으로 정의하고 있다.<br />
위의 표준 인터페이스들을 알아야 removeIf 같은 메소드도 사용할 수 있다.</p>

<h3 id="--predicatet">- Predicate&lt;T&gt;</h3>
<p>Predicate&lt;T&gt; 인터페이스에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>  <span class="c1">// 전달된 인자를 대상으로 true, false 판단할 때</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Predicate</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">PredicateDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">lst</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">lst</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
                <span class="n">s</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>       
        
        <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">12</span><span class="o">);</span>
    
        <span class="kt">int</span> <span class="n">s</span><span class="o">;</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"짝수 합: "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>

        <span class="n">s</span> <span class="o">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"홀수 합: "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--suppliert">- Supplier&lt;T&gt;</h3>
<p>Supplier&lt;T&gt; 인터페이스에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">T</span> <span class="nf">get</span><span class="o">();</span>    <span class="c1">// 단순히 무엇인가 반환할 때</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Supplier</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">SupplierDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">makeIntList</span><span class="o">(</span><span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>    
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>  <span class="c1">// 난수를 생성해 담는다.</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">spr</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
            <span class="k">return</span> <span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
        <span class="o">};</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">makeIntList</span><span class="o">(</span><span class="n">spr</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

        <span class="n">list</span> <span class="o">=</span> <span class="n">makeIntList</span><span class="o">(</span><span class="n">spr</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--consumert">- Consumer&lt;T&gt;</h3>
<p>Consumer&lt;T&gt;에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>   <span class="c1">// 전달된 인자 기반으로 '반환' 이외의 다른 결과를 보일 때</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ConsumerDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        
        <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="s">"Pineapple"</span><span class="o">);</span>    <span class="c1">// 출력이라는 결과를 보임</span>
        <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="s">"Strawberry"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--functiont-r">- Function&lt;T, R&gt;</h3>
<p>Consumer&lt;T&gt;에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// T: 매개변수형, R: 반환형</span>
<span class="no">R</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>   <span class="c1">// 전달 인자와 반환 값이 모두 존재할 때</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">FunctionDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">"Robot"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">"System"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">FunctionDemo2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">cti</span> <span class="o">=</span> <span class="n">d</span> <span class="o">-&gt;</span> <span class="n">d</span> <span class="o">*</span> <span class="mf">0.393701</span><span class="o">;</span>
        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">itc</span> <span class="o">=</span> <span class="n">d</span> <span class="o">-&gt;</span> <span class="n">d</span> <span class="o">*</span> <span class="mf">2.54</span><span class="o">;</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1cm = "</span> <span class="o">+</span> <span class="n">cti</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mf">1.0</span><span class="o">)</span> <span class="o">+</span> <span class="s">"inch"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1inch = "</span> <span class="o">+</span> <span class="n">itc</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mf">1.0</span><span class="o">)</span> <span class="o">+</span> <span class="s">"cm"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--predicatet-suppliert-consumert-functiont-r을-구체화하고-다양화-한-인터페이스들">- Predicate&lt;T&gt;, Supplier&lt;T&gt;, Consumer&lt;T&gt;, Function&lt;T, R&gt;을 구체화하고 다양화 한 인터페이스들</h3>
<p>T를 기본 자료형으로 결정하여 정의한 인터페이스들도 존재한다.<br />
이렇게 할 경우 박싱, 언박싱 과정이 필요없어진다.<br />
다양하게 있으니 필요한 순간에 찾아서 써보도록 하자.</p>

<h3 id="--removeif-메소드를-사용해-보자">- <u>removeIf 메소드를 사용해 보자.</u></h3>
<p>Collection&lt;E&gt; 인터페이스에 정의되어 있는 다음 디폴트 메소드를 살펴보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">default</span> <span class="kt">boolean</span> <span class="nf">removeIf</span><span class="o">(</span><span class="nc">Predicate</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">filter</span><span class="o">)</span>
</code></pre></div></div>

<p>위 메소드의 기능에 대한 자바 문서의 설명은 다음과 같다.<br />
“Removes all of the elements of this collection that satisfy the given predicate”</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Predicate</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">RemoveIfDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ls1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="o">-</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">ls2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(-</span><span class="mf">1.1</span><span class="o">,</span> <span class="mf">2.2</span><span class="o">,</span> <span class="mf">3.3</span><span class="o">,</span> <span class="o">-</span><span class="mf">4.4</span><span class="o">,</span> <span class="mf">5.5</span><span class="o">));</span>

        <span class="c1">// Predicate의 정의에는 와일드카드를 이용한 하한제한이 걸려있기 때문에 Double과 Integer 모두 적용하기 위해 Number로 E를 결정함</span>
        <span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">Number</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mf">0.0</span><span class="o">;</span>

        <span class="n">ls1</span><span class="o">.</span><span class="na">removeIf</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
        <span class="n">ls2</span><span class="o">.</span><span class="na">removeIf</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry></feed>