<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-05-03T17:32:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[Voice Pocket] spring boot에서 celery 활용하기</title><link href="http://localhost:4000/voice_pocket/Voice_Pocket02/" rel="alternate" type="text/html" title="[Voice Pocket] spring boot에서 celery 활용하기" /><published>2023-05-03T00:00:00+09:00</published><updated>2023-05-03T00:00:00+09:00</updated><id>http://localhost:4000/voice_pocket/Voice_Pocket02</id><content type="html" xml:base="http://localhost:4000/voice_pocket/Voice_Pocket02/"><![CDATA[<h2 id="굳이-django를-써야할까">굳이 django를 써야할까..?</h2>
<p>한이음 멘토님과 프로젝트 관련 이야기를 하다가, 이런 이야기가 나왔다.</p>

<p><u>나</u>: 음성 합성 관련 라이브러리가 python으로 쓰여서 백엔드 서버도 <code class="language-plaintext highlighter-rouge">django</code>를 사용하고 있습니다 ㅠㅠ<br />
<u>멘토님</u>: 음.. 서버가 요청을 <code class="language-plaintext highlighter-rouge">rabbitMQ</code> 같은 message queue에 publish하면, python으로 받아서 처리하면 되니 굳이 서버까지 python으로 만들 필요는 없지요<br />
<u>나</u>: (생각해보니 그렇네…!)</p>

<h2 id="서버-개발-언어에-굳이-제약을-걸-필요가-없겠구나">서버 개발 언어에 굳이 제약을 걸 필요가 없겠구나!</h2>
<p>아무래도 이제는 <code class="language-plaintext highlighter-rouge">django</code>보단 <code class="language-plaintext highlighter-rouge">spring boot</code>가 더 익숙하기도 하고, 요즘 적극적으로 공부하고 있는 프레임워크이기 때문에 굳이 python을 사용해야하는 상황이 아니라면 <code class="language-plaintext highlighter-rouge">django</code>를 고집하고 있을 이유도 없겠다는 생각에 기존에 구현해뒀던 서버를 <code class="language-plaintext highlighter-rouge">spring boot</code>로 변경하게 되었다.</p>

<blockquote>
  <p>spring boot(java, TTS 요청) → RabbitMQ → Celery(python, TTS 수행)</p>
</blockquote>

<p><img src="/assets/images/Voice_Pocket/2-3.png" alt="image" /><br /></p>

<h2 id="python-celery를-사용하기">python celery를 사용하기</h2>
<p>python에서는 기본적으로 동기식으로 일을 처리한다.<br />
<img src="/assets/images/Voice_Pocket/2-2.png" alt="image" /><br /></p>

<p>즉, 5명의 사용자가 TTS를 요청한다면, 5번 째 요청한 사람은 앞에 4명의 작업이 끝날 때까지 기다리고 있어야한다.<br />
해당 작업은 시간이 꽤 걸리는 작업이기 때문에 작업을 비동기적으로 처리해줄 방법이 필요했고, 그래서 찾은 것이 <code class="language-plaintext highlighter-rouge">celery</code>이다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">Celery</span>

<span class="c1"># celery app 정의
</span><span class="n">app</span> <span class="o">=</span> <span class="n">Celery</span><span class="p">()</span>
<span class="n">app</span><span class="p">.</span><span class="n">config_from_object</span><span class="p">(</span><span class="s">"celery_config"</span><span class="p">)</span>

<span class="c1"># task 정의
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">task</span>
<span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="n">result</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span>
    <span class="k">return</span> <span class="n">result</span>

<span class="c1"># task 비동기 호출
</span><span class="n">task</span> <span class="o">=</span> <span class="n">add</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span>
</code></pre></div></div>
<p>celery는 task queue를 사용하고, 이런 식으로 python으로 정의해놓은 함수를 이용해 쉽게 task를 정의 및 호출이 가능하다는 것이 장점이다.</p>

<h2 id="spring-boot에서-celery로-작업-넘기기">spring boot에서 celery로 작업 넘기기</h2>
<p><img src="/assets/images/Voice_Pocket/2-1.png" alt="image" width="60%" height="60%" /><br />
단순할 줄 알았는데, 생각보다 많은 삽질을 했다.</p>

<p>처음에는 <code class="language-plaintext highlighter-rouge">spring boot</code>에서 해당 queue에 json 형식으로 인자를 주고, 그 인자를 받아 pasing하는 task를 정의하려고 했으나, 생각해보니 task를 정의한다고 해도 그걸 어디서 호출할 것인지도 모호했고,</p>

<p>그냥 celery queue에 message를 실어주면, 알아서 worker가 수행해주지 않을까 싶었는데,<br />
queue에 실리는 task에는 일정 형식이 필요했고, 그게 맞지 않으면, worker가 그냥 message queue에서 해당 message를 삭제해버렸다.</p>

<p>관련해서 이것저것 찾아보다가 <code class="language-plaintext highlighter-rouge">medium</code>에서 해답을 얻을 수 있었다.</p>

<h2 id="celery-bootsteps-사용하기">celery bootsteps 사용하기</h2>
<blockquote>
  <p>You may want to embed custom Kombu consumers to manually process your messages.<br />
요약하자면 ‘사용자가 custom한 message consumer를 추가할 수 있다.</p>
</blockquote>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">redis</span><span class="p">,</span> <span class="n">json</span>

<span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">Celery</span>
<span class="kn">from</span> <span class="nn">celery</span> <span class="kn">import</span> <span class="n">bootsteps</span>
<span class="kn">from</span> <span class="nn">kombu</span> <span class="kn">import</span> <span class="n">Consumer</span><span class="p">,</span> <span class="n">Exchange</span><span class="p">,</span> <span class="n">Queue</span>

<span class="n">rd</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">'host_name'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port_num</span><span class="p">,</span> <span class="n">db</span><span class="o">=</span><span class="n">db_num</span><span class="p">)</span>

<span class="n">queue</span> <span class="o">=</span> <span class="n">Queue</span><span class="p">(</span><span class="s">"queue_name"</span><span class="p">,</span> <span class="n">Exchange</span><span class="p">(</span><span class="s">"exchange_name"</span><span class="p">),</span> <span class="s">"key_name"</span><span class="p">)</span>

<span class="n">app</span> <span class="o">=</span> <span class="n">Celery</span><span class="p">()</span>
<span class="n">app</span><span class="p">.</span><span class="n">config_from_object</span><span class="p">(</span><span class="s">"celery_config"</span><span class="p">)</span>

<span class="c1"># TTS 정의
</span><span class="o">@</span><span class="n">app</span><span class="p">.</span><span class="n">task</span>
<span class="k">def</span> <span class="nf">text_to_speech</span><span class="p">(</span><span class="n">uuid</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
    <span class="kn">from</span> <span class="nn">tts_process</span> <span class="kn">import</span> <span class="n">add_synth</span><span class="p">,</span> <span class="n">is_set</span><span class="p">,</span> <span class="n">make_tts</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">is_set</span><span class="p">(</span><span class="n">email</span><span class="p">):</span>
        <span class="n">add_synth</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>

    <span class="n">make_tts</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">uuid</span><span class="p">,</span> <span class="n">text</span><span class="p">)</span>
        
    <span class="k">return</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">email</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">uuid</span><span class="si">}</span><span class="s">.wav"</span>


<span class="c1"># Decalring the general input message handler
</span><span class="k">class</span> <span class="nc">InputMessageHandler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
        <span class="n">_type</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s">"type"</span><span class="p">]</span>
        
        <span class="c1"># if you want to accept only specific type of message, you need below
</span>        <span class="k">if</span> <span class="n">_type</span> <span class="o">==</span> <span class="s">"ETL"</span><span class="p">:</span>
            <span class="n">ETLMessageHandler</span><span class="p">().</span><span class="n">handle</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
        
        <span class="c1"># if body is json type, you need below
</span>        <span class="s">'''
        body_json = json.loads(body)  
        _type = body_json["type"]

        if _type == "ETL":
            ETLMessageHandler().handle(body_json)
        '''</span>


<span class="c1"># Declaring the ETL message handler
</span><span class="k">class</span> <span class="nc">ETLMessageHandler</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">):</span>
        <span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">"Working on ETL for message: </span><span class="si">{</span><span class="n">body</span><span class="si">}</span><span class="s">"</span><span class="p">)</span>
        <span class="c1"># TODO: Calling out your Celery tasks here
</span>        <span class="n">_uuid</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s">"uuid"</span><span class="p">]</span>
        <span class="n">_email</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s">"email"</span><span class="p">]</span>
        <span class="n">_text</span> <span class="o">=</span> <span class="n">body</span><span class="p">[</span><span class="s">"text"</span><span class="p">]</span>
        
        <span class="c1"># 정의한 task를 호출
</span>        <span class="n">task</span> <span class="o">=</span> <span class="n">text_to_speech</span><span class="p">.</span><span class="n">delay</span><span class="p">(</span><span class="n">_uuid</span><span class="p">,</span> <span class="n">_email</span><span class="p">,</span> <span class="n">_text</span><span class="p">)</span>
        <span class="n">_task_json</span> <span class="o">=</span> <span class="n">json</span><span class="p">.</span><span class="n">dumps</span><span class="p">({</span><span class="s">"task_id"</span><span class="p">:</span><span class="n">task</span><span class="p">.</span><span class="nb">id</span><span class="p">})</span>
        <span class="n">rd</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">_uuid</span><span class="p">,</span> <span class="n">_task_json</span><span class="p">)</span>


<span class="c1"># Declaring the bootstep for our purposes
</span><span class="k">class</span> <span class="nc">InputMessageConsumerStep</span><span class="p">(</span><span class="n">bootsteps</span><span class="p">.</span><span class="n">ConsumerStep</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">get_consumers</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">channel</span><span class="p">):</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">Consumer</span><span class="p">(</span><span class="n">channel</span><span class="p">,</span>
                         <span class="n">queues</span><span class="o">=</span><span class="p">[</span><span class="n">queue</span><span class="p">],</span>
                         <span class="n">callbacks</span><span class="o">=</span><span class="p">[</span><span class="bp">self</span><span class="p">.</span><span class="n">handle_message</span><span class="p">],</span>
                         <span class="n">accept</span><span class="o">=</span><span class="p">[</span><span class="s">"json"</span><span class="p">])]</span>

    <span class="k">def</span> <span class="nf">handle_message</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">body</span><span class="p">,</span> <span class="n">message</span><span class="p">):</span>
        <span class="n">InputMessageHandler</span><span class="p">().</span><span class="n">handle</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>
        <span class="n">message</span><span class="p">.</span><span class="n">ack</span><span class="p">()</span>


<span class="n">app</span><span class="p">.</span><span class="n">steps</span><span class="p">[</span><span class="s">"consumer"</span><span class="p">].</span><span class="n">add</span><span class="p">(</span><span class="n">InputMessageConsumerStep</span><span class="p">)</span>
</code></pre></div></div>

<p>rabbitMQ 브로커에 kombu로 만든 queue를 얹어놓고, 거기에 spring boot에서 message를 publish하는 전략이다.<br />
body에서 필요한 인자들을 뽑아내, handle 메소드 안 쪽에서 미리 정의해놓은 celery task를 호출하는 방식으로 이루어진다.</p>

<p>개인적으로 느끼기에 많이 특이한 방식이기도 하고, ai 관련 라이브러리들은 보통 python으로 많이 짜여있어서,<br />
서버는 서버 따로, ai 관련 작업은 해당 작업 따로 관리하고자 할 때 유용하게 사용할 수 있을 것 같아 따로 정리해두었다.</p>

<p>혹시 비슷한 작업을 하고자한다면 참고하는 것도 좋을 것 같다 :)<br />
<a href="https://github.com/hi-june/boot_rabbit_celery">https://github.com/hi-june/boot_rabbit_celery</a> [Spring boot + RabbitMQ + Celery demo project]</p>

<h2 id="reference">Reference</h2>
<p>1) <a href="https://medium.com/python4you/calling-celery-tasks-not-from-python-699bd635d317">https://medium.com/python4you/calling-celery-tasks-not-from-python-699bd635d317</a> [Calling Celery Tasks not from Python]</p>]]></content><author><name>hi~ June!!</name></author><category term="Voice_Pocket" /><category term="Info" /><summary type="html"><![CDATA[Voice Pocket의 프로젝트]]></summary></entry><entry><title type="html">[Voice Pocket] TTS 작업 속도 개선기</title><link href="http://localhost:4000/voice_pocket/Voice_Pocket03/" rel="alternate" type="text/html" title="[Voice Pocket] TTS 작업 속도 개선기" /><published>2023-05-03T00:00:00+09:00</published><updated>2023-05-03T00:00:00+09:00</updated><id>http://localhost:4000/voice_pocket/Voice_Pocket03</id><content type="html" xml:base="http://localhost:4000/voice_pocket/Voice_Pocket03/"><![CDATA[<h2 id="음성-합성을-위한-과정">음성 합성을 위한 과정</h2>
<p>사용자의 요청에 따라 음성 파일을 합성하는 전반적인 과정은 다음과 같다.</p>

<p>1) 클라이언트 요청<br />
2) 해당 음성 모델로부터 Systhesizer object initialize</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">synthesizer</span> <span class="o">=</span> <span class="n">Synthesizer</span><span class="p">(</span>
            <span class="n">tts_checkpoint</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">tts_model_file_path</span><span class="si">}</span><span class="s">"</span><span class="p">,</span>
            <span class="n">tts_config_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">tts_config_path</span><span class="si">}</span><span class="s">"</span>
        <span class="p">)</span>
</code></pre></div></div>

<p>3) 2에서 만든 Synthesizer object로부터 tts 함수 호출(wav 파일 생성)</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">symbol</span> <span class="o">=</span> <span class="n">synthesizer</span><span class="p">.</span><span class="n">tts_config</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">characters</span>   <span class="c1"># symbol set
</span><span class="n">text</span> <span class="o">=</span> <span class="n">normalize_text</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">symbol</span><span class="p">)</span> <span class="c1"># text normalize
</span><span class="n">wav</span> <span class="o">=</span> <span class="n">synthesizer</span><span class="p">.</span><span class="n">tts</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span> <span class="c1"># conver text to speech
</span><span class="n">synthesizer</span><span class="p">.</span><span class="n">save_wav</span><span class="p">(</span><span class="n">wav</span><span class="p">,</span> <span class="n">wav_path</span><span class="p">)</span> <span class="c1"># write wav file
</span></code></pre></div></div>

<p>4) 생성된 wav 파일을 gcs(google cloud storage) bucket에 저장</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">upload_wav_to_bucket</span><span class="p">(</span><span class="n">wav_path</span><span class="p">,</span> <span class="n">email</span><span class="p">,</span> <span class="n">uuid</span><span class="p">):</span>
    <span class="n">storage_client</span> <span class="o">=</span> <span class="n">storage</span><span class="p">.</span><span class="n">Client</span><span class="p">()</span>
    
    <span class="n">bucket_name</span> <span class="o">=</span> <span class="n">BUCKET_NAME</span>
    <span class="n">source_file_name</span> <span class="o">=</span> <span class="n">wav_path</span>
    <span class="n">destination_blob_name</span> <span class="o">=</span> <span class="sa">f</span><span class="s">'</span><span class="si">{</span><span class="n">email</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">uuid</span><span class="si">}</span><span class="s">.wav'</span>
    
    <span class="n">bucket</span> <span class="o">=</span> <span class="n">storage_client</span><span class="p">.</span><span class="n">bucket</span><span class="p">(</span><span class="n">bucket_name</span><span class="p">)</span>
    <span class="n">blob</span> <span class="o">=</span> <span class="n">bucket</span><span class="p">.</span><span class="n">blob</span><span class="p">(</span><span class="n">destination_blob_name</span><span class="p">)</span>

    <span class="n">blob</span><span class="p">.</span><span class="n">upload_from_filename</span><span class="p">(</span><span class="n">source_file_name</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="문제는-너무-느리다는-것">문제는 너무 느리다는 것..</h2>
<p>음성 하나 합성하는데 걸리는 시간이 너무 느리다는 것이 계속 걸렸다.</p>

<p>2번과 3번 과정이 가장 핵심적인 부분이었고, 각각 과정(특히, 2번)들에서 많은 시간이 소요되었다.</p>

<p>애초에 <code class="language-plaintext highlighter-rouge">coqui-tts</code>에서 제공하는 라이브러리를 사용하여 음성 합성을 진행하고 있기 때문에,<br />
위의 과정 중 3번에 해당하는 text를 기반으로 wav 파일을 합성하는 데 걸리는 시간은 건드리기 힘들었다.</p>

<blockquote>
  <p>따라서, 작업 요청마다 Synthesizer instance가 initialize되는 시간만 날려버려도, 시간을 상당히 많이 줄일 수 있을 것이라 판단했고, 해당 부분에 cache를 적용하기로 했다.</p>
</blockquote>

<h2 id="redis-cache">redis cache</h2>
<p><code class="language-plaintext highlighter-rouge">redis</code>는 간단히 설명하자면 key-value 형식으로 데이터를 저장하는 in-memory 기반의 데이터베이스이다.</p>

<p>애초에 gpu 서버에서 음성 학습을 시키고, 모델이 만들어질 때,<br />
해당 모델 파일로부터 synthesizer를 initialize하여 synthesizer object를 redis 캐시에 저장해두고,<br />
필요한 순간에 가져다가 쓸 수 있다면, 요청마다 initiaize되는 시간을 줄일 수 있을 것이라고 생각했다.</p>

<p>정리하자면,</p>
<ul>
  <li>
    <p>음성 모델 학습이 끝나고<br />
1) 음성 모델 합성이 완료되면 해당 모델을 기반으로 synthesizer object를 initialize.<br />
2) synthesizer object를 redis에 저장</p>
  </li>
  <li>
    <p>음성 합성 요청 시<br />
1) 클라이언트 요청<br />
2) redis에 접근하여 미리 저장해둔 synthesizer objcet를 불러옴<br />
3) 불러온 object로 TTS 수행</p>
  </li>
</ul>

<h2 id="class의-instance를-redis에-저장할-수-있을까">class의 instance를 redis에 저장할 수 있을까?</h2>
<p><code class="language-plaintext highlighter-rouge">redis</code>에서는 value로 다양한 data type을 지원한다.<br />
대표적으로 string을 지원하므로 python의 pickle 모듈을 사용하여 객체를 문자열로 직렬화하여 저장하는 방식을 사용했다.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">pickle</span>
<span class="kn">import</span> <span class="nn">redis</span>

<span class="c1"># 레디스 연결
</span><span class="n">rd</span> <span class="o">=</span> <span class="n">redis</span><span class="p">.</span><span class="n">Redis</span><span class="p">(</span><span class="n">host</span><span class="o">=</span><span class="s">'{host_name}'</span><span class="p">,</span> <span class="n">port</span><span class="o">=</span><span class="n">port_num</span><span class="p">,</span> <span class="n">db</span><span class="o">=</span><span class="n">db_num</span><span class="p">)</span>

<span class="c1"># synthesizer initialize
</span><span class="n">synthesizer</span> <span class="o">=</span> <span class="n">Synthesizer</span><span class="p">(</span>
            <span class="n">tts_checkpoint</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">tts_model_file_path</span><span class="si">}</span><span class="s">"</span><span class="p">,</span>
            <span class="n">tts_config_path</span> <span class="o">=</span> <span class="sa">f</span><span class="s">"</span><span class="si">{</span><span class="n">tts_config_path</span><span class="si">}</span><span class="s">"</span>
        <span class="p">)</span>

<span class="c1"># synthesizer 객체를 pickle로 serialize하여 redis에 저장
</span><span class="n">serialized_syn</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">synthesizer</span><span class="p">)</span>
<span class="n">rd</span><span class="p">.</span><span class="nb">set</span><span class="p">(</span><span class="n">email</span><span class="p">,</span> <span class="n">serialized_syn</span><span class="p">)</span>
    
<span class="c1"># redis에 저장해둔 객체를 불러옴
</span><span class="n">serialized_syn</span> <span class="o">=</span> <span class="n">rd</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">email</span><span class="p">)</span>
<span class="n">syn</span> <span class="o">=</span> <span class="n">pickle</span><span class="p">.</span><span class="n">loads</span><span class="p">(</span><span class="n">serialized_syn</span><span class="p">)</span>

<span class="n">symbol</span> <span class="o">=</span> <span class="n">syn</span><span class="p">.</span><span class="n">tts_config</span><span class="p">.</span><span class="n">characters</span><span class="p">.</span><span class="n">characters</span>
<span class="n">text</span> <span class="o">=</span> <span class="n">normalize_text</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">symbol</span><span class="p">)</span>
<span class="n">wav</span> <span class="o">=</span> <span class="n">syn</span><span class="p">.</span><span class="n">tts</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">)</span>
<span class="n">syn</span><span class="p">.</span><span class="n">save_wav</span><span class="p">(</span><span class="n">wav</span><span class="p">,</span> <span class="n">WAV_PATH</span><span class="p">)</span>
</code></pre></div></div>

<h2 id="수행-결과">수행 결과</h2>
<p>같은 길이의 문장을 기준으로 캐시를 적용하기 전과 후를 비교해보았다.</p>

<ul>
  <li>
    <p>적용 전<br />
<img src="/assets/images/Voice_Pocket/3-1.png" alt="image" /><br /></p>
  </li>
  <li>
    <p>적용 후<br />
<img src="/assets/images/Voice_Pocket/3-2.png" alt="image" /><br /></p>
  </li>
</ul>

<p>cache를 적용하여 해당 작업을 21초에서 8초로 줄일 수 있었다!</p>]]></content><author><name>hi~ June!!</name></author><category term="Voice_Pocket" /><category term="Info" /><summary type="html"><![CDATA[Voice Pocket의 프로젝트]]></summary></entry><entry><title type="html">[Voice Pocket] 프로젝트 소개</title><link href="http://localhost:4000/voice_pocket/Voice_Pocket01/" rel="alternate" type="text/html" title="[Voice Pocket] 프로젝트 소개" /><published>2023-05-01T00:00:00+09:00</published><updated>2023-05-03T00:00:00+09:00</updated><id>http://localhost:4000/voice_pocket/Voice_Pocket01</id><content type="html" xml:base="http://localhost:4000/voice_pocket/Voice_Pocket01/"><![CDATA[<h2 id="개요">개요</h2>
<p>이전에 진행했던 Team_ForV의 프로젝트가 끝나고 못내 아쉬운 부분들이 있었다.<br />
사람의 목소리를 학습시켜 TTS 서비스를 만들 수 있다는 것은 꽤 흥미로운 주제라고 생각했고,<br />
이 주제를 좀 더 완성도 있는 프로젝트로 발전시키고 싶다는 생각을 했다.</p>

<p>따라서, 기존의 문제점들을 좀 더 보완하고, 기능들을 추가하여 새로운 프로젝트를 구상하게 되었다.</p>

<h2 id="voice-pocket">Voice Pocket..!</h2>
<p>개인적으로 요즘 웹 서비스보다는 앱 서비스를 더 많이 이용하기도 하고, 해당 주제도 웹 보다는 앱 서비스가 더 알맞을 것이라 생각하여<br />
새로운 프로젝트는 <code class="language-plaintext highlighter-rouge">Flutter</code>로 진행하게 되었다.</p>

<p><img src="/assets/images/Voice_Pocket/1-1.jpg" alt="image" width="60%" height="60%" /><br /></p>

<p>예전에 유튜브를 보다가 돌아가신 아버지의 목소리를 복원하여 가족들에게 추억을 선물해주었던 스토리를 본 적이 있다.</p>

<blockquote>
  <p>사람 목소리의 특성 자체를 보관해두고, 생각나는 순간마다 꺼내볼 수 있다면 좋지 않을까</p>
</blockquote>

<p>사랑하는 사람의 목소리를 듣는 것만으로도 큰 힘이 되는 순간들이 있다.<br />
하지만, 여러 상황들로 인해 그것조차 힘들어질 수도 있다.<br />
애초에 우리가 추억을 남기기 위해 사진을 저장하듯이 개인의 목소리 자체도 저장해둘 수 있고, 또 그것으로 힘이 되는 말을 들을 수 있다면 좋겠다는 생각에 이 프로젝트를 시작하게 되었다.</p>

<h2 id="이전-프로젝트에서-보완한-점">이전 프로젝트에서 보완한 점</h2>
<p>이전에 진행했던 <code class="language-plaintext highlighter-rouge">Team_ForV</code>에서 많은 것들을 추가했고, 발전시켰다.</p>

<ol>
  <li>사용자가 직접 자신의 목소리를 만들 수 있도록 구성했다.</li>
  <li>서로 친구를 맺은 관계라면, 서로의 목소리로 TTS(Text To Speech)를 사용할 수 있도록 구성했다.</li>
  <li>음성 합성 속도를 많이 개선시켰다.</li>
  <li>음성 파일 및 모델 파일로 인한 서버의 메모리 문제도 개선되었다.</li>
</ol>

<h2 id="앞으로의-포스팅-예고">앞으로의 포스팅 예고!</h2>
<p>이전 프로젝트와 비교하여 개선된 부분들에 대해 중점적으로 다뤄볼 예정이다.<br />
프로젝트를 진행하면서 중간중간에 맞이했던 이슈들, 고민들 그리고 그것들을 어떻게 해결했는지에 대해 정리할 예정이다.</p>

<p>(23.05.03 게시일 기준 아직 진행중인 프로젝트)<br />
<img src="/assets/images/Voice_Pocket/1-2.png" alt="image" /><br /></p>]]></content><author><name>hi~ June!!</name></author><category term="Voice_Pocket" /><category term="Info" /><summary type="html"><![CDATA[Voice Pocket의 프로젝트]]></summary></entry><entry><title type="html">[7569] 토마토</title><link href="http://localhost:4000/boj/7569/" rel="alternate" type="text/html" title="[7569] 토마토" /><published>2023-04-20T00:00:00+09:00</published><updated>2023-04-20T00:00:00+09:00</updated><id>http://localhost:4000/boj/7569</id><content type="html" xml:base="http://localhost:4000/boj/7569/"><![CDATA[<h2 id="gold-v-토마토---7569">[Gold V] 토마토 - 7569</h2>

<p><a href="https://www.acmicpc.net/problem/7569">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 119348 KB, 시간: 748 ms</p>

<h3 id="분류">분류</h3>

<p>너비 우선 탐색, 그래프 이론, 그래프 탐색</p>

<h3 id="문제-설명">문제 설명</h3>

<p>철수의 토마토 농장에서는 토마토를 보관하는 큰 창고를 가지고 있다. 토마토는 아래의 그림과 같이 격자모양 상자의 칸에 하나씩 넣은 다음, 상자들을 수직으로 쌓아 올려서 창고에 보관한다.</p>

<p style="text-align: center;"><img alt="" src="https://upload.acmicpc.net/c3f3343d-c291-40a9-9fe3-59f792a8cae9/-/preview/" style="width: 201px; height: 252px;" /></p>

<p>창고에 보관되는 토마토들 중에는 잘 익은 것도 있지만, 아직 익지 않은 토마토들도 있을 수 있다. 보관 후 하루가 지나면, 익은 토마토들의 인접한 곳에 있는 익지 않은 토마토들은 익은 토마토의 영향을 받아 익게 된다. 하나의 토마토에 인접한 곳은 위, 아래, 왼쪽, 오른쪽, 앞, 뒤 여섯 방향에 있는 토마토를 의미한다. 대각선 방향에 있는 토마토들에게는 영향을 주지 못하며, 토마토가 혼자 저절로 익는 경우는 없다고 가정한다. 철수는 창고에 보관된 토마토들이 며칠이 지나면 다 익게 되는지 그 최소 일수를 알고 싶어 한다.</p>

<p>토마토를 창고에 보관하는 격자모양의 상자들의 크기와 익은 토마토들과 익지 않은 토마토들의 정보가 주어졌을 때, 며칠이 지나면 토마토들이 모두 익는지, 그 최소 일수를 구하는 프로그램을 작성하라. 단, 상자의 일부 칸에는 토마토가 들어있지 않을 수도 있다.</p>

<h3 id="입력">입력</h3>

<p>첫 줄에는 상자의 크기를 나타내는 두 정수 M,N과 쌓아올려지는 상자의 수를 나타내는 H가 주어진다. M은 상자의 가로 칸의 수, N은 상자의 세로 칸의 수를 나타낸다. 단, 2 ≤ M ≤ 100, 2 ≤ N ≤ 100, 1 ≤ H ≤ 100 이다. 둘째 줄부터는 가장 밑의 상자부터 가장 위의 상자까지에 저장된 토마토들의 정보가 주어진다. 즉, 둘째 줄부터 N개의 줄에는 하나의 상자에 담긴 토마토의 정보가 주어진다. 각 줄에는 상자 가로줄에 들어있는 토마토들의 상태가 M개의 정수로 주어진다. 정수 1은 익은 토마토, 정수 0 은 익지 않은 토마토, 정수 -1은 토마토가 들어있지 않은 칸을 나타낸다. 이러한 N개의 줄이 H번 반복하여 주어진다.</p>

<p>토마토가 하나 이상 있는 경우만 입력으로 주어진다.</p>

<h3 id="출력">출력</h3>

<p>여러분은 토마토가 모두 익을 때까지 최소 며칠이 걸리는지를 계산해서 출력해야 한다. 만약, 저장될 때부터 모든 토마토가 익어있는 상태이면 0을 출력해야 하고, 토마토가 모두 익지는 못하는 상황이면 -1을 출력해야 한다.</p>

<h2 id="아이디어">아이디어</h2>
<p>3차원 행렬을 다루는 것이 익숙치 않아 시간이 좀 걸렸었던 문제였다.<br />
x, y, z를 z, y, x 순으로 초기화해야한다는 것을 기억하자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span><span class="o">[][][]</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">z</span><span class="o">][</span><span class="n">y</span><span class="o">][</span><span class="n">x</span><span class="o">];</span>
</code></pre></div></div>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">z</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">z</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">z</span> <span class="o">=</span> <span class="n">z</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getX</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">x</span><span class="o">;</span> <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getY</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">y</span><span class="o">;</span> <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getZ</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">z</span><span class="o">;</span> <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>   <span class="c1">// x</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>   <span class="c1">// y</span>
        <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>   <span class="c1">// z</span>

        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">ripenTomato</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>   <span class="c1">// 익은 토마토</span>
        <span class="kt">int</span> <span class="n">unRipenTomato</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>  <span class="c1">// 안 익은 토마토</span>
        <span class="kt">int</span> <span class="n">day</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>    <span class="c1">// 소요 날짜</span>

        <span class="c1">// initialize box</span>
        <span class="kt">int</span><span class="o">[][][]</span> <span class="n">box</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">k</span><span class="o">][</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">l</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">l</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">l</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="n">box</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">][</span><span class="n">l</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
                    
                    <span class="k">if</span> <span class="o">(</span><span class="n">box</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">][</span><span class="n">l</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="n">unRipenTomato</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>  <span class="c1">// 안 익은 토마토</span>
                    <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">box</span><span class="o">[</span><span class="n">i</span><span class="o">][</span><span class="n">j</span><span class="o">][</span><span class="n">l</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                        <span class="n">ripenTomato</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">l</span><span class="o">,</span> <span class="n">j</span><span class="o">,</span> <span class="n">i</span><span class="o">));</span>   <span class="c1">// 익은 토마토</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// 이동: 상, 하, 좌, 우, 전, 후</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">dx</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">dy</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">dz</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>

        <span class="c1">// bfs(인접 토마토 익히기)</span>
        <span class="k">while</span> <span class="o">(</span><span class="n">unRipenTomato</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">ripenTomato</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">todayRipenTomato</span> <span class="o">=</span> <span class="n">ripenTomato</span><span class="o">.</span><span class="na">size</span><span class="o">();</span>  <span class="c1">// '오늘' 익어있는 토마토</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">todayRipenTomato</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="n">ripenTomato</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>

                <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
                <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>
                <span class="kt">int</span> <span class="n">z</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getZ</span><span class="o">();</span>

                <span class="c1">// 6방향으로 토마토 익히기</span>
                <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">6</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                    <span class="kt">int</span> <span class="n">movedX</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
                    <span class="kt">int</span> <span class="n">movedY</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>
                    <span class="kt">int</span> <span class="n">movedZ</span> <span class="o">=</span> <span class="n">z</span> <span class="o">+</span> <span class="n">dz</span><span class="o">[</span><span class="n">j</span><span class="o">];</span>

                    <span class="c1">// 범위를 벗어나거나 안 익은 토마토가 아닌 경우는 제외</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">movedX</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">movedX</span> <span class="o">&gt;=</span> <span class="n">m</span> <span class="o">||</span> <span class="n">movedY</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">movedY</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">movedZ</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">movedZ</span> <span class="o">&gt;=</span> <span class="n">k</span> <span class="o">||</span> <span class="n">box</span><span class="o">[</span><span class="n">movedZ</span><span class="o">][</span><span class="n">movedY</span><span class="o">][</span><span class="n">movedX</span><span class="o">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>

                    <span class="n">unRipenTomato</span> <span class="o">-=</span> <span class="mi">1</span><span class="o">;</span> <span class="c1">// 안 익은 토마토 개수 줄이기</span>
                    <span class="n">box</span><span class="o">[</span><span class="n">movedZ</span><span class="o">][</span><span class="n">movedY</span><span class="o">][</span><span class="n">movedX</span><span class="o">]</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>    <span class="c1">// 토마토 익히기</span>
                    <span class="n">ripenTomato</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">movedX</span><span class="o">,</span> <span class="n">movedY</span><span class="o">,</span> <span class="n">movedZ</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span>

            <span class="n">day</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">unRipenTomato</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">day</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(-</span><span class="mi">1</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><category term="bfs" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[2606] 바이러스</title><link href="http://localhost:4000/boj/2606/" rel="alternate" type="text/html" title="[2606] 바이러스" /><published>2023-04-20T00:00:00+09:00</published><updated>2023-04-20T00:00:00+09:00</updated><id>http://localhost:4000/boj/2606</id><content type="html" xml:base="http://localhost:4000/boj/2606/"><![CDATA[<h2 id="silver-iii-바이러스---2606">[Silver III] 바이러스 - 2606</h2>

<p><a href="https://www.acmicpc.net/problem/2606">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14336 KB, 시간: 140 ms</p>

<h3 id="분류">분류</h3>

<p>그래프 이론, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색</p>

<h3 id="문제-설명">문제 설명</h3>

<p>신종 바이러스인 웜 바이러스는 네트워크를 통해 전파된다. 한 컴퓨터가 웜 바이러스에 걸리면 그 컴퓨터와 네트워크 상에서 연결되어 있는 모든 컴퓨터는 웜 바이러스에 걸리게 된다.</p>

<p>예를 들어 7대의 컴퓨터가 &lt;그림 1&gt;과 같이 네트워크 상에서 연결되어 있다고 하자. 1번 컴퓨터가 웜 바이러스에 걸리면 웜 바이러스는 2번과 5번 컴퓨터를 거쳐 3번과 6번 컴퓨터까지 전파되어 2, 3, 5, 6 네 대의 컴퓨터는 웜 바이러스에 걸리게 된다. 하지만 4번과 7번 컴퓨터는 1번 컴퓨터와 네트워크상에서 연결되어 있지 않기 때문에 영향을 받지 않는다.</p>

<p><img alt="" src="https://www.acmicpc.net/upload/images/zmMEZZ8ioN6rhCdHmcIT4a7.png" style="width: 239px; height: 157px; " /></p>

<p>어느 날 1번 컴퓨터가 웜 바이러스에 걸렸다. 컴퓨터의 수와 네트워크 상에서 서로 연결되어 있는 정보가 주어질 때, 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 출력하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에는 컴퓨터의 수가 주어진다. 컴퓨터의 수는 100 이하이고 각 컴퓨터에는 1번 부터 차례대로 번호가 매겨진다. 둘째 줄에는 네트워크 상에서 직접 연결되어 있는 컴퓨터 쌍의 수가 주어진다. 이어서 그 수만큼 한 줄에 한 쌍씩 네트워크 상에서 직접 연결되어 있는 컴퓨터의 번호 쌍이 주어진다.</p>

<h3 id="출력">출력</h3>

<p>1번 컴퓨터가 웜 바이러스에 걸렸을 때, 1번 컴퓨터를 통해 웜 바이러스에 걸리게 되는 컴퓨터의 수를 첫째 줄에 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<p><code class="language-plaintext highlighter-rouge">bfs</code> 기본 문제이다.<br />
그래프는 인접 리스트로 나타냈고, <code class="language-plaintext highlighter-rouge">queue</code> 자료구조를 사용했다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>    <span class="c1">// 컴퓨터의 수</span>
        <span class="kt">int</span> <span class="n">connection</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>   <span class="c1">// 연결(간선)의 수</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">connection</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

            <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">x</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">y</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span><span class="o">+</span><span class="mi">1</span><span class="o">];</span>

        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
        <span class="n">visited</span><span class="o">[</span><span class="mi">1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">count</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">visitedNode</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="n">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">node</span> <span class="o">:</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">visitedNode</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
                    <span class="n">visited</span><span class="o">[</span><span class="n">node</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">count</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><category term="bfs" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[2178] 미로 탐색</title><link href="http://localhost:4000/boj/2178/" rel="alternate" type="text/html" title="[2178] 미로 탐색" /><published>2023-04-20T00:00:00+09:00</published><updated>2023-04-20T00:00:00+09:00</updated><id>http://localhost:4000/boj/2178</id><content type="html" xml:base="http://localhost:4000/boj/2178/"><![CDATA[<h2 id="silver-i-미로-탐색---2178">[Silver I] 미로 탐색 - 2178</h2>

<p><a href="https://www.acmicpc.net/problem/2178">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 16940 KB, 시간: 204 ms</p>

<h3 id="분류">분류</h3>

<p>그래프 이론, 그래프 탐색, 너비 우선 탐색</p>

<h3 id="문제-설명">문제 설명</h3>

<p>N×M크기의 배열로 표현되는 미로가 있다.</p>

<table class="table table-bordered" style="width:18%">
	<tbody>
		<tr>
			<td style="width:3%">1</td>
			<td style="width:3%">0</td>
			<td style="width:3%">1</td>
			<td style="width:3%">1</td>
			<td style="width:3%">1</td>
			<td style="width:3%">1</td>
		</tr>
		<tr>
			<td>1</td>
			<td>0</td>
			<td>1</td>
			<td>0</td>
			<td>1</td>
			<td>0</td>
		</tr>
		<tr>
			<td>1</td>
			<td>0</td>
			<td>1</td>
			<td>0</td>
			<td>1</td>
			<td>1</td>
		</tr>
		<tr>
			<td>1</td>
			<td>1</td>
			<td>1</td>
			<td>0</td>
			<td>1</td>
			<td>1</td>
		</tr>
	</tbody>
</table>

<p>미로에서 1은 이동할 수 있는 칸을 나타내고, 0은 이동할 수 없는 칸을 나타낸다. 이러한 미로가 주어졌을 때, (1, 1)에서 출발하여 (N, M)의 위치로 이동할 때 지나야 하는 최소의 칸 수를 구하는 프로그램을 작성하시오. 한 칸에서 다른 칸으로 이동할 때, 서로 인접한 칸으로만 이동할 수 있다.</p>

<p>위의 예에서는 15칸을 지나야 (N, M)의 위치로 이동할 수 있다. 칸을 셀 때에는 시작 위치와 도착 위치도 포함한다.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 두 정수 N, M(2 ≤ N, M ≤ 100)이 주어진다. 다음 N개의 줄에는 M개의 정수로 미로가 주어진다. 각각의 수들은 <strong>붙어서</strong> 입력으로 주어진다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에 지나야 하는 최소의 칸 수를 출력한다. 항상 도착위치로 이동할 수 있는 경우만 입력으로 주어진다.</p>

<h2 id="아이디어">아이디어</h2>
<p><code class="language-plaintext highlighter-rouge">bfs</code>의 대표적인 문제이다.<br />
사방면으로 탐색하며 미로에 지나온 거리를 남긴다는 아이디어가 인상적이었다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>
        <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getX</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">x</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">getY</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">y</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="c1">// initialize mace</span>
        <span class="kt">int</span><span class="o">[][]</span> <span class="n">mace</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">n</span><span class="o">][</span><span class="n">m</span><span class="o">];</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">mace</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">""</span><span class="o">))</span>
                    <span class="o">.</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">Integer:</span><span class="o">:</span><span class="n">parseInt</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">toArray</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c1">// move: 상, 하, 좌, 우</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">dx</span> <span class="o">=</span> <span class="o">{</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span>
        <span class="kt">int</span><span class="o">[]</span> <span class="n">dy</span> <span class="o">=</span> <span class="o">{</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">};</span>

        <span class="c1">// bfs</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Node</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">));</span>    <span class="c1">// graph의 인덱스 때문에 (1,1)을 (0,0)으로 취급</span>

        <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Node</span> <span class="n">node</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getX</span><span class="o">();</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">getY</span><span class="o">();</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">4</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>   <span class="c1">// 상, 하, 좌, 우 각각 한 번씩 움직여보기</span>
                <span class="kt">int</span> <span class="n">movedX</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="n">dx</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                <span class="kt">int</span> <span class="n">movedY</span> <span class="o">=</span> <span class="n">y</span> <span class="o">+</span> <span class="n">dy</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>

                <span class="c1">// 미로를 벗어나는 경우면 제외</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">movedX</span> <span class="o">&gt;=</span> <span class="n">n</span> <span class="o">||</span> <span class="n">movedX</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">movedY</span> <span class="o">&gt;=</span> <span class="n">m</span> <span class="o">||</span> <span class="n">movedY</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">mace</span><span class="o">[</span><span class="n">movedX</span><span class="o">][</span><span class="n">movedY</span><span class="o">]</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>

                <span class="k">if</span> <span class="o">(</span><span class="n">mace</span><span class="o">[</span><span class="n">movedX</span><span class="o">][</span><span class="n">movedY</span><span class="o">]</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">mace</span><span class="o">[</span><span class="n">movedX</span><span class="o">][</span><span class="n">movedY</span><span class="o">]</span> <span class="o">=</span> <span class="n">mace</span><span class="o">[</span><span class="n">x</span><span class="o">][</span><span class="n">y</span><span class="o">]</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>  <span class="c1">// 이동하면서 미로에 이동 거리 세기기</span>
                    <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">Node</span><span class="o">(</span><span class="n">movedX</span><span class="o">,</span> <span class="n">movedY</span><span class="o">));</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">mace</span><span class="o">[</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="o">][</span><span class="n">m</span><span class="o">-</span><span class="mi">1</span><span class="o">]);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><category term="bfs" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[1260] DFS와 BFS</title><link href="http://localhost:4000/boj/1260/" rel="alternate" type="text/html" title="[1260] DFS와 BFS" /><published>2023-04-20T00:00:00+09:00</published><updated>2023-04-20T00:00:00+09:00</updated><id>http://localhost:4000/boj/1260</id><content type="html" xml:base="http://localhost:4000/boj/1260/"><![CDATA[<h2 id="silver-ii-dfs와-bfs---1260">[Silver II] DFS와 BFS - 1260</h2>

<p><a href="https://www.acmicpc.net/problem/1260">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 20224 KB, 시간: 380 ms</p>

<h3 id="분류">분류</h3>

<p>그래프 이론, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색</p>

<h3 id="문제-설명">문제 설명</h3>

<p>그래프를 DFS로 탐색한 결과와 BFS로 탐색한 결과를 출력하는 프로그램을 작성하시오. 단, 방문할 수 있는 정점이 여러 개인 경우에는 정점 번호가 작은 것을 먼저 방문하고, 더 이상 방문할 수 있는 점이 없는 경우 종료한다. 정점 번호는 1번부터 N번까지이다.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 정점의 개수 N(1 ≤ N ≤ 1,000), 간선의 개수 M(1 ≤ M ≤ 10,000), 탐색을 시작할 정점의 번호 V가 주어진다. 다음 M개의 줄에는 간선이 연결하는 두 정점의 번호가 주어진다. 어떤 두 정점 사이에 여러 개의 간선이 있을 수 있다. 입력으로 주어지는 간선은 양방향이다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에 DFS를 수행한 결과를, 그 다음 줄에는 BFS를 수행한 결과를 출력한다. V부터 방문된 점을 순서대로 출력하면 된다.</p>

<h2 id="아이디어">아이디어</h2>
<p><code class="language-plaintext highlighter-rouge">bfs</code>와 <code class="language-plaintext highlighter-rouge">dfs</code>를 사용할 수 있는지를 묻는 기본적인 문제이다.<br />
둘 다 완전탐색에 해당하고, 탐색 순서는 크게 중요하진 않지만, 출력 형식이 정해져있으므로 수행 전 정렬을 해주었다.<br />
bfs는 큐를 dfs는 stack을 사용했다.(함수 recursive call)</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="c1">// n, m, v 초기화</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="c1">// graph 초기화</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">m</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

            <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">x</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">y</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="c1">// 순서 유지를 위한 정렬</span>
        <span class="n">graph</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nl">Collections:</span><span class="o">:</span><span class="n">sort</span><span class="o">);</span>

        <span class="c1">// DFS</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visitedDFS</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>
        <span class="n">dfs</span><span class="o">(</span><span class="n">graph</span><span class="o">,</span> <span class="n">v</span><span class="o">,</span> <span class="n">visitedDFS</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="c1">// BFS</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">queue</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visitedBFS</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>

        <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">v</span><span class="o">);</span>
        <span class="n">visitedBFS</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(!</span><span class="n">queue</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">visitedNode</span> <span class="o">=</span> <span class="n">queue</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">visitedNode</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">node</span> <span class="o">:</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">visitedNode</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">visitedBFS</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">queue</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">node</span><span class="o">);</span>
                    <span class="n">visitedBFS</span><span class="o">[</span><span class="n">node</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">graph</span><span class="o">,</span> <span class="kt">int</span> <span class="n">v</span><span class="o">,</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">visited</span><span class="o">[</span><span class="n">v</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">v</span> <span class="o">+</span> <span class="s">" "</span><span class="o">);</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">node</span> <span class="o">:</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">v</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">graph</span><span class="o">,</span> <span class="n">node</span><span class="o">,</span> <span class="n">visited</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><category term="bfs" /><category term="dfs" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[2644] 촌수계산</title><link href="http://localhost:4000/boj/2644/" rel="alternate" type="text/html" title="[2644] 촌수계산" /><published>2023-04-20T00:00:00+09:00</published><updated>2023-04-20T00:00:00+09:00</updated><id>http://localhost:4000/boj/2644</id><content type="html" xml:base="http://localhost:4000/boj/2644/"><![CDATA[<h2 id="silver-ii-촌수계산---2644">[Silver II] 촌수계산 - 2644</h2>

<p><a href="https://www.acmicpc.net/problem/2644">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14252 KB, 시간: 132 ms</p>

<h3 id="분류">분류</h3>

<p>그래프 이론, 그래프 탐색, 너비 우선 탐색, 깊이 우선 탐색</p>

<h3 id="문제-설명">문제 설명</h3>

<p>우리 나라는 가족 혹은 친척들 사이의 관계를 촌수라는 단위로 표현하는 독특한 문화를 가지고 있다. 이러한 촌수는 다음과 같은 방식으로 계산된다. 기본적으로 부모와 자식 사이를 1촌으로 정의하고 이로부터 사람들 간의 촌수를 계산한다. 예를 들면 나와 아버지, 아버지와 할아버지는 각각 1촌으로 나와 할아버지는 2촌이 되고, 아버지 형제들과 할아버지는 1촌, 나와 아버지 형제들과는 3촌이 된다.</p>

<p>여러 사람들에 대한 부모 자식들 간의 관계가 주어졌을 때, 주어진 두 사람의 촌수를 계산하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>사람들은 1, 2, 3, …, n (1 ≤ n ≤ 100)의 연속된 번호로 각각 표시된다. 입력 파일의 첫째 줄에는 전체 사람의 수 n이 주어지고, 둘째 줄에는 촌수를 계산해야 하는 서로 다른 두 사람의 번호가 주어진다. 그리고 셋째 줄에는 부모 자식들 간의 관계의 개수 m이 주어진다. 넷째 줄부터는 부모 자식간의 관계를 나타내는 두 번호 x,y가 각 줄에 나온다. 이때 앞에 나오는 번호 x는 뒤에 나오는 정수 y의 부모 번호를 나타낸다.</p>

<p>각 사람의 부모는 최대 한 명만 주어진다.</p>

<h3 id="출력">출력</h3>

<p>입력에서 요구한 두 사람의 촌수를 나타내는 정수를 출력한다. 어떤 경우에는 두 사람의 친척 관계가 전혀 없어 촌수를 계산할 수 없을 때가 있다. 이때에는 -1을 출력해야 한다.</p>

<h2 id="아이디어">아이디어</h2>
<p>촌수가 깊어질 수록 depth를 증가시켜가며 풀었던 문제이다.<br />
처음에는 depth 변수를 어떻게 두어야할 지 고민했는데, 함수의 입력인자로 둔 뒤 깊어질 때마다 1 증가시키며 다음 함수에 전달해주는 방식으로 해결했다.<br />
함수를 recursive하게 호출하고 있기 때문에 answer 변수는 static하게 처리했다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">answer</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">target1</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">target2</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">relation</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;());</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">relation</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

            <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
            <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

            <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">x</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">y</span><span class="o">);</span>
            <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">y</span><span class="o">).</span><span class="na">add</span><span class="o">(</span><span class="n">x</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="n">n</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>

        <span class="n">dfs</span><span class="o">(</span><span class="n">graph</span><span class="o">,</span> <span class="n">visited</span><span class="o">,</span> <span class="n">target1</span><span class="o">,</span> <span class="n">target2</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">answer</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dfs</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">graph</span><span class="o">,</span> <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target2</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">visited</span><span class="o">[</span><span class="n">target1</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">node</span> <span class="o">:</span> <span class="n">graph</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">target1</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">node</span><span class="o">])</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="n">target2</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">answer</span> <span class="o">=</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">;</span>
                    <span class="k">return</span><span class="o">;</span>
                <span class="o">}</span>
                <span class="n">dfs</span><span class="o">(</span><span class="n">graph</span><span class="o">,</span> <span class="n">visited</span><span class="o">,</span> <span class="n">node</span><span class="o">,</span> <span class="n">target2</span><span class="o">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><category term="dfs" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[6603] 로또</title><link href="http://localhost:4000/boj/6603/" rel="alternate" type="text/html" title="[6603] 로또" /><published>2023-04-15T00:00:00+09:00</published><updated>2023-04-15T00:00:00+09:00</updated><id>http://localhost:4000/boj/6603</id><content type="html" xml:base="http://localhost:4000/boj/6603/"><![CDATA[<h2 id="silver-ii-로또---6603">[Silver II] 로또 - 6603</h2>

<p><a href="https://www.acmicpc.net/problem/6603">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 19368 KB, 시간: 236 ms</p>

<h3 id="분류">분류</h3>

<p>수학, 조합론, 백트래킹, 재귀</p>

<h3 id="문제-설명">문제 설명</h3>

<p>독일 로또는 {1, 2, ..., 49}에서 수 6개를 고른다.</p>

<p>로또 번호를 선택하는데 사용되는 가장 유명한 전략은 49가지 수 중 k(k&gt;6)개의 수를 골라 집합 S를 만든 다음 그 수만 가지고 번호를 선택하는 것이다.</p>

<p>예를 들어, k=8, S={1,2,3,5,8,13,21,34}인 경우 이 집합 S에서 수를 고를 수 있는 경우의 수는 총 28가지이다. ([1,2,3,5,8,13], [1,2,3,5,8,21], [1,2,3,5,8,34], [1,2,3,5,13,21], ..., [3,5,8,13,21,34])</p>

<p>집합 S와 k가 주어졌을 때, 수를 고르는 모든 방법을 구하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>입력은 여러 개의 테스트 케이스로 이루어져 있다. 각 테스트 케이스는 한 줄로 이루어져 있다. 첫 번째 수는 k (6 &lt; k &lt; 13)이고, 다음 k개 수는 집합 S에 포함되는 수이다. S의 원소는 오름차순으로 주어진다.</p>

<p>입력의 마지막 줄에는 0이 하나 주어진다. </p>

<h3 id="출력">출력</h3>

<p>각 테스트 케이스마다 수를 고르는 모든 방법을 출력한다. 이때, 사전 순으로 출력한다.</p>

<p>각 테스트 케이스 사이에는 빈 줄을 하나 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<p>조합만 알면 간단하게 풀 수 있는 문제이다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Combination</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">r</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">now</span><span class="o">;</span> <span class="c1">// 현재 조합</span>
    <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="n">result</span><span class="o">;</span> <span class="c1">// 모든 조합</span>

    <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;&gt;</span> <span class="nf">getResult</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">result</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nf">Combination</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">,</span> <span class="kt">int</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">n</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">r</span> <span class="o">=</span> <span class="n">r</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">now</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">r</span><span class="o">];</span>
        <span class="k">this</span><span class="o">.</span><span class="na">result</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">combination</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">depth</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="kt">int</span> <span class="n">target</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">depth</span> <span class="o">==</span> <span class="n">r</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">List</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">temp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">now</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="n">temp</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">now</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
            <span class="o">}</span>
            <span class="n">result</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">temp</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">target</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span> <span class="k">return</span><span class="o">;</span>
        <span class="n">now</span><span class="o">[</span><span class="n">index</span><span class="o">]</span> <span class="o">=</span> <span class="n">target</span><span class="o">;</span>
        <span class="n">combination</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">index</span> <span class="o">+</span> <span class="mi">1</span><span class="o">,</span> <span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
        <span class="n">combination</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">depth</span><span class="o">,</span> <span class="n">index</span><span class="o">,</span> <span class="n">target</span> <span class="o">+</span> <span class="mi">1</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="k">while</span> <span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

            <span class="kt">int</span> <span class="n">k</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">k</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
                <span class="k">break</span><span class="o">;</span>
            <span class="o">}</span>

            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">lotto</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">k</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="nc">String</span>  <span class="n">num</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
                <span class="n">lotto</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">num</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="nc">Combination</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">comb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Combination</span><span class="o">&lt;&gt;(</span><span class="n">k</span><span class="o">,</span> <span class="mi">6</span><span class="o">);</span>
            <span class="n">comb</span><span class="o">.</span><span class="na">combination</span><span class="o">(</span><span class="n">lotto</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>

            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">comb</span><span class="o">.</span><span class="na">getResult</span><span class="o">();</span>

            <span class="k">for</span> <span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">lottoCase</span> <span class="o">:</span> <span class="n">result</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">answer</span> <span class="o">=</span> <span class="n">lottoCase</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">" "</span><span class="o">));</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">answer</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
            <span class="o">}</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><category term="수학" /><category term="조합" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[1461] 도서관</title><link href="http://localhost:4000/boj/1461/" rel="alternate" type="text/html" title="[1461] 도서관" /><published>2023-04-15T00:00:00+09:00</published><updated>2023-04-15T00:00:00+09:00</updated><id>http://localhost:4000/boj/1461</id><content type="html" xml:base="http://localhost:4000/boj/1461/"><![CDATA[<h2 id="gold-v-도서관---1461">[Gold V] 도서관 - 1461</h2>

<p><a href="https://www.acmicpc.net/problem/1461">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14244 KB, 시간: 124 ms</p>

<h3 id="분류">분류</h3>

<p>그리디 알고리즘, 정렬</p>

<h3 id="문제-설명">문제 설명</h3>

<p>세준이는 도서관에서 일한다. 도서관의 개방시간이 끝나서 세준이는 사람들이 마구 놓은 책을 다시 가져다 놓아야 한다. 세준이는 현재 0에 있고, 사람들이 마구 놓은 책도 전부 0에 있다. 각 책들의 원래 위치가 주어질 때, 책을 모두 제자리에 놔둘 때 드는 최소 걸음 수를 계산하는 프로그램을 작성하시오. 세준이는 한 걸음에 좌표 1칸씩 가며, 책의 원래 위치는 정수 좌표이다. 책을 모두 제자리에 놔둔 후에는 다시 0으로 돌아올 필요는 없다. 그리고 세준이는 한 번에 최대 M권의 책을 들 수 있다.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 책의 개수 N과, 세준이가 한 번에 들 수 있는 책의 개수 M이 주어진다. 둘째 줄에는 책의 위치가 주어진다. N과 M은 50보다 작거나 같은 자연수이다. 책의 위치는 0이 아니며, 절댓값은 10,000보다 작거나 같은 정수이다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에 정답을 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<p>결국 최소 걸음으로 책을 가져다놓기 위해서는 가장 멀리 떨어져있는 책을 가장 나중에 가져다놔야한다.(다시 돌아올 필요가 없기 때문)
또, 양쪽으로 좌표가 주어지기 때문에 가장 멀리 떨어져있는 책이 왼쪽에 있는지, 오른쪽에 있는지도 파악해야한다.<br />
자세한 풀이는 주석을 보자.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>    <span class="c1">// 책의 개수</span>
        <span class="kt">int</span> <span class="n">m</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>    <span class="c1">// 한 번에 들 수 있는 책의 개수</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">leftSide</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">rightSide</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">bookPoint</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>

            <span class="k">if</span> <span class="o">(</span><span class="n">bookPoint</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">leftSide</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bookPoint</span> <span class="o">*</span> <span class="o">(-</span><span class="mi">1</span><span class="o">));</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">rightSide</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">bookPoint</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// 멀리 떨어져있는 책들을 최대한 한 번에 많이 들고 가야하기 때문에 내림차순 정렬해준다.</span>
        <span class="n">rightSide</span><span class="o">.</span><span class="na">sort</span><span class="o">((</span><span class="n">i1</span><span class="o">,</span> <span class="n">i2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">i2</span> <span class="o">-</span> <span class="n">i1</span><span class="o">);</span>    <span class="c1">// 내림차순 정렬</span>
        <span class="n">leftSide</span><span class="o">.</span><span class="na">sort</span><span class="o">((</span><span class="n">i1</span><span class="o">,</span> <span class="n">i2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">i2</span> <span class="o">-</span> <span class="n">i1</span><span class="o">);</span>    <span class="c1">// 내림차순 정렬</span>

        <span class="kt">int</span> <span class="n">steps</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="c1">// 한 번에 들 수 있는 책의 수(m) 만큼 증가시키며 step을 계산한다.</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">rightSide</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">+=</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">+=</span> <span class="n">rightSide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">leftSide</span><span class="o">.</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">+=</span><span class="n">m</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">+=</span> <span class="n">leftSide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">)</span> <span class="o">*</span> <span class="mi">2</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="c1">// 가장 멀리 떨어진 경우를 한 번 더 세주었으므로 총 step에서 빼준다.</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">rightSide</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="o">(</span><span class="n">leftSide</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">rightSide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">&lt;</span> <span class="n">leftSide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)))</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">-=</span> <span class="n">leftSide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="k">if</span> <span class="o">(</span><span class="n">leftSide</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">||</span> <span class="o">(</span><span class="n">rightSide</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">!=</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">rightSide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)</span> <span class="o">&gt;</span> <span class="n">leftSide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">)))</span> <span class="o">{</span>
            <span class="n">steps</span> <span class="o">-=</span> <span class="n">rightSide</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">steps</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><category term="그리디" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry></feed>