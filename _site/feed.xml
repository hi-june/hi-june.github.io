<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-11T20:19:17+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html"> June &amp;amp; Directory </title><subtitle>공부 &amp; 취미 블로그</subtitle><author><name>hi~ June!!</name></author><entry><title type="html">[9506] 약수들의 합</title><link href="http://localhost:4000/boj/9506/" rel="alternate" type="text/html" title="[9506] 약수들의 합" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-11T00:00:00+09:00</updated><id>http://localhost:4000/boj/9506</id><content type="html" xml:base="http://localhost:4000/boj/9506/"><![CDATA[<h2 id="bronze-i-약수들의-합---9506">[Bronze I] 약수들의 합 - 9506</h2>

<p><a href="https://www.acmicpc.net/problem/9506">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 16512 KB, 시간: 176 ms</p>

<h3 id="분류">분류</h3>

<p>구현(implementation), 수학(math), 정수론(number_theory)</p>

<h3 id="문제-설명">문제 설명</h3>

<p>어떤 숫자 n이 자신을 제외한 모든 약수들의 합과 같으면, <span style="line-height:1.6em">그 수를 완전수라고 한다. </span></p>

<p>예를 들어 6은 6 = 1 + 2 + 3 으로 완전수이다.</p>

<p>n이 완전수인지 아닌지 판단해주는 프로그램을 작성하라.</p>

<h3 id="입력">입력</h3>

<p>입력은 테스트 케이스마다 한 줄 간격으로 n이 주어진다. (2 &lt; n &lt; 100,000)</p>

<p>입력의 마지막엔 -1이 주어진다.</p>

<h3 id="출력">출력</h3>

<p>테스트케이스 마다 한줄에 하나씩 출력해야 한다.</p>

<p>n이 완전수라면, n을 n이 아닌 약수들의 합으로 나타내어 출력한다(예제 출력 참고).</p>

<p>이때, 약수들은 오름차순으로 나열해야 한다.</p>

<p>n이 완전수가 아니라면 n is NOT perfect. 를 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<ul>
  <li>
    <p>구현 방법
  각 숫자들의 약수들을 담은 리스트를 만들어<br />
  stream api를 활용하여 총 합을 구한 뒤<br />
  완전수 여부에 따라 결과를 출력한다.</p>
  </li>
  <li>
    <p>약수를 구하는 방법</p>
    <ul>
      <li>1부터 n까지 for문으로 하나씩 증가시키면서 나누어 떨어지는지 검사한다.</li>
      <li>loop의 수를 줄이기 위해 제곱근을 구하는 Math.sqrt()를 사용하였다.</li>
    </ul>
  </li>
</ul>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.stream.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="o">{</span>
            <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="k">break</span><span class="o">;</span>
            
            <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span> <span class="c1">// 약수들을 담을 리스트</span>

            <span class="kt">int</span> <span class="n">sqrt</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span><span class="nc">Math</span><span class="o">.</span><span class="na">sqrt</span><span class="o">(</span><span class="n">n</span><span class="o">);</span>   <span class="c1">// 제곱수</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">sqrt</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">i</span><span class="o">);</span>    <span class="c1">// 약수 중 작은 수</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">/</span> <span class="n">i</span> <span class="o">!=</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>  <span class="c1">// 제곱근 두 번 추가 방지</span>
                        <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">n</span> <span class="o">/</span> <span class="n">i</span><span class="o">);</span>    <span class="c1">// 약수 중 큰 수</span>
                    <span class="o">}</span>
                <span class="o">}</span>
            <span class="o">}</span>
            <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span> <span class="c1">// 약수 모음 오름차순 정렬</span>
            <span class="n">nums</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">nums</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span><span class="o">);</span>   <span class="c1">// 맨 마지막 수(자기 자신) 제거</span>

            <span class="kt">int</span> <span class="n">sum</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">mapToInt</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">.</span><span class="na">intValue</span><span class="o">()).</span><span class="na">sum</span><span class="o">();</span>  <span class="c1">// 자기 자신을 제외한 약수들의 총 합</span>
            
            <span class="nc">String</span> <span class="n">result</span><span class="o">;</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">sum</span> <span class="o">==</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">sumString</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>    <span class="c1">// Stream&lt;Integer&gt;</span>
                    <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="n">i</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span> <span class="c1">// Stream&lt;String&gt;</span>
                    <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">joining</span><span class="o">(</span><span class="s">" + "</span><span class="o">));</span>    <span class="c1">// "1 + 2 + 3"</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="s">" = "</span> <span class="o">+</span> <span class="n">sumString</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">;</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
            <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">n</span> <span class="o">+</span> <span class="s">" is NOT perfect.\n"</span><span class="o">;</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">result</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[2609] 최대공약수와 최소공배수</title><link href="http://localhost:4000/boj/2609/" rel="alternate" type="text/html" title="[2609] 최대공약수와 최소공배수" /><published>2023-03-11T00:00:00+09:00</published><updated>2023-03-11T00:00:00+09:00</updated><id>http://localhost:4000/boj/2609</id><content type="html" xml:base="http://localhost:4000/boj/2609/"><![CDATA[<h2 id="bronze-i-최대공약수와-최소공배수---2609">[Bronze I] 최대공약수와 최소공배수 - 2609</h2>

<p><a href="https://www.acmicpc.net/problem/2609">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 16212 KB, 시간: 152 ms</p>

<h3 id="분류">분류</h3>

<p>유클리드 호제법(euclidean), 수학(math), 정수론(number_theory)</p>

<h3 id="문제-설명">문제 설명</h3>

<p>두 개의 자연수를 입력받아 최대 공약수와 최소 공배수를 출력하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에는 두 개의 자연수가 주어진다. 이 둘은 10,000이하의 자연수이며 사이에 한 칸의 공백이 주어진다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄에는 입력으로 주어진 두 수의 최대공약수를, 둘째 줄에는 입력으로 주어진 두 수의 최소 공배수를 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<ul>
  <li>최대공약수 구하기
    <ul>
      <li>i를 1부터 n까지 for문을 이용하여 1씩 증가시키며 나누어 떨어지는지 검사한다.</li>
      <li>loop의 수를 줄이기 위해 두 숫자 중 더 작은 숫자를 넘기 전까지만 수행한다.(최대공약수는 작은 수보다 더 클 수 없음)</li>
    </ul>
  </li>
  <li>최소공배수
    <ul>
      <li>두 수의 곱 나누기 최대공약수</li>
    </ul>
  </li>
</ul>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">// 최대공약수: 약수들끼리 겹치는 수</span>
        <span class="c1">// 최소공배수: 두 수의 곱 / 최대공약수</span>

        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">String</span> <span class="n">input</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
        <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">input</span><span class="o">);</span>
        
        <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>
        <span class="kt">int</span> <span class="n">y</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">().</span><span class="na">toString</span><span class="o">());</span>

        <span class="kt">int</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>    <span class="c1">// 최대공약수</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">x</span> <span class="o">&amp;&amp;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="n">y</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">x</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">y</span> <span class="o">%</span> <span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">i</span> <span class="o">&gt;</span> <span class="n">max</span><span class="o">)</span> <span class="n">max</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="o">(</span><span class="n">x</span> <span class="o">*</span> <span class="n">y</span><span class="o">)</span> <span class="o">/</span> <span class="n">max</span><span class="o">;</span>    <span class="c1">// 최소 공배수</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">max</span> <span class="o">+</span> <span class="s">"\n"</span> <span class="o">+</span> <span class="n">min</span><span class="o">);</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[2750] 수 정렬하기</title><link href="http://localhost:4000/boj/2750/" rel="alternate" type="text/html" title="[2750] 수 정렬하기" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T00:00:00+09:00</updated><id>http://localhost:4000/boj/2750</id><content type="html" xml:base="http://localhost:4000/boj/2750/"><![CDATA[<h2 id="bronze-ii-수-정렬하기---2750">[Bronze II] 수 정렬하기 - 2750</h2>

<p><a href="https://www.acmicpc.net/problem/2750">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14936 KB, 시간: 188 ms</p>

<h3 id="분류">분류</h3>

<p>정렬(sorting), 구현(implementation)</p>

<h3 id="문제-설명">문제 설명</h3>

<p>N개의 수가 주어졌을 때, 이를 오름차순으로 정렬하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>첫째 줄에 수의 개수 N(1 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 수가 주어진다. 이 수는 절댓값이 1,000보다 작거나 같은 정수이다. 수는 중복되지 않는다.</p>

<h3 id="출력">출력</h3>

<p>첫째 줄부터 N개의 줄에 오름차순으로 정렬한 결과를 한 줄에 하나씩 출력한다.</p>

<h2 id="아이디어">아이디어</h2>
<p>입력받은 숫자들을 리스트에 넣어<br />
정렬 후<br />
리스트에 있는 요소들을 출력한다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">bf</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

        <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">nums</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">bf</span><span class="o">.</span><span class="na">readLine</span><span class="o">()));</span>
        <span class="o">}</span>

        <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nums</span><span class="o">);</span>
        <span class="n">nums</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[자바 코테] 입출력 방법 정리</title><link href="http://localhost:4000/java%20coding%20test/IO/" rel="alternate" type="text/html" title="[자바 코테] 입출력 방법 정리" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T00:00:00+09:00</updated><id>http://localhost:4000/java%20coding%20test/IO</id><content type="html" xml:base="http://localhost:4000/java%20coding%20test/IO/"><![CDATA[<h2 id="왜-사용하는가">왜 사용하는가?</h2>
<blockquote>
  <p>Scanner나 println 메소드보다 속도가 월등히 빠르다…!</p>
</blockquote>

<h2 id="bufferedreader">BufferedReader</h2>
<p><code class="language-plaintext highlighter-rouge">readLine</code>: 입력으로 들어온 데이터를 한 줄로 읽어서 String으로 바꿔주는 메소드<br />
<code class="language-plaintext highlighter-rouge">close</code>: 입력 스트림을 닫고 사용하던 자원을 해제</p>

<p>보통 readLine()으로 읽고 StringTokenizer나 split()울 통해 값을 배열 등등에 넣는다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.InputStreamReader</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.StringTokenizer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="c1">// BufferedReader를 사용하기 위해서는 throws IOException을 해 주어야 함.</span>
		<span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>

		<span class="kt">int</span> <span class="no">N</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
		<span class="kt">int</span><span class="o">[]</span> <span class="n">arr</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="no">N</span><span class="o">];</span>

		<span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
		<span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">N</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
			<span class="n">arr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">());</span>
		<span class="o">}</span>

		<span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
	<span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="bufferedwriter">BufferedWriter</h2>
<p><code class="language-plaintext highlighter-rouge">write</code>: 출력할 내용을 버퍼에 담음<br />
<code class="language-plaintext highlighter-rouge">flush</code>: 버퍼를 비워내는 동시에 콘솔에 출력<br />
<code class="language-plaintext highlighter-rouge">close</code>: 출력 스트림을 닫고 사용하던 자원을 해제</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.BufferedWriter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.OutputStreamWriter</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>

	<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
		<span class="c1">// BufferedWriter를 사용하기 위해서는 throws IOException을 해 주어야 함.</span>
		<span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="s">"Hello World"</span><span class="o">);</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
		<span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> 
	<span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java Coding Test" /><category term="java" /><summary type="html"><![CDATA[코딩 테스트용 자바 정리]]></summary></entry><entry><title type="html">[10798] 새로읽기</title><link href="http://localhost:4000/boj/10798/" rel="alternate" type="text/html" title="[10798] 새로읽기" /><published>2023-03-10T00:00:00+09:00</published><updated>2023-03-10T00:00:00+09:00</updated><id>http://localhost:4000/boj/10798</id><content type="html" xml:base="http://localhost:4000/boj/10798/"><![CDATA[<h2 id="bronze-i-세로읽기---10798">[Bronze I] 세로읽기 - 10798</h2>

<p><a href="https://www.acmicpc.net/problem/10798">문제 링크</a></p>

<h3 id="성능-요약">성능 요약</h3>

<p>메모리: 14280 KB, 시간: 164 ms</p>

<h3 id="분류">분류</h3>

<p>구현(implementation), 문자열(string)</p>

<h3 id="문제-설명">문제 설명</h3>

<p>아직 글을 모르는 영석이가 벽에 걸린 칠판에 자석이 붙어있는 글자들을 붙이는 장난감을 가지고 놀고 있다. </p>

<p>이 장난감에 있는 글자들은 영어 대문자 ‘A’부터 ‘Z’, 영어 소문자 ‘a’부터 ‘z’, 숫자 ‘0’부터 ‘9’이다. 영석이는 칠판에 글자들을 수평으로 일렬로 붙여서 단어를 만든다. 다시 그 아래쪽에 글자들을 붙여서 또 다른 단어를 만든다. 이런 식으로 다섯 개의 단어를 만든다. 아래 그림 1은 영석이가 칠판에 붙여 만든 단어들의 예이다. </p>

<pre>A A B C D D
a f z z 
0 9 1 2 1
a 8 E W g 6
P 5 h 3 k x</pre>

<p>&lt;그림 1&gt;</p>

<p>한 줄의 단어는 글자들을 빈칸 없이 연속으로 나열해서 최대 15개의 글자들로 이루어진다. 또한 만들어진 다섯 개의 단어들의 글자 개수는 서로 다를 수 있다. </p>

<p>심심해진 영석이는 칠판에 만들어진 다섯 개의 단어를 세로로 읽으려 한다. 세로로 읽을 때, 각 단어의 첫 번째 글자들을 위에서 아래로 세로로 읽는다. 다음에 두 번째 글자들을 세로로 읽는다. 이런 식으로 왼쪽에서 오른쪽으로 한 자리씩 이동 하면서 동일한 자리의 글자들을 세로로 읽어 나간다. 위의 그림 1의 다섯 번째 자리를 보면 두 번째 줄의 다섯 번째 자리의 글자는 없다. 이런 경우처럼 세로로 읽을 때 해당 자리의 글자가 없으면, 읽지 않고 그 다음 글자를 계속 읽는다. 그림 1의 다섯 번째 자리를 세로로 읽으면 D1gk로 읽는다. </p>

<p>그림 1에서 영석이가 세로로 읽은 순서대로 글자들을 공백 없이 출력하면 다음과 같다:</p>

<p>Aa0aPAf985Bz1EhCz2W3D1gkD6x</p>

<p>칠판에 붙여진 단어들이 주어질 때, 영석이가 세로로 읽은 순서대로 글자들을 출력하는 프로그램을 작성하시오.</p>

<h3 id="입력">입력</h3>

<p>총 다섯줄의 입력이 주어진다. 각 줄에는 최소 1개, 최대 15개의 글자들이 빈칸 없이 연속으로 주어진다. 주어지는 글자는 영어 대문자 ‘A’부터 ‘Z’, 영어 소문자 ‘a’부터 ‘z’, 숫자 ‘0’부터 ‘9’ 중 하나이다. 각 줄의 시작과 마지막에 빈칸은 없다.</p>

<h3 id="출력">출력</h3>

<p>영석이가 세로로 읽은 순서대로 글자들을 출력한다. 이때, 글자들을 공백 없이 연속해서 출력한다. </p>

<h2 id="아이디어">아이디어</h2>
<p>입력을 줄단위로 받아서 string 배열로 저장한 뒤<br />
이중 for문을 돌려서 새로로 쓰되<br />
인덱스가 배열의 길이을 넘어가면 건너뛴다.</p>

<h2 id="답안코드">답안코드</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>
        
        <span class="nc">String</span><span class="o">[]</span> <span class="n">board</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">[</span><span class="mi">5</span><span class="o">];</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">board</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
        <span class="o">}</span>
        
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">15</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="n">board</span><span class="o">.</span><span class="na">length</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">&lt;</span> <span class="n">i</span><span class="o">)</span> <span class="k">continue</span><span class="o">;</span>
                <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">board</span><span class="o">[</span><span class="n">j</span><span class="o">].</span><span class="na">substring</span><span class="o">(</span><span class="n">i</span><span class="o">,</span> <span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="o">));</span>
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="BOJ" /><category term="java" /><summary type="html"><![CDATA[백준 문제 풀이]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 28 - 메소드 참조와 Optional</title><link href="http://localhost:4000/java%20lang/Chap28/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 28 - 메소드 참조와 Optional" /><published>2023-03-08T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap28</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap28/"><![CDATA[<h2 id="28-1-메소드-참조-method-references">28-1. 메소드 참조 (Method References)</h2>
<blockquote>
  <p>이미 정의되어 있는 메소드가 있다면, 이 메소드의 정의가 람다식을 대신할 수 있지 않을까?</p>
</blockquote>

<p>실제로 메소드 정의는 람다식을 대신할 수 있다.</p>

<h3 id="--메소드-참조의-4가지-유형과-메소드-참조의-장점">- <u>메소드 참조의 4가지 유형과 메소드 참조의 장점</u></h3>
<p>메소드 참조의 유형은 총 4가지이다.</p>
<ul>
  <li>static 메소드의 참조</li>
  <li>참조변수를 통한 인스턴스 메소드 참조</li>
  <li>클래스 이름을 통한 인스턴스 메소드 참조</li>
  <li>생성자 참조</li>
</ul>

<h3 id="--static-메소드의-참조">- <u>static 메소드의 참조</u></h3>
<p>static 메소드 참조 방법<br />
ClassName::staticMethodName</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrangeList</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">9</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>

        <span class="c1">// Consumer&lt;List&lt;Integer&gt;&gt; c = l -&gt; Collections.reverse(l);</span>
        <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="nl">Collections:</span><span class="o">:</span><span class="n">reverse</span><span class="o">;</span>
        <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인스턴스-메소드의-참조1-인스턴스가-존재하는-상황에서-참조">- <u>인스턴스 메소드의 참조1: 인스턴스가 존재하는 상황에서 참조</u></h3>
<p>인스턴스 메소드 참조 방법 - 1<br />
ReferenceName::instanceMethodName</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">JustSort</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">sort</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Collections</span><span class="o">.</span><span class="na">reverse</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrangeList3</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">9</span><span class="o">));</span>

        <span class="nc">JustSort</span> <span class="n">js</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">JustSort</span><span class="o">();</span>

        <span class="c1">// Consumer&lt;List&lt;Integer&gt;&gt; c = e -&gt; js.sort(e);</span>
        <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="nl">js:</span><span class="o">:</span><span class="n">sort</span><span class="o">;</span>
        <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>람다식에서 같은 지역 내에 선언된 참조변수 js에 접근하고 있다.<br />
람다식이 인스턴스의 생성으로 이어진다는 사실을 고려하면 특이한 일이지만 결론적으로 람다식에서 같은 지역에 선언된 참조변수에 접근하는 것은 가능하다. 단, 여기에는 조건이 있다.</p>

<blockquote>
  <p>람다식에서 접근 가능한 참조변수는 final로 선언되었거나 effectively final이어야 한다.</p>
</blockquote>

<p>이렇게 제한한 이유는 참조변수가 참조하는 대상이 중간에 바뀔경우 논리적 혼란을 일으키거나 예측 불가능한 상황으로 이어질 수 있기 때문이다.</p>

<p><br />
좀 더 실질적인 상황을 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ForEachDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ls</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Robot"</span><span class="o">);</span>

        <span class="n">ls</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">));</span> <span class="c1">// 람다식 기반</span>
        <span class="n">ls</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>    <span class="c1">// 메소드 참조 기반</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Collection&lt;E&gt; 인터페이스는 Iterable&lt;T&gt;를 상속한다.<br />
이 인터페이스에 정의되어있는 forEach메소드를 살펴보면 다음과 같다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">default</span> <span class="kt">void</span> <span class="nf">forEach</span><span class="o">(</span><span class="nc">Consumer</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">action</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">action</span><span class="o">);</span>
    <span class="k">for</span> <span class="o">(</span><span class="no">T</span> <span class="n">t</span> <span class="o">:</span> <span class="k">this</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">action</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="n">t</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--인스턴스-메소드의-참조2-인스턴스-없이-인스턴스-메소드-참조">- <u>인스턴스 메소드의 참조2: 인스턴스 없이 인스턴스 메소드 참조</u></h3>
<p>인스턴스 메소드 참조 방법 - 2<br />
ClassName::instanceMethodName</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.ToIntBiFunction</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">IBox</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">IBox</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">n</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">larger</span><span class="o">(</span><span class="nc">IBox</span> <span class="n">box</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;</span> <span class="n">box</span><span class="o">.</span><span class="na">n</span><span class="o">)</span>
            <span class="k">return</span> <span class="n">n</span><span class="o">;</span>
        <span class="k">return</span> <span class="n">box</span><span class="o">.</span><span class="na">n</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoObjectMethodRef</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">IBox</span> <span class="n">iBox1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IBox</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
        <span class="nc">IBox</span> <span class="n">iBox2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">IBox</span><span class="o">(</span><span class="mi">7</span><span class="o">);</span>

        <span class="c1">// 두 상자에 저장된 값 비교하여 더 큰 값 반환</span>
        <span class="c1">// ToIntBiFunction&lt;IBox, IBox&gt; bf = (box1, box2) -&gt; box1.larger(box2);</span>
        <span class="nc">ToIntBiFunction</span><span class="o">&lt;</span><span class="nc">IBox</span><span class="o">,</span> <span class="nc">IBox</span><span class="o">&gt;</span> <span class="n">bf</span> <span class="o">=</span> <span class="nl">IBox:</span><span class="o">:</span><span class="n">larger</span><span class="o">;</span>

        <span class="kt">int</span> <span class="n">bigNum</span> <span class="o">=</span> <span class="n">bf</span><span class="o">.</span><span class="na">applyAsInt</span><span class="o">(</span><span class="n">iBox1</span><span class="o">,</span> <span class="n">iBox2</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">bigNum</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위의 방식처럼 람다를 메소드 참조로 바꿀 수 있는 이유는 larger가 ‘첫 번째 인자로 전달된 인스턴스의 메소드’임에 있고, 이는 일종의 약속이다.<br />
bf가 참조하는 메소드는 IBox::larger이고, 이는 ibox1, ibox2도 갖는 인스턴스 메소드지만, ‘첫 번째 전달인자를 대상으로 이 메소드를 호출하기로 약속하였으므로’ 그에 근거하여 실행이 된다.</p>

<h3 id="--생성자-참조">- <u>생성자 참조</u></h3>
<p>람다식을 작성하다 보면 인스턴스를 생성하고 이의 참조 값을 반환해야 하는 경우가 있다.<br />
ClassName::new</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StringMaker</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// Function&lt;char[], String&gt; f = ar -&gt; new String(ar);</span>
        <span class="nc">Function</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">[],</span> <span class="nc">String</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="nl">String:</span><span class="o">:</span><span class="k">new</span><span class="o">;</span>

        <span class="kt">char</span><span class="o">[]</span> <span class="n">src</span> <span class="o">=</span> <span class="o">{</span><span class="sc">'R'</span><span class="o">,</span> <span class="sc">'o'</span><span class="o">,</span> <span class="sc">'b'</span><span class="o">,</span> <span class="sc">'o'</span><span class="o">,</span> <span class="sc">'t'</span><span class="o">};</span>
        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">src</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="28-2-optional-클래스">28-2. Optional 클래스</h2>
<blockquote>
  <p>Optional 클래스를 사용하여 조건에 따라 코드의 흐름이 나뉘어지는 상황을 막을 수 있음</p>
</blockquote>

<p>클래스를 디자인할 때 가급적 클래스의 인스턴스 변수는 null로 두지 않는 것이 좋다.<br />
다만, 어쩔 수 없이 null을 허용해야 하는 상황에 대한 대비책으로 Otional 클래스가 하나의 대답이 될 수 있다.</p>

<h3 id="--nullpointerexception-예외의-발생-샹황">- <u>NullPointerException 예외의 발생 샹황</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Friend</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nc">Company</span> <span class="n">cmp</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Friend</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="nc">Company</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="n">cmp</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Company</span> <span class="nf">getCmp</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Company</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">cName</span><span class="o">;</span>
    <span class="nc">ContInfo</span> <span class="n">cInfo</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Company</span><span class="o">(</span><span class="nc">String</span> <span class="n">cn</span><span class="o">,</span> <span class="nc">ContInfo</span> <span class="n">ci</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cName</span> <span class="o">=</span> <span class="n">cn</span><span class="o">;</span>
        <span class="n">cInfo</span> <span class="o">=</span> <span class="n">ci</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cName</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">ContInfo</span> <span class="nf">getCInfo</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cInfo</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ContInfo</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>   <span class="c1">// null 일 수 있음</span>
    <span class="nc">String</span> <span class="n">adrs</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">ContInfo</span><span class="o">(</span><span class="nc">String</span> <span class="n">ph</span><span class="o">,</span> <span class="nc">String</span> <span class="n">ad</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">ph</span><span class="o">;</span>
        <span class="n">adrs</span> <span class="o">=</span> <span class="n">ad</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPhone</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">phone</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getAdrs</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">adrs</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">NullPointerCaseStudy</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showCompAddr</span><span class="o">(</span><span class="nc">Friend</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span> <span class="c1">// 친구의 회사 주소를 출력하는 메소드</span>
        <span class="nc">String</span> <span class="n">addr</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
    
        <span class="k">if</span><span class="o">(</span><span class="n">f</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="nc">Company</span> <span class="n">com</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">getCmp</span><span class="o">();</span>
            
            <span class="k">if</span><span class="o">(</span><span class="n">com</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="nc">ContInfo</span> <span class="n">info</span> <span class="o">=</span> <span class="n">com</span><span class="o">.</span><span class="na">getCInfo</span><span class="o">();</span>
                
                <span class="k">if</span><span class="o">(</span><span class="n">info</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
                    <span class="n">addr</span> <span class="o">=</span> <span class="n">info</span><span class="o">.</span><span class="na">getAdrs</span><span class="o">();</span>   
            <span class="o">}</span>
        <span class="o">}</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">addr</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">addr</span><span class="o">);</span>
        <span class="k">else</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"There's no address information."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">ContInfo</span> <span class="n">ci</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ContInfo</span><span class="o">(</span><span class="s">"321-444-577"</span><span class="o">,</span> <span class="s">"Republic of Korea"</span><span class="o">);</span>
        <span class="nc">Company</span> <span class="n">cp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Company</span><span class="o">(</span><span class="s">"YaHo Co., Ltd."</span><span class="o">,</span> <span class="n">ci</span><span class="o">);</span>
        <span class="nc">Friend</span> <span class="n">frn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Friend</span><span class="o">(</span><span class="s">"LEE SU"</span><span class="o">,</span> <span class="n">cp</span><span class="o">);</span>

        <span class="c1">// 친구 정보에서 회사 주소를 출력</span>
        <span class="n">showCompAddr</span><span class="o">(</span><span class="n">frn</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>다음과 같이 클래스의 멤버 변수가 null인 경우 NullPointerException 예외가 발생하는 것을 막기 위해 if-else로 case에 따라 수행 내용을 분리해놓을 경우 코드의 가독성도 떨어지고 불필요하게 코드가 길어진다.<br />
위의 코드를 Optional 클래스를 통해 적절하게 수정해보자</p>

<h3 id="--optional-클래스의-기본적인-사용-방법">- <u>Optional 클래스의 기본적인 사용 방법</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">StringOptional1</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os1</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Toy1"</span><span class="o">));</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os2</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Toy2"</span><span class="o">));</span>

        <span class="k">if</span><span class="o">(</span><span class="n">os1</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span> <span class="c1">// 내용물이 존재하면 true</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os1</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>  <span class="c1">// get을 통한 내용물 반환</span>

        <span class="k">if</span><span class="o">(</span><span class="n">os2</span><span class="o">.</span><span class="na">isPresent</span><span class="o">())</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os2</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Optional은 멤버에 인스턴스를 저장하는 일종의 래퍼 클래스이다.<br />
<img src="/assets/images/java-lang/28-2.png" alt="image" width="70%" height="70%" /><br /></p>

<p>위의 코드를 Optional의 인스턴스 메소드인 ifPresent 메소드를 통해 간략화시킬 수 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">StringOptional2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os1</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Toy1"</span><span class="o">));</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os2</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Toy2"</span><span class="o">));</span>

        <span class="cm">/* ifPresent(): Consumer 인스턴스를 입력인자로 받음 */</span>
        <span class="n">os1</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">));</span>  <span class="c1">// 람다식 버전</span>
        <span class="n">os2</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span> <span class="c1">// 메소드 참조 버전</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--map-메소드의-소개">- <u>map 메소드의 소개</u></h3>
<blockquote>
  <p>map 메소드는 apply 메소드가 반환하는 대상을 ‘Optional 인스턴스에 담아서’ 반환한다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">OptionalMap</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os1</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Optional String"</span><span class="o">);</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os2</span> <span class="o">=</span> <span class="n">os1</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toUpperCase</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os2</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>

        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os3</span> <span class="o">=</span> <span class="n">os1</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">replace</span><span class="o">(</span><span class="sc">' '</span><span class="o">,</span> <span class="sc">'_'</span><span class="o">))</span>
                                  <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toLowerCase</span><span class="o">());</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">os3</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><img src="/assets/images/java-lang/28-3.png" alt="image" width="70%" height="70%" /><br /></p>

<p>map 함수의 매개변수 형은 Function이다.<br />
apply 함수를 람다식을 통해 구현해주게 되면 그 구현한 내용을 통해 해당 인스턴스를 처리한 뒤<br />
Optional 인스턴스로 한 번 감싸서 반환한다는 것이 특징이다.</p>

<p>따라서 반환한 Optional 인스턴스 안에 값을 가져오기 위해 get 등의 메소드를 사용해주었다.</p>

<h3 id="--orelse-메소드의-소개">- <u>orElse 메소드의 소개</u></h3>
<p>Optional 인스턴스에 저장된 내용물을 반환하는 메소드에는 get과 orElse가 있다.<br />
차이점은 orElse는 저장된 내용물이 없을 때, 대신해서 반환할 대상을 지정할 수 있다는 점이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">OptionalOrElse</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os1</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">os2</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"So Basic"</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">s1</span> <span class="o">=</span> <span class="n">os1</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
                       <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"Empty"</span><span class="o">);</span>

        <span class="nc">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">os2</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">toString</span><span class="o">())</span>
                       <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"Empty"</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--nullpointercasestudyjava의-개선-결과">- <u>NullPointerCaseStudy.java의 개선 결과</u></h3>
<p>map과 orElse 메소드를 통해 처음 봤던 코드를 간략히 줄여보았다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Friend</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nc">Company</span> <span class="n">cmp</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Friend</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="nc">Company</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="n">cmp</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Company</span> <span class="nf">getCmp</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Company</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">cName</span><span class="o">;</span>
    <span class="nc">ContInfo</span> <span class="n">cInfo</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Company</span><span class="o">(</span><span class="nc">String</span> <span class="n">cn</span><span class="o">,</span> <span class="nc">ContInfo</span> <span class="n">ci</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cName</span> <span class="o">=</span> <span class="n">cn</span><span class="o">;</span>
        <span class="n">cInfo</span> <span class="o">=</span> <span class="n">ci</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cName</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">ContInfo</span> <span class="nf">getCInfo</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cInfo</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ContInfo</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">phone</span><span class="o">;</span>   <span class="c1">// null 일 수 있음</span>
    <span class="nc">String</span> <span class="n">adrs</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">ContInfo</span><span class="o">(</span><span class="nc">String</span> <span class="n">ph</span><span class="o">,</span> <span class="nc">String</span> <span class="n">ad</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">ph</span><span class="o">;</span>
        <span class="n">adrs</span> <span class="o">=</span> <span class="n">ad</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getPhone</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">phone</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getAdrs</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">adrs</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">NullPointerCaseStudy2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showCompAddr</span><span class="o">(</span><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Friend</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Friend:</span><span class="o">:</span><span class="n">getCmp</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Company:</span><span class="o">:</span><span class="n">getCInfo</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">ContInfo:</span><span class="o">:</span><span class="n">getAdrs</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"There's no address information."</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">addr</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">ContInfo</span> <span class="n">ci</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ContInfo</span><span class="o">(</span><span class="s">"321-444-577"</span><span class="o">,</span> <span class="s">"Republic of Korea"</span><span class="o">);</span>
        <span class="nc">Company</span> <span class="n">cp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Company</span><span class="o">(</span><span class="s">"YaHo Co., Ltd."</span><span class="o">,</span> <span class="n">ci</span><span class="o">);</span>
        <span class="nc">Friend</span> <span class="n">frn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Friend</span><span class="o">(</span><span class="s">"LEE SU"</span><span class="o">,</span> <span class="n">cp</span><span class="o">);</span>

        <span class="c1">// 친구 정보에서 회사 주소를 출력</span>
        <span class="n">showCompAddr</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">frn</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--optional-클래스의-flatmap-메소드">- <u>Optional 클래스의 flatMap 메소드</u></h3>
<p>map은 람다식이 반환하는 내용물을 Optional로 감싸서 반환한다.<br />
flatMap은 그냥 반환한다.</p>

<p>클래스의 멤버를 Optional로 두면 이 멤버와 관련된 코드 전반에 걸쳐서 코드의 개선을 기대할 수 있다.<br />
이렇게 멤버를 Optional로 두는 경우에는 map보다 flatMap이 더 어울린다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Optional</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">Friend</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">cmp</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Friend</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        <span class="n">cmp</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">name</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="nf">getCmp</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cmp</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Company</span> <span class="o">{</span>
    <span class="nc">String</span> <span class="n">cName</span><span class="o">;</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">ContInfo</span><span class="o">&gt;</span> <span class="n">cInfo</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">Company</span><span class="o">(</span><span class="nc">String</span> <span class="n">cn</span><span class="o">,</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">ContInfo</span><span class="o">&gt;</span> <span class="n">ci</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">cName</span> <span class="o">=</span> <span class="n">cn</span><span class="o">;</span>
        <span class="n">cInfo</span> <span class="o">=</span> <span class="n">ci</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getCName</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cName</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">ContInfo</span><span class="o">&gt;</span> <span class="nf">getCInfo</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">cInfo</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">ContInfo</span> <span class="o">{</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">phone</span><span class="o">;</span>   <span class="c1">// null 일 수 있음</span>
    <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">adrs</span><span class="o">;</span>    <span class="c1">// null 일 수 있음</span>

    <span class="kd">public</span> <span class="nf">ContInfo</span><span class="o">(</span><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ph</span><span class="o">,</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">ad</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">ph</span><span class="o">;</span>
        <span class="n">adrs</span> <span class="o">=</span> <span class="n">ad</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getPhone</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">phone</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getAdrs</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">adrs</span><span class="o">;</span> <span class="o">}</span>

<span class="o">}</span>

<span class="kd">class</span> <span class="nc">NullPointerCaseStudy3</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showCompAddr</span><span class="o">(</span><span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Friend</span><span class="o">&gt;</span> <span class="n">f</span><span class="o">)</span> <span class="o">{</span>

        <span class="nc">String</span> <span class="n">addr</span> <span class="o">=</span> <span class="n">f</span><span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Friend:</span><span class="o">:</span><span class="n">getCmp</span><span class="o">)</span>
                <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">Company:</span><span class="o">:</span><span class="n">getCInfo</span><span class="o">)</span>
                <span class="o">.</span><span class="na">flatMap</span><span class="o">(</span><span class="nl">ContInfo:</span><span class="o">:</span><span class="n">getAdrs</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="s">"There's no address information."</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">addr</span><span class="o">);</span>    
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">ContInfo</span><span class="o">&gt;</span> <span class="n">ci</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
                    <span class="k">new</span> <span class="nf">ContInfo</span><span class="o">(</span><span class="nc">Optional</span><span class="o">.</span><span class="na">ofNullable</span><span class="o">(</span><span class="kc">null</span><span class="o">),</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"Republic of Korea"</span><span class="o">))</span>
        <span class="o">);</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Company</span><span class="o">&gt;</span> <span class="n">cp</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">Company</span><span class="o">(</span><span class="s">"YaHo Co., Ltd."</span><span class="o">,</span> <span class="n">ci</span><span class="o">));</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Friend</span><span class="o">&gt;</span> <span class="n">frn</span> <span class="o">=</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="k">new</span> <span class="nc">Friend</span><span class="o">(</span><span class="s">"LEE SU"</span><span class="o">,</span> <span class="n">cp</span><span class="o">));</span>

        <span class="c1">// 친구 정보에서 회사 주소를 출력</span>
        <span class="n">showCompAddr</span><span class="o">(</span><span class="n">frn</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="28-3-optionalint-optionallong-optionaldouble-클래스">28-3. OptionalInt, OptionalLong, OptionalDouble 클래스</h2>
<p>Optional 클래스는 제네릭 클래스이다.<br />
따라서 기본 자료형을 다루기 위해서는 다른 방식이 필요하다.</p>

<h3 id="--optional과-optionalxxx와의-차이점">- <u>Optional과 OptionalXXX와의 차이점</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.OptionalInt</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">OptionalIntBase</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">OptionalInt</span> <span class="n">oi1</span> <span class="o">=</span> <span class="nc">OptionalInt</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
        <span class="nc">OptionalInt</span> <span class="n">oi2</span> <span class="o">=</span> <span class="nc">OptionalInt</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
        
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"[Step 1.] : "</span><span class="o">);</span>
        <span class="n">oi1</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">));</span>
        <span class="n">oi2</span><span class="o">.</span><span class="na">ifPresent</span><span class="o">(</span><span class="n">i</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">i</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"[Step 2.] : "</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">oi1</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">oi2</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="mi">100</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\t"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>기본적인 코드구성은 동일하다.<br />
단, OptionalXXX 클래스들에는 map과 flatMap 메소드가 정의되어 있지 않다.</p>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 27 - 람다와 함수형 인터페이스</title><link href="http://localhost:4000/java%20lang/Chap27/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 27 - 람다와 함수형 인터페이스" /><published>2023-03-07T00:00:00+09:00</published><updated>2023-03-08T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap27</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap27/"><![CDATA[<h2 id="27-1-람다와-함수형-인터페이스">27-1. 람다와 함수형 인터페이스</h2>
<h3 id="--인스턴스보다-기능-하나가-필요한-상황을-위한-람다">- <u>인스턴스보다 기능 하나가 필요한 상황을 위한 람다</u></h3>
<blockquote>
  <p>기능 하나를 정의해서 전달해야 하는 상황</p>
</blockquote>

<p>자바는 객체지향언어이기 때문에 인스턴스를 전달하는 형태이지만 내용을 보면 메소드, 즉 기능을 전달하는 상황이 생기곤 한다.<br />
이러한 상황에서 람다가 유용하게 쓰일 수 있다.</p>

<h3 id="--매개변수가-있고-반환하지-않는-람다식">- <u>매개변수가 있고 반환하지 않는 람다식</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">LambdaExample</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OneParamNoReturn</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">LambdaExample</span> <span class="n">l</span><span class="o">;</span>

        <span class="c1">// 줄임 없는 표현</span>
        <span class="n">l</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span> <span class="o">};</span>

        <span class="c1">// 중괄호 생략</span>
        <span class="n">l</span> <span class="o">=</span> <span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>

        <span class="c1">// 매개변수 형 생략</span>
        <span class="n">l</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>

        <span class="c1">// 매개변수 소괄호 생략</span>
        <span class="n">l</span> <span class="o">=</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>

        <span class="n">l</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"Lambda example!"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Calculate</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">cal</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TwoParamNoReturn</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Calculate</span> <span class="n">c</span><span class="o">;</span>    <span class="c1">// 매개변수가 둘 이상인 경우, 괄호를 생략하는 것은 불가능하다.</span>

        <span class="c1">// 덧셈 진행</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">);</span>
        <span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>

        <span class="c1">// 뺄셈 진행</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="o">);</span>
        <span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>

        <span class="c1">// 곱셈 진행</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">a</span> <span class="o">*</span> <span class="n">b</span><span class="o">);</span>
        <span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span> <span class="mi">3</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--매개변수가-있고-반환하는-람다식">- <u>매개변수가 있고 반환하는 람다식</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">RCalculate</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">cal</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TwoParamAndReturn</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">RCalculate</span> <span class="n">c</span><span class="o">;</span>

        <span class="c1">// 몸체에 return이 들어가면 중괄호 생략 불가</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span> <span class="o">};</span>    <span class="c1">// c = (a, b) -&gt; { a + b; }; 불가능</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">3</span><span class="o">));</span>

        <span class="c1">// return 문이 메소드의 몸체를 이루는 유일한 경우</span>
        <span class="n">c</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">c</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">4</span><span class="o">,</span><span class="mi">3</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--매개변수가-없는-람다식">- <u>매개변수가 없는 람다식</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>

<span class="kd">interface</span> <span class="nc">Generator</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">rand</span><span class="o">();</span> <span class="c1">// 매개변수 없는 메소드</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NoParamAndReturn</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Generator</span> <span class="n">g</span><span class="o">;</span>

        <span class="n">g</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">Random</span> <span class="n">random</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
            <span class="k">return</span> <span class="n">random</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
        <span class="o">};</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">rand</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--함수형-인터페이스와-어노테이션">- <u>함수형 인터페이스와 어노테이션</u></h3>
<blockquote>
  <p>함수형 인터페이스: 추상 메소드가 딱 하나만 존재하는 인터페이스</p>
</blockquote>

<p>@FunctionsalInterface 어노테이션 타입을 통해 함수형 인터페이스에 부합하는지를 확인할 수 있다.<br />
인터페이스에 둘 이상의 추상 메소드가 존재하면, 컴파일 오류로 이어진다.<br />
그러나 static, default 선언이 붙은 메소드의 정의는 함수형 인터페이스의 정의에 아무런 영향을 미치지 않는다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">Calculate</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">cal</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">);</span>
    <span class="k">default</span> <span class="kt">int</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">static</span> <span class="kt">int</span> <span class="nf">sub</span><span class="o">(</span><span class="kt">int</span> <span class="n">a</span><span class="o">,</span> <span class="kt">int</span> <span class="n">b</span><span class="o">)</span> <span class="o">{</span> <span class="k">return</span> <span class="n">a</span> <span class="o">-</span> <span class="n">b</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--람다식과-제네릭">- <u>람다식과 제네릭</u></h3>
<p>인터페이스는 제네릭으로 정의하는 것이 가능하다.<br />
따라서 제네릭으로 정의된 함수형 인터페이스를 대상으로 람다식을 작성할 수도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@FunctionalInterface</span>
<span class="kd">interface</span> <span class="nc">Calculator</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="no">T</span> <span class="nf">cal</span><span class="o">(</span><span class="no">T</span> <span class="n">a</span><span class="o">,</span> <span class="no">T</span> <span class="n">b</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LambdaGeneric</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 참조변수의 형을 지정해서 문장을 구성하면 된다.</span>
        <span class="nc">Calculator</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">intCalculator</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">intCalculator</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mi">3</span><span class="o">,</span> <span class="mi">4</span><span class="o">));</span>

        <span class="nc">Calculator</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">doubleCalculator</span> <span class="o">=</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">a</span> <span class="o">+</span> <span class="n">b</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">doubleCalculator</span><span class="o">.</span><span class="na">cal</span><span class="o">(</span><span class="mf">4.32</span><span class="o">,</span> <span class="mf">3.45</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="27-2-정의되어-있는-함수형-인터페이스">27-2. 정의되어 있는 함수형 인터페이스</h2>
<blockquote>
  <p>표준 함수형 인터페이스의 추상 메소드 정의에 해당하는 람다식을 작성해서 전달해야한다.</p>
</blockquote>

<h3 id="--미리-정의되어-있는-함수형-인터페이스">- <u>미리 정의되어 있는 함수형 인터페이스</u></h3>
<p><img src="/assets/images/java-lang/27-1.png" alt="image" width="80%" height="80%" /><br /></p>

<p>‘미리 정의해 놓은’ 함수형 인터페이스들이 있다.<br />
메소드의 반환형과 매개변수 선언에 차이를 둔 다양한 함수형 인터페이스들을 표준으로 정의하고 있다.<br />
위의 표준 인터페이스들을 알아야 removeIf 같은 메소드도 사용할 수 있다.</p>

<h3 id="--predicatet">- Predicate&lt;T&gt;</h3>
<p>Predicate&lt;T&gt; 인터페이스에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">boolean</span> <span class="nf">test</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>  <span class="c1">// 전달된 인자를 대상으로 true, false 판단할 때</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Predicate</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">PredicateDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">sum</span><span class="o">(</span><span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">p</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">lst</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
        
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span> <span class="o">:</span> <span class="n">lst</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span><span class="o">(</span><span class="n">p</span><span class="o">.</span><span class="na">test</span><span class="o">(</span><span class="n">n</span><span class="o">))</span>
                <span class="n">s</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>
        <span class="o">}</span>       
        
        <span class="k">return</span> <span class="n">s</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">5</span><span class="o">,</span> <span class="mi">7</span><span class="o">,</span> <span class="mi">9</span><span class="o">,</span> <span class="mi">11</span><span class="o">,</span> <span class="mi">12</span><span class="o">);</span>
    
        <span class="kt">int</span> <span class="n">s</span><span class="o">;</span>
        <span class="n">s</span> <span class="o">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"짝수 합: "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>

        <span class="n">s</span> <span class="o">=</span> <span class="n">sum</span><span class="o">(</span><span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">%</span><span class="mi">2</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">,</span> <span class="n">list</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"홀수 합: "</span> <span class="o">+</span> <span class="n">s</span><span class="o">);</span>

    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--suppliert">- Supplier&lt;T&gt;</h3>
<p>Supplier&lt;T&gt; 인터페이스에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="no">T</span> <span class="nf">get</span><span class="o">();</span>    <span class="c1">// 단순히 무엇인가 반환할 때</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Random</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Supplier</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">SupplierDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="nf">makeIntList</span><span class="o">(</span><span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">s</span><span class="o">,</span> <span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>    
        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">s</span><span class="o">.</span><span class="na">get</span><span class="o">());</span>  <span class="c1">// 난수를 생성해 담는다.</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>
    
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Supplier</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">spr</span> <span class="o">=</span> <span class="o">()</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="nc">Random</span> <span class="n">rand</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Random</span><span class="o">();</span>
            <span class="k">return</span> <span class="n">rand</span><span class="o">.</span><span class="na">nextInt</span><span class="o">(</span><span class="mi">50</span><span class="o">);</span>
        <span class="o">};</span>

        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">makeIntList</span><span class="o">(</span><span class="n">spr</span><span class="o">,</span> <span class="mi">5</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>

        <span class="n">list</span> <span class="o">=</span> <span class="n">makeIntList</span><span class="o">(</span><span class="n">spr</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--consumert">- Consumer&lt;T&gt;</h3>
<p>Consumer&lt;T&gt;에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">accept</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>   <span class="c1">// 전달된 인자 기반으로 '반환' 이외의 다른 결과를 보일 때</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.Consumer</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">ConsumerDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Consumer</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">c</span> <span class="o">=</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        
        <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="s">"Pineapple"</span><span class="o">);</span>    <span class="c1">// 출력이라는 결과를 보임</span>
        <span class="n">c</span><span class="o">.</span><span class="na">accept</span><span class="o">(</span><span class="s">"Strawberry"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--functiont-r">- Function&lt;T, R&gt;</h3>
<p>Consumer&lt;T&gt;에는 다음 추상 메소드가 존재한다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// T: 매개변수형, R: 반환형</span>
<span class="no">R</span> <span class="nf">apply</span><span class="o">(</span><span class="no">T</span> <span class="n">t</span><span class="o">);</span>   <span class="c1">// 전달 인자와 반환 값이 모두 존재할 때</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">FunctionDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">f</span> <span class="o">=</span> <span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">"Robot"</span><span class="o">));</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">f</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="s">"System"</span><span class="o">));</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.function.Function</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">FunctionDemo2</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">cti</span> <span class="o">=</span> <span class="n">d</span> <span class="o">-&gt;</span> <span class="n">d</span> <span class="o">*</span> <span class="mf">0.393701</span><span class="o">;</span>
        <span class="nc">Function</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">,</span> <span class="nc">Double</span><span class="o">&gt;</span> <span class="n">itc</span> <span class="o">=</span> <span class="n">d</span> <span class="o">-&gt;</span> <span class="n">d</span> <span class="o">*</span> <span class="mf">2.54</span><span class="o">;</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1cm = "</span> <span class="o">+</span> <span class="n">cti</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mf">1.0</span><span class="o">)</span> <span class="o">+</span> <span class="s">"inch"</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1inch = "</span> <span class="o">+</span> <span class="n">itc</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="mf">1.0</span><span class="o">)</span> <span class="o">+</span> <span class="s">"cm"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--predicatet-suppliert-consumert-functiont-r을-구체화하고-다양화-한-인터페이스들">- Predicate&lt;T&gt;, Supplier&lt;T&gt;, Consumer&lt;T&gt;, Function&lt;T, R&gt;을 구체화하고 다양화 한 인터페이스들</h3>
<p>T를 기본 자료형으로 결정하여 정의한 인터페이스들도 존재한다.<br />
이렇게 할 경우 박싱, 언박싱 과정이 필요없어진다.<br />
다양하게 있으니 필요한 순간에 찾아서 써보도록 하자.</p>

<h3 id="--removeif-메소드를-사용해-보자">- <u>removeIf 메소드를 사용해 보자.</u></h3>
<p>Collection&lt;E&gt; 인터페이스에 정의되어 있는 다음 디폴트 메소드를 살펴보자.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">default</span> <span class="kt">boolean</span> <span class="nf">removeIf</span><span class="o">(</span><span class="nc">Predicate</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="no">E</span><span class="o">&gt;</span> <span class="n">filter</span><span class="o">)</span>
</code></pre></div></div>

<p>위 메소드의 기능에 대한 자바 문서의 설명은 다음과 같다.<br />
“Removes all of the elements of this collection that satisfy the given predicate”</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.Arrays</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.function.Predicate</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">RemoveIfDemo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">&gt;</span> <span class="n">ls1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">,</span> <span class="mi">3</span><span class="o">,</span> <span class="o">-</span><span class="mi">4</span><span class="o">,</span> <span class="mi">5</span><span class="o">));</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Double</span><span class="o">&gt;</span> <span class="n">ls2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(-</span><span class="mf">1.1</span><span class="o">,</span> <span class="mf">2.2</span><span class="o">,</span> <span class="mf">3.3</span><span class="o">,</span> <span class="o">-</span><span class="mf">4.4</span><span class="o">,</span> <span class="mf">5.5</span><span class="o">));</span>

        <span class="c1">// Predicate의 정의에는 와일드카드를 이용한 하한제한이 걸려있기 때문에 Double과 Integer 모두 적용하기 위해 Number로 E를 결정함</span>
        <span class="nc">Predicate</span><span class="o">&lt;</span><span class="nc">Number</span><span class="o">&gt;</span> <span class="n">p</span> <span class="o">=</span> <span class="n">n</span> <span class="o">-&gt;</span> <span class="n">n</span><span class="o">.</span><span class="na">doubleValue</span><span class="o">()</span> <span class="o">&lt;</span> <span class="mf">0.0</span><span class="o">;</span>

        <span class="n">ls1</span><span class="o">.</span><span class="na">removeIf</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>
        <span class="n">ls2</span><span class="o">.</span><span class="na">removeIf</span><span class="o">(</span><span class="n">p</span><span class="o">);</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls1</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ls2</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 26 - 네스티드 클래스와 람다(Lambda)의 소개</title><link href="http://localhost:4000/java%20lang/Chap26/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 26 - 네스티드 클래스와 람다(Lambda)의 소개" /><published>2023-03-06T00:00:00+09:00</published><updated>2023-03-07T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap26</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap26/"><![CDATA[<h2 id="26-1-네스티드nested-클래스와-이너inner-클래스">26-1. 네스티드(Nested) 클래스와 이너(Inner) 클래스</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Outer</span> <span class="o">{</span>
  <span class="kd">class</span> <span class="nc">Nested</span> <span class="o">{...}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>클래스 내에 정의된 클래스를 가리켜 네스티드 클래스(Nested Class)라 하고,<br />
이를 감싸는 클래스를 외부 클래스(Outer Class)라 한다.</p>

<h3 id="--네스티드-클래스의-구분">- <u>네스티드 클래스의 구분</u></h3>
<p><img src="/assets/images/java-lang/26-1.png" alt="image" width="80%" height="80%" /><br />
static이냐, non static이냐로 나뉘고,<br />
non static 네스티드 클래스는 다시 멤버 클래스, 로컬 클래스, 익명 클래스로 나뉜다.</p>

<h3 id="--static-네스티드-클래스-static-nested-class">- <u>Static 네스티드 클래스 (Static Nested Class)</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Outer</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Nested1</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="nf">add</span><span class="o">(</span><span class="kt">int</span> <span class="n">n</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">num</span> <span class="o">+=</span> <span class="n">n</span><span class="o">;</span>   <span class="c1">// Outer 클래스의 static 변수를 공유한다.</span>
    <span class="o">}</span>
  <span class="o">}</span>

  <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Nested2</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="nf">get</span><span class="o">()</span> <span class="o">{</span>
      <span class="k">return</span> <span class="n">num</span><span class="o">;</span> <span class="c1">// Outer 클래스의 static 변수를 공유한다.</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">StaticNested</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 인스턴스 생성방법</span>
    <span class="nc">Outer</span><span class="o">.</span><span class="na">Nested1</span> <span class="n">nst1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Outer</span><span class="o">.</span><span class="na">Nested1</span><span class="o">();</span>
    <span class="nc">Outer</span><span class="o">.</span><span class="na">Nested2</span> <span class="n">nst2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Outer</span><span class="o">.</span><span class="na">Nested2</span><span class="o">();</span>

    <span class="c1">// static 변수 num을 공유한다.</span>
    <span class="n">nst1</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">5</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">nst2</span><span class="o">.</span><span class="na">get</span><span class="o">());</span> <span class="c1">// 5가 출력됨</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Static 네스티드 클래스의 인스턴스 생성은 외부 클래스의 인스턴스 생성과 무관하다.<br />
따라서, 다음도 유추해볼 수 있다.</p>
<blockquote>
  <p>Static 네스티드 클래스 내에서 외부 클래스의 인스턴스 변수와 메소드에 접근 불가능하다.<br />
즉, Static 네스티드 클래스 내에서는 외부 클래스에 static으로 선언된 변수와 메소드에만 접근이 가능하다.</p>
</blockquote>

<h3 id="--이너inner-클래스의-구분">- <u>이너(Inner) 클래스의 구분</u></h3>
<p>네스티드 클래스 중에서 static 선언이 붙지 않은 클래스를 가리켜 ‘이너 클래스’라 한다.</p>
<ul>
  <li>멤버 클래스 (Member Class)</li>
  <li>로컬 클래스 (Local Class)</li>
  <li>익명 클래스 (Anonymous Class)</li>
</ul>

<p>이들 중 다음 둘은 정의된 위치에 따라서 구분이 된다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Outer</span> <span class="o">{</span>
  <span class="cm">/**
  * 멤버 클래스
  * 인스턴스 변수, 인스턴스 메소드와 동일한 위치에 정의
  */</span>
  <span class="kd">class</span> <span class="nc">MemberInner</span> <span class="o">{...}</span> 
  
  <span class="cm">/**
  * 로컬 클래스
  * 중괄호 내에, 특히 메소드 내에 정의
  */</span>
  <span class="kt">void</span> <span class="nf">method</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">class</span> <span class="nc">LocalInner</span> <span class="o">{...}</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--멤버-클래스member-class">- <u>멤버 클래스(Member Class)</u></h3>
<p><img src="/assets/images/java-lang/26-2.png" alt="image" width="80%" height="80%" /><br /></p>

<p>Member 클래스 내에서는 Outer 클래스의 인스턴스 변수에 접근이 가능하다.<br />
그리고 코드에서 볼 수 있듯이</p>
<blockquote>
  <p>멤버 클래스의 인스턴스는 외부 클래스의 인스턴스에 종속적이다.</p>
</blockquote>

<h3 id="--멤버-클래스를-언제-사용하는가">- <u>'멤버 클래스'를 언제 사용하는가?</u></h3>
<blockquote>
  <p>클래스의 정의를 감추어야 할 때 유용하게 사용이 된다.</p>
</blockquote>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Paper</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">con</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">Paper</span><span class="o">(</span><span class="nc">String</span> <span class="n">con</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">con</span> <span class="o">=</span> <span class="n">con</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">Printable</span> <span class="nf">getPrinter</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">Printer</span><span class="o">();</span>   <span class="c1">// 멤버 클래스 인스턴스 생성 및 반환</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Printer</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>    <span class="c1">// 멤버 클래스의 정의</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
      <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">con</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UseMemberInner</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Paper</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Paper</span><span class="o">(</span><span class="s">"서류 내용: 행복합니다."</span><span class="o">);</span>
    <span class="nc">Printable</span> <span class="n">prn</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">getPrinter</span><span class="o">();</span>
    <span class="n">prn</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>    <span class="c1">// 서류 내용: 행복합니다.</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Printer 클래스는 private으로 선언되었기 때문에 이 클래스를 감싸는 클래스 내에서만 인스턴스 생성이 가능하다.
이 때문에 Papers 클래스의 외부에서는 getPrinter 메소드가 어떤 인스턴스의 참조 값을 반환하는지 알지 못한다.<br />
다만, 반환되는 참조 값의 인스턴스가 Printable을 구현하고 있어서 Printable의 참조 변수로 참조할 수 있다는 사실만 안다.<br />
이러한 상황을 ‘클래스의 정의가 감추어진 상황’이라 한다.</p>

<p>클래스의 정의를 감추면 getPrinter 메소드가 반환하는 인스턴스가 다른 클래스의 인스턴스로 변경되어도 Papers 클래스 외부의 코드는 수정할 필요가 없다.<br />
즉, 코드에 유연성이 부여되었다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
  <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
  <span class="nc">Iterator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">itr</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">iterator</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ArrayList</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="kd">implements</span> <span class="nc">List</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="o">....</span>
  <span class="kd">public</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="nf">iterator</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">Itr</span><span class="o">();</span> <span class="c1">// 멤버 클래스의 인스턴스 생성 및 반환</span>
  <span class="o">}</span>

  <span class="kd">private</span> <span class="kd">class</span> <span class="nc">Itr</span> <span class="kd">implements</span> <span class="nc">Iterator</span><span class="o">&lt;</span><span class="no">E</span><span class="o">&gt;</span> <span class="o">{</span>  <span class="c1">// 멤버 클래스의 정의</span>
    <span class="o">...</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>전에 보았던 iterator 메소드도 보다싶이 inner class로 정의되어있다.<br />
이를 통해 반복자가 Outer Class의 멤버에 직접 접근이 가능했던 이유를 알 수 있다.</p>

<h3 id="--로컬-클래스-local-class">- <u>로컬 클래스 (Local Class)</u></h3>
<p>‘로컬 클래스’는 ‘멤버 클래스’와 매우 유사하다.<br />
다만, 클래스의 정의 위치가 if문이나 while문 또는 메소드 몸체와 같은 블록 안에 정의된다는 점에서 ‘멤버 클래스’와 구분된다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Paper</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">con</span><span class="o">;</span>

  <span class="kd">public</span> <span class="nf">Paper</span><span class="o">(</span><span class="nc">String</span> <span class="n">con</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">this</span><span class="o">.</span><span class="na">con</span> <span class="o">=</span> <span class="n">con</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">Printable</span> <span class="nf">getPrinter</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">class</span> <span class="nc">Printer</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>    <span class="c1">// 로컬 클래스의 정의</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">con</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="k">new</span> <span class="nf">Printer</span><span class="o">();</span>   <span class="c1">// 로컬 클래스 인스턴스 생성 및 반환</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UseLocalInner</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Paper</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Paper</span><span class="o">(</span><span class="s">"서류 내용: 행복합니다."</span><span class="o">);</span>
    <span class="nc">Printable</span> <span class="n">prn</span> <span class="o">=</span> <span class="n">p</span><span class="o">.</span><span class="na">getPrinter</span><span class="o">();</span>
    <span class="n">prn</span><span class="o">.</span><span class="na">print</span><span class="o">();</span>    <span class="c1">// 서류 내용: 행복합니다.</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p>멤버 클래스보다도 클래스를 더 깊이, 특정 블록 안으로 감추는 효과가 있다.</p>

<h3 id="--익명-클래스-anonymous-class">- <u>익명 클래스 (Anonymous Class)</u></h3>
<p>익명 클래스의 이해를 돕기 위해 위의 클래스를 익명 클래스의 형태로 재정의해보자.<br />
<img src="/assets/images/java-lang/26-3.png" alt="image" width="80%" height="80%" /><br /></p>

<p>실제로 전에 Collection 공부할 당시 쓰였던 코드를 익명 클래스의 정의 형태로 다시 만들어보았다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">class</span> <span class="nc">SSComp</span> <span class="kd">implements</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="o">{</span>
  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">String</span> <span class="n">s1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s2</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="n">s1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">s2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SortComparator</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"ROBOT"</span><span class="o">);</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"APPLE"</span><span class="o">);</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"BOX"</span><span class="o">);</span>

    <span class="nc">SSComp</span> <span class="n">cmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">SSComp</span><span class="o">();</span>      <span class="c1">// 정렬 기준</span>
    <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">cmp</span><span class="o">);</span>    <span class="c1">// 정렬 기준 변경해서 정렬 진행</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collections</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Comparator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AnonymousComparator</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"ROBOT"</span><span class="o">);</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"APPLE"</span><span class="o">);</span>
    <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"BOX"</span><span class="o">);</span>

    <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">cmp</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Comparator</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;()</span> <span class="o">{</span>
      <span class="nd">@Override</span>
      <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compare</span><span class="o">(</span><span class="nc">String</span> <span class="n">o1</span><span class="o">,</span> <span class="nc">String</span> <span class="n">o2</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">o1</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">-</span> <span class="n">o2</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
      <span class="o">}</span>
    <span class="o">};</span>

    <span class="nc">Collections</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">cmp</span><span class="o">);</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">list</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="26-2-람다lambda의-소개">26-2. 람다(Lambda)의 소개</h2>
<h3 id="--람다의-이해">- <u>람다의 이해</u></h3>
<p>람다를 사용하면 코드를 줄일 수 있고, 그렇게 만들어진 코드는 가독성도 뛰어나다.<br />
다음 예시를 보고 람다를 이해해보자.</p>

<p>1) 기존 방식</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 인터페이스 Printable을 구현하는 인스턴스의 생성을 위해..</span>
<span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>

<span class="c1">// 1. Printable 인터페이스를 구현하는 Printer 클래스를 정의함</span>
<span class="kd">class</span> <span class="nc">Printer</span> <span class="kd">implements</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lambda1</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// Printer 클래스를 통해 인스턴스를 생성함</span>
    <span class="nc">Priatable</span> <span class="n">prn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Printer</span><span class="o">();</span>
    
    <span class="n">prn</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"What is Lambda?"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<p>2) 익명 클래스 활용</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 인터페이스 Printable을 구현하는 인스턴스의 생성을 위해..</span>
<span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Lambda2</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 2. 익명 클래스의 적용을 통해 기존 Printer 클래스의 정의를 하나 줄여줌</span>
    <span class="nc">Priatable</span> <span class="n">prn</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Printer</span><span class="o">()</span> <span class="o">{</span>
      <span class="kd">public</span> <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
      <span class="o">}</span>
    <span class="o">};</span>
    
    <span class="n">prn</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"What is Lambda?"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<p>3) 람다 활용</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 인터페이스 Printable을 구현하는 인스턴스의 생성을 위해..</span>
<span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LambdaExample</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="c1">// 위의 예시를 람다 기반으로 수정함</span>
    <span class="nc">Printable</span> <span class="n">prn</span> <span class="o">=</span> <span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span> <span class="o">};</span>
    
    <span class="n">prn</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="s">"What is Lambda"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><br /></p>

<p>익명 클래스와 람다는 분명 다르지만 둘 다 인스턴스의 생성으로 이어지고, 람다식이 익명 클래스의 정의를 일부 대체하기 때문에 익명 클래스의 정의를 기반으로 람다식을 이해해보자.</p>

<p><img src="/assets/images/java-lang/26-5.png" alt="image" width="60%" height="60%" /><br />
핵심은 참조변수의 type 정보를 보고 컴파일러가 어디까지 유추할 수 있는가에 있다.<br />
컴파일러가 참조변수의 type(Printable)을 보고</p>
<ol>
  <li>아! 오른쪽에 Printable 인터페이스를 구현하는 인스턴스가 와야하는 구나</li>
  <li>Printable 인터페이스에 추상 메소드가 하나 밖에 없으니 몸체에 오는 건 그 메소드의 내용이겠구나</li>
</ol>

<p>위 두 가지 정보를 유추할 수 있다. 따라서 생략도 가능하다.</p>

<p><img src="/assets/images/java-lang/26-4.png" alt="image" width="80%" height="80%" /><br /></p>

<h3 id="--람다식의-인자-전달">- <u>람다식의 인자 전달</u></h3>
<p>람다식을 메소드의 인자로 전달할 수도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Printable</span> <span class="o">{</span>
  <span class="kt">void</span> <span class="nf">print</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Show</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">ShowString</span><span class="o">(</span><span class="nc">Printable</span> <span class="n">p</span><span class="o">,</span> <span class="nc">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">p</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LambdaExample</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">showString</span><span class="o">((</span><span class="n">s</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span> <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">s</span><span class="o">);</span> <span class="o">},</span> <span class="s">"What is Lambda?"</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[윤성우의 열혈 Java 프로그래밍] Chapter 25 - 열거형, 가변 인자 그리고 어노테이션</title><link href="http://localhost:4000/java%20lang/Chap25/" rel="alternate" type="text/html" title="[윤성우의 열혈 Java 프로그래밍] Chapter 25 - 열거형, 가변 인자 그리고 어노테이션" /><published>2023-03-06T00:00:00+09:00</published><updated>2023-03-06T00:00:00+09:00</updated><id>http://localhost:4000/java%20lang/Chap25</id><content type="html" xml:base="http://localhost:4000/java%20lang/Chap25/"><![CDATA[<h2 id="25-1-열거형">25-1. 열거형</h2>
<blockquote>
  <p>열거형: ‘의미가 부여된 이름’을 갖는 ‘상수’의 선언</p>
</blockquote>

<h3 id="--인터페이스-기반의-상수-정의">- <u>인터페이스 기반의 상수 정의</u></h3>
<p>열거형 등장 이전의 모습을 보자.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Animal</span> <span class="o">{</span>
   <span class="kt">int</span> <span class="no">DOG</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>  
   <span class="kt">int</span> <span class="no">CAT</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span> 
<span class="o">}</span>

<span class="kd">interface</span> <span class="nc">Person</span> <span class="o">{</span>
   <span class="kt">int</span> <span class="no">MAN</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span>
   <span class="kt">int</span> <span class="no">WOMAN</span> <span class="o">=</span> <span class="mi">2</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">NonSafeConst</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">who</span><span class="o">(</span><span class="nc">Person</span><span class="o">.</span><span class="na">MAN</span><span class="o">);</span>    <span class="c1">// 정상적인 메소드 호출</span>
	<span class="n">who</span><span class="o">(</span><span class="nc">Animal</span><span class="o">.</span><span class="na">DOG</span><span class="o">);</span>    <span class="c1">// 비정상적 메소드 호출</span>
    <span class="o">}</span>
	
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">who</span><span class="o">(</span><span class="kt">int</span> <span class="n">man</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">switch</span><span class="o">(</span><span class="n">man</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nc">Person</span><span class="o">.</span><span class="na">MAN</span><span class="o">:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"남성 손님입니다."</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="nc">Person</span><span class="o">.</span><span class="na">WOMAN</span><span class="o">:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"여성 손님입니다."</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>열거형 등장 이전에는 보다싶이 인터페이스를 이용하여 의미를 가진 상수를 표현했다.<br />
다만, 이런 방식의 경우 위의 코드와 같이 개발자의 의도와는 다르게<br />
Person.MAN에 Animal.DOG이 전달되더라도 컴파일 단계에서 오류가 발견되지 않는다.</p>

<h3 id="--자료형의-부여를-돕는-열거형">- <u>자료형의 부여를 돕는 열거형</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="nc">Scale</span> <span class="o">{</span>
    <span class="no">DO</span><span class="o">,</span> <span class="no">RE</span><span class="o">,</span> <span class="no">MI</span><span class="o">,</span> <span class="no">FA</span><span class="o">,</span> <span class="no">SO</span><span class="o">,</span> <span class="no">RA</span><span class="o">,</span> <span class="no">TI</span>
<span class="o">}</span>
</code></pre></div></div>
<p>열거형은 다음과 같이 정의한다.<br />
그 안에 위치한 이름들을 가리켜 ‘열거형 값’, <code class="language-plaintext highlighter-rouge">Enumerated Values</code>라고 한다.</p>

<p>다음과 같이 Scale형 변수를 선언하고, switch문을 구성할 수도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="nc">Scale</span> <span class="o">{</span>
   <span class="no">DO</span><span class="o">,</span> <span class="no">RE</span><span class="o">,</span> <span class="no">MI</span><span class="o">,</span> <span class="no">FA</span><span class="o">,</span> <span class="no">SO</span><span class="o">,</span> <span class="no">RA</span><span class="o">,</span> <span class="no">TI</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">SimpleEnum</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Scale</span> <span class="n">sc</span> <span class="o">=</span> <span class="nc">Scale</span><span class="o">.</span><span class="na">DO</span><span class="o">;</span>    <span class="c1">// Scale형 참조변수 선언</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sc</span><span class="o">);</span>

        <span class="k">switch</span><span class="o">(</span><span class="n">sc</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">case</span> <span class="nl">DO:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"도~ "</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="nl">RE:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"레~ "</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="nl">MI:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"미~ "</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">case</span> <span class="nl">FA:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"파~ "</span><span class="o">);</span>
            <span class="k">break</span><span class="o">;</span>
        <span class="k">default</span><span class="o">:</span>
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"솔~ 라~ 시~ "</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--클래스-내에-정의가-가능한-열거형의-정의">- <u>클래스 내에 정의가 가능한 열거형의 정의</u></h3>
<p>특정 클래스 내에서만 사용하고 싶은 열거형 값이 있다면, 해당 클래스 내에 열거형을 정의하는 방법도 있다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Customer</span> <span class="o">{</span>
    <span class="kd">enum</span> <span class="nc">Gender</span> <span class="o">{</span> <span class="no">MALE</span><span class="o">,</span> <span class="no">FEMALE</span> <span class="o">}</span>    <span class="c1">// 클래스 내부에서 열거형 선언</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Gender</span> <span class="n">gen</span><span class="o">;</span>
    
    <span class="nc">Customer</span><span class="o">(</span><span class="nc">String</span> <span class="n">n</span><span class="o">,</span> <span class="nc">String</span> <span class="n">g</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">name</span> <span class="o">=</span> <span class="n">n</span><span class="o">;</span>
        
        <span class="k">if</span><span class="o">(</span><span class="n">g</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"man"</span><span class="o">))</span>
            <span class="n">gen</span> <span class="o">=</span> <span class="nc">Gender</span><span class="o">.</span><span class="na">MALE</span><span class="o">;</span>
        <span class="k">else</span>
            <span class="n">gen</span> <span class="o">=</span> <span class="nc">Gender</span><span class="o">.</span><span class="na">FEMALE</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">if</span><span class="o">(</span><span class="n">gen</span> <span class="o">==</span> <span class="nc">Gender</span><span class="o">.</span><span class="na">MALE</span><span class="o">)</span>
            <span class="k">return</span> <span class="s">"Thank you, Mr "</span> <span class="o">+</span> <span class="n">name</span><span class="o">;</span>
        <span class="k">else</span>
            <span class="k">return</span> <span class="s">"Thank you, Mrs "</span> <span class="o">+</span> <span class="n">name</span><span class="o">;</span> 
    <span class="o">}</span>    
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">InnerEnum</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Customer</span> <span class="n">cus1</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Customer</span><span class="o">(</span><span class="s">"Brown"</span><span class="o">,</span> <span class="s">"man"</span><span class="o">);</span>
        <span class="nc">Customer</span> <span class="n">cus2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Customer</span><span class="o">(</span><span class="s">"Susan Hill"</span><span class="o">,</span> <span class="s">"woman"</span><span class="o">);</span>
  
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cus1</span><span class="o">);</span> 
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">cus2</span><span class="o">);</span> 
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--열거형-값의-정체">- <u>열거형 값의 정체</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">enum</span> <span class="nc">Human</span> <span class="o">{</span>
    <span class="no">MAN</span><span class="o">(</span><span class="mi">29</span><span class="o">),</span> <span class="no">WOMAN</span><span class="o">(</span><span class="mi">25</span><span class="o">);</span>
    
    <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

    <span class="kd">private</span> <span class="nf">Human</span><span class="o">(</span><span class="kt">int</span> <span class="n">age</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">=</span> <span class="n">age</span><span class="o">;</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"Human Constructor called"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"I am "</span> <span class="o">+</span> <span class="n">age</span> <span class="o">+</span> <span class="s">" years old!"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EnumExample</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Human</span><span class="o">.</span><span class="na">MAN</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="nc">Human</span><span class="o">.</span><span class="na">WOMAN</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>
<p><img src="/assets/images/java-lang/25-1.png" alt="image" width="40%" height="40%" /><br /></p>

<p>위의 실행 결과를 통해 다음을 알 수 있다.</p>
<ol>
  <li>생성자가 호출되었다.</li>
  <li>toString 메소드가 호출되었다.</li>
</ol>

<p>모든 열거형은 java.lang.Enum<E> 클래스를 상속하고, Enum<E>는 Object 클래스를 상속한다. 이런 측면에서 볼 때 열거형은 넓게 보면 클래스라고도 할 수 있다.  
또한, toString이 호출된 것으로 볼 때 Human.Man, Human.WOMAN 두 열거형 값은 Human 인스턴스를 참조하는 참조변수임을 알 수 있다.</E></E></p>

<p>열거형의 정의에도 생성자가 없으면 디폴트 생성자가 삽입되지만, 이 생성자는 <code class="language-plaintext highlighter-rouge">private</code>으로 선언되어 직접 인스턴스를 생성하는 것이 불가능할 뿐이다.</p>

<p>정리하자면,</p>
<ul>
  <li>열거형도 <code class="language-plaintext highlighter-rouge">Object</code> 클래스를 상속하는 일종의 클래스이다.</li>
  <li>따라서 생성자는 물론, 인스턴스 변수와 메소드 둘 다 가질 수 있다.</li>
  <li>다만 모든 생성자를 <code class="language-plaintext highlighter-rouge">private</code>로 선언해야 하기 때문에 ‘열거형 값’이 유일한 인스턴스 생성 방법이라는 차이가 있을 뿐이다.</li>
</ul>

<h2 id="25-2-매개변수의-가변-인자-선언">25-2. 매개변수의 가변 인자 선언</h2>
<blockquote>
  <p>…이 삽입된 이 메소드의 매개변수 선언을 가리켜 ‘가변 인자 선언’이라 한다.</p>
</blockquote>

<h3 id="--매개변수의-가변-인자-선언과-호출">- <u>매개변수의 가변 인자 선언과 호출</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Varargs</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showAll</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">vargs</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"LEN: "</span> <span class="o">+</span> <span class="n">vargs</span><span class="o">.</span><span class="na">length</span><span class="o">);</span>

        <span class="k">for</span><span class="o">(</span><span class="nc">String</span> <span class="n">s</span> <span class="o">:</span> <span class="n">vargs</span><span class="o">)</span> 
            <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">print</span><span class="o">(</span><span class="n">s</span> <span class="o">+</span> <span class="sc">'\t'</span><span class="o">);</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">showAll</span><span class="o">(</span><span class="s">"Box"</span><span class="o">);</span>
        <span class="n">showAll</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Toy"</span><span class="o">);</span>
        <span class="n">showAll</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Toy"</span><span class="o">,</span> <span class="s">"Apple"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>자바에서는 인자들을 받아 배열로 만들고, 그 배열의 참조값을 참조변수가 참조하도록 한다.</p>

<h3 id="--가변-인자-선언에-대한-컴파일러의-처리">- <u>가변 인자 선언에 대한 컴파일러의 처리</u></h3>
<p>매개변수의 가변 인자 선언은 자바 5에서 추가된 문법이다.<br />
기존 코드는 다음과 같고, 이것이 컴파일러가 변환하는 형태이다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 컴파일러 번역 전</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showAll</span><span class="o">(</span><span class="nc">String</span><span class="o">...</span> <span class="n">vargs</span><span class="o">)</span> <span class="o">{...}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">showAll</span><span class="o">(</span><span class="s">"Box"</span><span class="o">);</span>
    <span class="n">showAll</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Toy"</span><span class="o">);</span>
    <span class="n">showAll</span><span class="o">(</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Toy"</span><span class="o">,</span> <span class="s">"Apple"</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 컴파일러 번역 후</span>
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">showAll</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">vargs</span><span class="o">)</span> <span class="o">{...}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">showAll</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"Box"</span><span class="o">});</span>
    <span class="n">showAll</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Toy"</span><span class="o">});</span>
    <span class="n">showAll</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="s">"Box"</span><span class="o">,</span> <span class="s">"Toy"</span><span class="o">,</span> <span class="s">"Apple"</span><span class="o">});</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="25-3-어노테이션annotations">25-3. 어노테이션(Annotations)</h2>
<blockquote>
  <p>자바 컴파일러에게 메시지를 전달하는 목적의 메모</p>
</blockquote>

<h3 id="--어노테이션의-설명-범위">- <u>어노테이션의 설명 범위</u></h3>
<p>어노테이션은 자바 5에서 소개되었고, 당시 소개된 어노테이션 타입 세 가지는 다음과 같다.</p>

<p><code class="language-plaintext highlighter-rouge">@Override</code><br />
<code class="language-plaintext highlighter-rouge">@Deprecated</code><br />
<code class="language-plaintext highlighter-rouge">@SuppressWarnings</code></p>

<h3 id="--override">- <u>@Override</u></h3>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Viewable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Viewer</span> <span class="kd">implements</span> <span class="nc">Viewable</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>

<span class="kd">class</span> <span class="nc">AtOverride</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Viewable</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Viewer</span><span class="o">();</span>
        <span class="n">view</span><span class="o">.</span><span class="na">showIt</span><span class="o">(</span><span class="s">"Hello Annotations"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<blockquote>
  <p>상위 클래스의 메소드 오버라이딩 또는 인터페이스에 선언된 추상 메소드의 구현이다.</p>
</blockquote>

<p>이에 어긋난 메소드의 정의가 이뤄지면 컴파일 오류로 이어져서 개발자로 하여금 잘못된 부분을 확인할 수 있게 해준다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Viewable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showIt</span><span class="o">(</span><span class="kt">long</span> <span class="n">num</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Viewer</span> <span class="kd">implements</span> <span class="nc">Viewable</span> <span class="o">{</span>
    <span class="nd">@Override</span>   <span class="c1">// 이 어노테이션이 없으면 컴파일러는 단순히 오버로딩으로 간주하고 컴파일 단계에서 오류를 뱉지 않음</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showIt</span><span class="o">(</span><span class="kt">int</span> <span class="n">num</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>

<span class="kd">class</span> <span class="nc">AtOverride</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Viewable</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Viewer</span><span class="o">();</span>
        <span class="n">view</span><span class="o">.</span><span class="na">showIt</span><span class="o">(</span><span class="mi">777</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--deprecated">- <u>@Deprecated</u></h3>
<p>문제의 발생 소지가 있거나 개선된 기능의 다른 것으로 대체되어서 더 이상 필요 없게 되었음을 뜻하는 말로,<br />
아직은 호환성 유지를 위해 존재하지만 이후에 사라질 수 있는 클래스 또는 메소드를 가리켜 Deprecated 되었다고 한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Viewable</span> <span class="o">{</span>
    <span class="nd">@Deprecated</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">);</span> <span class="c1">// 컴파일러가 경고함!</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">brShowIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Viewer</span> <span class="kd">implements</span> <span class="nc">Viewable</span> <span class="o">{</span>
    <span class="nd">@Override</span> 
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">brShowIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="sc">'['</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="sc">']'</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">AtDeprecated</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Viewable</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Viewer</span><span class="o">();</span>
        <span class="n">view</span><span class="o">.</span><span class="na">showIt</span><span class="o">(</span><span class="s">"Hello Annotations"</span><span class="o">);</span>   <span class="c1">// 컴파일러가 경고함!</span>
        <span class="n">view</span><span class="o">.</span><span class="na">brShowIt</span><span class="o">(</span><span class="s">"Hello Annotations"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h3 id="--suppresswarnings">- <u>@SuppressWarnings</u></h3>
<p>컴파일러가 경고 메시지를 전달하는 특정 상황에 대해서, 경고 메시지를 전달하지 말라고 요청할 때 어노테이션 타입 @SuppressWarnings를 사용한다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">interface</span> <span class="nc">Viewable</span> <span class="o">{</span>
    <span class="nd">@Deprecated</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">);</span>

    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">brShowIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Viewer</span> <span class="kd">implements</span> <span class="nc">Viewable</span> <span class="o">{</span>
    <span class="nd">@Override</span> 
    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"deprecation"</span><span class="o">)</span>    <span class="c1">// 컴파일러의 경고 무시</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">showIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">str</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">brShowIt</span><span class="o">(</span><span class="nc">String</span> <span class="n">str</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="sc">'['</span> <span class="o">+</span> <span class="n">str</span> <span class="o">+</span> <span class="sc">']'</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">};</span>

<span class="kd">class</span> <span class="nc">AtSuppressWarnings</span> <span class="o">{</span>
    <span class="nd">@SuppressWarnings</span><span class="o">(</span><span class="s">"deprecation"</span><span class="o">)</span>    <span class="c1">// 컴파일러의 경고 무시</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Viewable</span> <span class="n">view</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Viewer</span><span class="o">();</span>     
        <span class="n">view</span><span class="o">.</span><span class="na">showIt</span><span class="o">(</span><span class="s">"Hello Annotations"</span><span class="o">);</span>
        <span class="n">view</span><span class="o">.</span><span class="na">brShowIt</span><span class="o">(</span><span class="s">"Hello Annotations"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>그리고 다음과 같이 동시에 여러 경고 유형에 대해 @SuppressWarnings 선언을 할 수도 있다.</p>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@SuppressWarnings</span><span class="o">({</span><span class="s">"fallthrough"</span><span class="o">,</span> <span class="s">"deprecation"</span><span class="o">})</span>
</code></pre></div></div>]]></content><author><name>hi~ June!!</name></author><category term="Java lang" /><category term="java" /><summary type="html"><![CDATA[Java 문법 정리!]]></summary></entry><entry><title type="html">[이것이 코딩 테스트다] 그리디</title><link href="http://localhost:4000/this%20is%20coding%20test/greedy/" rel="alternate" type="text/html" title="[이것이 코딩 테스트다] 그리디" /><published>2023-03-04T00:00:00+09:00</published><updated>2023-03-04T00:00:00+09:00</updated><id>http://localhost:4000/this%20is%20coding%20test/greedy</id><content type="html" xml:base="http://localhost:4000/this%20is%20coding%20test/greedy/"><![CDATA[<h2 id="거스름돈">거스름돈</h2>]]></content><author><name>hi~ June!!</name></author><category term="This is coding test" /><category term="coding test" /><summary type="html"><![CDATA[현재 상황에서 가장 좋아 보이는 것만을 선택하는 알고리즘]]></summary></entry></feed>